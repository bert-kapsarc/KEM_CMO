GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/19/16 16:51:27 Page 1
Dynamic Programming Investment
C o m p i l a t i o n


       
   5   
   6  *$INCLUDE ACCESS_HLC.gms
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Macros.gms
   8  ********************************************************************************
   9  *        MACROS for KEM
  10  ********************************************************************************
  11   
  12  *        Time dependant discount factor
  13  $MACRO   discfact(i,t)                   1/(1+i)**(ord(t)-1)
  14   
  15  *        sum of discount factors over lifetime T of capital
  16  $MACRO   sumdiscfact(T,i,n)              sum(n$(ord(n)<=T),discfact(i,n))
  17   
  18  *        Numerator of discounting coefficients
  19  *        Accounts for recursive dynmic solves when size of t greater than tt
  20  *        Consider final time period of tt to be a long term static solution
  21  $MACRO   intdiscfact(i,t,tt) sum(tt$(ord(tt)>=ord(t)),1/(1+i)**(ord(tt)-ord(t)))
  22   
  23  $MACRO   discounting(Time,i,n,t,tt)    intdiscfact(i,t,tt)/sumdiscfact(Time,i,n)
  24   
  25  * Solar position equations used for CSP implementation (Parameters described in power sub-model):
  26  * the parameter table "Dayofyear" in the power sub-model.
  27  * long and lat are specificed in power sub-model for each region;
  28   
  29  $MACRO   earthpos(Dayofyear)            ((Dayofyear-1)*360/365)
  30   
  31  $MACRO   EOT(Dayofyear)                  (229.2*(0.000075+0.001868*COS(earthpos(Dayofyear)*pi/180)-0.032077*SIN(earthpos(Dayofyear)*pi/180)-0.014615*COS(2*(earthpos(Dayofyear)*pi/180))-0.04089*S
      IN(2*(earthpos(Dayofyear)*pi/180))))
  32   
  33  $MACRO   solhr(hr,Dayofyear,long,tzone)       (((1$(frac(hr/24)=0)+frac(hr/24))*24*60-(long-tzone)*4+EOT(Dayofyear)))/60
  34  $MACRO   hourangle(solhour)                   (solhour-12)*360/24
  35   
  36  $MACRO   soldecl(Dayofyear)              (0.3963723-22.9132745*COS(earthpos(Dayofyear)*pi/180)+4.0254304*SIN(earthpos(Dayofyear)*pi/180)-0.387205*COS(2*earthpos(Dayofyear)*pi/180)+0.05196728*SIN
      (2*earthpos(Dayofyear)*pi/180)-0.1545267*COS(3*earthpos(Dayofyear)*pi/180)+0.0847977*SIN(3*earthpos(Dayofyear)*pi/180))
  37  $MACRO   solalt(hrangle,solardeclination,lat)   (arcsin(COS(lat*pi/180)*COS(hrangle*pi/180)*COS(solardeclination*pi/180)+SIN(lat*pi/180)*SIN(solardeclination*pi/180))*180/pi)
  38  $MACRO   solazim(hrangle,solardeclination,lat,solaralt)  (180/pi*arccos((SIN(solardeclination*pi/180)*COS(lat*pi/180)-COS(solardeclination*pi/180)*SIN(lat*pi/180)*COS(hrangle*pi/180))/COS(solara
      lt*pi/180)))
  39  $MACRO   Gamma(solarazimuth,surfaceazimuth)  (ABS(solarazimuth-surfaceazimuth))
  40   
  41   
  42  $MACRO   Incidence(solaralt,gammaa,orientation)    (180/pi*arccos(COS(solaralt*pi/180)*COS(gammaa*pi/180)*SIN(orientation*pi/180)+SIN(solaralt*pi/180)*COS(orientation*pi/180)))
  43  *orientation is the tilt angle of the surface, 0 for horizontal surfaces and 90 degrees for vertical surfaces.
  44   
FUNCLIBIN  stolib stodclib
Function Library stolib
Random deviates, probability density function, cumulative distribution function, inverse cumulative distribution function
GAMS Development Corporation

Mod. Function                          Description
Type

none SetSeed(SEED)                     Define the seed for random number gen
none dUniform(LOW,HIGH)                Uniform distribution
DNLP pdfUniform(x,LOW,HIGH)            Probability density function for uniform distribution
DNLP cdfUniform(x,LOW,HIGH)            Cumulative distribution function for uniform distribution
DNLP icdfUniform(x,LOW,HIGH)           Inverse cumulative distribution function for uniform distribution
none dNormal(MEAN,STD_DEV)             Normal distribution
DNLP pdfNormal(x,MEAN,STD_DEV)         Probability density function for normal distribution
DNLP cdfNormal(x,MEAN,STD_DEV)         Cumulative distribution function for normal distribution
DNLP icdfNormal(x,MEAN,STD_DEV)        Inverse cumulative distribution function for normal distribution
none dInvGaussian(MEAN,SHAPE)          Inverse Gaussian distribution
DNLP pdfInvGaussian(x,MEAN,SHAPE)      Probability density function for inverse Gaussian distribution
DNLP cdfInvGaussian(x,MEAN,SHAPE)      Cumulative distribution function for inverse Gaussian distribution
DNLP icdfInvGaussian(x,MEAN,SHAPE)     Inverse cumulative distribution function for inverse Gaussian distribution
none dRayleigh(SIGMA)                  Rayleigh distribution
DNLP pdfRayleigh(x,SIGMA)              Probability density function for Rayleigh distribution
DNLP cdfRayleigh(x,SIGMA)              Cumulative distribution function for Rayleigh distribution
DNLP icdfRayleigh(x,SIGMA)             Inverse cumulative distribution function for Rayleigh distribution
none dCauchy(LOCATION,SCALE)           Cauchy distribution
DNLP pdfCauchy(x,LOCATION,SCALE)       Probability density function for Cauchy distribution
DNLP cdfCauchy(x,LOCATION,SCALE)       Cumulative distribution function for Cauchy distribution
DNLP icdfCauchy(x,LOCATION,SCALE)      Inverse cumulative distribution function for Cauchy distribution
none dLognormal(MEAN,STD_DEV)          Lognormal distribution
DNLP pdfLognormal(x,MEAN,STD_DEV)      Probability density function for Lognormal distribution
DNLP cdfLognormal(x,MEAN,STD_DEV)      Cumulative distribution function for Lognormal distribution
DNLP icdfLognormal(x,MEAN,STD_DEV)     Inverse cumulative distribution function for Lognormal distribution
none dExponential(LAMBDA)              Exponential distribution
DNLP pdfExponential(x,LAMBDA)          Probability density function for Exponential distribution
DNLP cdfExponential(x,LAMBDA)          Cumulative distribution function for Exponential distribution
DNLP icdfExponential(x,LAMBDA)         Inverse cumulative distribution function for Exponential distribution
none dLogistic(LOCATION,SCALE)         Logistic distribution
DNLP pdfLogistic(x,LOCATION,SCALE)     Probability density function for Logistic distribution
DNLP cdfLogistic(x,LOCATION,SCALE)     Cumulative distribution function for Logistic distribution
DNLP icdfLogistic(x,LOCATION,SCALE)    Inverse cumulative distribution function for Logistic distribution
none dGamma(SHAPE,SCALE)               Gamma distribution
DNLP pdfGamma(x,SHAPE,SCALE)           Probability density function for Gamma distribution
DNLP cdfGamma(x,SHAPE,SCALE)           Cumulative distribution function for Gamma distribution
DNLP icdfGamma(x,SHAPE,SCALE)          Inverse cumulative distribution function for Gamma distribution
none dChiSquare(DF)                    Chi square distribution
none DF(DF_1,DF_2)                     F distribution
DNLP pdfChiSquare(x,DF)                Probability density function for Chi square distribution
DNLP cdfChiSquare(x,DF)                Cumulative distribution function for Chi square distribution
DNLP icdfChiSquare(x,DF)               Inverse cumulative distribution function for Chi square distribution
none dWeibull(SHAPE,SCALE)             Weibull distribution
DNLP pdfWeibull(x,SHAPE,SCALE)         Probability density function for Weibull distribution
DNLP cdfWeibull(x,SHAPE,SCALE)         Cumulative distribution function for Weibull distribution
DNLP icdfWeibull(x,SHAPE,SCALE)        Inverse cumulative distribution function for Weibull distribution
none dBeta(SHAPE_1,SHAPE_2)            Beta distribution
DNLP pdfBeta(x,SHAPE_1,SHAPE_2)        Probability density function for Beta distribution
DNLP cdfBeta(x,SHAPE_1,SHAPE_2)        Cumulative distribution function for Beta distribution
DNLP icdfBeta(x,SHAPE_1,SHAPE_2)       Inverse cumulative distribution function for Beta distribution
DNLP pdfF(x,DF_1,DF_2)                 Probability density function for F distribution
DNLP cdfF(x,DF_1,DF_2)                 Cumulative distribution function for F distribution
DNLP icdfF(x,DF_1,DF_2)                Inverse cumulative distribution function for F distribution
none dStudentT(DF)                     Students T distribution
DNLP pdfStudentT(x,DF)                 Probability density function for Students T distribution
DNLP cdfStudentT(x,DF)                 Cumulative distribution function for Students T distribution
DNLP icdfStudentT(x,DF)                Inverse cumulative distribution function for Students T distribution
none dPareto(SCALE,SHAPE)              Pareto distribution
DNLP pdfPareto(x,SCALE,SHAPE)          Probability density function for Pareto distribution
DNLP cdfPareto(x,SCALE,SHAPE)          Cumulative distribution function for Pareto distribution
DNLP icdfPareto(x,SCALE,SHAPE)         Inverse cumulative distribution function for Pareto distribution
none dGumbel(LOCATION,SCALE)           Gumbel distribution
DNLP pdfGumbel(x,LOCATION,SCALE)       Probability density function for Gumbel distribution
DNLP cdfGumbel(x,LOCATION,SCALE)       Cumulative distribution function for Gumbel distribution
DNLP icdfGumbel(x,LOCATION,SCALE)      Inverse cumulative distribution function for Gumbel distribution
none dLaplace(MEAN,SCALE)              Laplace distribution
DNLP pdfLaplace(x,MEAN,SCALE)          Probability density function for Laplace distribution
DNLP cdfLaplace(x,MEAN,SCALE)          Cumulative distribution function for Laplace distribution
DNLP icdfLaplace(x,MEAN,SCALE)         Inverse cumulative distribution function for Laplace distribution
none dTriangular(LOW,MID,HIGH)         Triangular distribution
DNLP pdfTriangular(x,LOW,MID,HIGH)     Probability density function for Triangular distribution
DNLP cdfTriangular(x,LOW,MID,HIGH)     Cumulative distribution function for Triangular distribution
DNLP icdfTriangular(x,LOW,MID,HIGH)    Inverse cumulative distribution function for Triangular distribution
none dUniformInt(LOW,HIGH)             Uniform integer distribution
none pdfUniformInt(x,LOW,HIGH)         Probability density function for Uniform integer distribution
none cdfUniformInt(x,LOW,HIGH)         Cumulative distribution function for Uniform integer distribution
none icdfUniformInt(x,LOW,HIGH)        Inverse cumulative distribution function for Uniform integer distribution
none dBinomial(N,P)                    Binomial distribution
none pdfBinomial(x,N,P)                Probability density function for Binomial distribution
none cdfBinomial(x,N,P)                Cumulative distribution function for Binomial distribution
none icdfBinomial(x,N,P)               Inverse cumulative distribution function for Binomial distribution
none dNegBinomial(FAILURES,P)          Negative Binomial distribution
none pdfNegBinomial(x,FAILURES,P)      Probability density function for Negative Binomial distribution
none cdfNegBinomial(x,FAILURES,P)      Cumulative distribution function for Negative Binomial distribution
none icdfNegBinomial(x,FAILURES,P)     Inverse cumulative distribution function for Negative Binomial distribution
none dGeometric(P)                     Geometric distribution
none pdfGeometric(x,P)                 Probability density function for Geometric distribution
none cdfGeometric(x,P)                 Cumulative distribution function for Geometric distribution
none icdfGeometric(x,P)                Inverse cumulative distribution function for Geometric distribution
none dHyperGeo(TOTAL,GOOD,TRIALS)      HyperGeometric distribution
none pdfHyperGeo(x,TOTAL,GOOD,TRIALS)  Probability density function for HyperGeometric distribution
none cdfHyperGeo(x,TOTAL,GOOD,TRIALS)  Cumulative distribution function for HyperGeometric distribution
none icdfHyperGeo(x,TOTAL,GOOD,TRIALS) Inverse cumulative distribution function for HyperGeometric distribution
none dLogarithmic(P-FACTOR)            Logarithmic distribution
none pdfLogarithmic(x,P-FACTOR)        Probability density function for Logarithmic distribution
none cdfLogarithmic(x,P-FACTOR)        Cumulative distribution function for Logarithmic distribution
none icdfLogarithmic(x,P-FACTOR)       Inverse cumulative distribution function for Logarithmic distribution
none dPoisson(LAMBDA)                  Poisson distribution
none pdfPoisson(x,LAMBDA)              Probability density function for Poisson distribution
none cdfPoisson(x,LAMBDA)              Cumulative distribution function for Poisson distribution
none icdfPoisson(x,LAMBDA)             Inverse cumulative distribution function for Poisson distribution

  46  function cdfnorm     /stolib.cdfnormal/;
  47   
  48  scalar trading set to 1 to allow regional trade by firms /1/;
  49   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\SetsAndVariables.gms
  51  Sets i generators       /fringe, g1*g4/
  52       h technology       /CCGT, GT, ST, Nuclear/
  53       l market segment   /l1*l8/
  54       seasons  /winter,summer,spring-fall/
  55  *     e(seasons) seasons for running the model /summer/
  56       e(seasons) seasons for running the model /winter,summer,spring-fall/
  57       winter(seasons) /winter/
  58       spring(seasons) /spring-fall/
  59       summer(seasons) /summer/
  60       fall(seasons) /spring-fall/
  61   
  62       m(l) capacity market /l5,l6,l7/
  63       s scenarios        /s1*s3/
  64       r regions          /COA,EOA,SOA,WOA/
  65       n power_lines      /East,South,west/
  66                                           ;
  67   
  68  *     m(l) = no;
  69   
  70   
  71  Alias (h,hh), (i,j), (m,mm), (r,rr);
  72   
  73  alias (l,ll), (i,ii), (s,ss), (h,hh), (r,rr,rrr), (e,ee);
  74   
  75  variables
  76           inv(i,h,r)  investment by player i in technology h
  77           ret(i,h,r)  retirement of technology h in region r by player i
  78   
  79           Cap_avail(i,h,r) available capacity of player i of technolgy h in region r in MW
  80           Q(i,h,r,seasons,l,s,ss)  generation quantity from a player i at market l in scenario in MW
  81           sales(i,r,seasons,l,s,ss) sales of firm in region r market l scenario s in MW
  82           lambda_high(i,h,r,seasons,l,s,ss) shadow prices for the high capacity constraint in USD per  MWh
  83           lambda_low(i,h,r,seasons,l,s,ss)  shadows prices for low constraint in USD per  MWh
  84           delta(r,seasons,l)   shadow prices for the capacity market in USD per  MW per hour
  85           price(r,seasons,l,s,ss) energy price in USD per MWh
  86           price_trans(n,seasons,l,s,ss) tranmission price in USD per MWh
  87           price_trans_pos(n,r,seasons,l,s,ss) tranmission price in USD per MWh
  88           price_trans_neg(n,r,seasons,l,s,ss) tranmission price in USD per MWh
  89           alpha(i,h,r) shadow prices for the non-negative investment constraints in USD per  MW
  90           eta_high(i,h,r) shadow prices for the capacity retirment constraint in USD per  MW
  91           eta_low(i,h,r)
  92   
  93           arbitrage(n,r,rr,seasons,l,s,ss) TSO outgoing electricity arbitrage from node r on line n
  94           trade(i,n,r,rr,seasons,l,s,ss) outgoing electricity trade by firm i from node r on line n
  95           trans(n,seasons,l,s,ss) electricity trans by on line n
  96   
  97           tau(n,seasons,l,s,ss) shadow prices for the high capacity constraint in USD per MW
  98           zeta(i,n,r,rr,seasons,l,s,ss) shadow prices for the outgoing no-negative trade constraint in USD per MW
  99           shadows_arbitrage(n,r,rr,seasons,l,s,ss) shadow prices for no-negative incoming arbitrage constriant in USD per MW
 100           shadows_trans(n,seasons,l,s,ss) shadow prices for the positive transmission constriant in USD per MW
 101            ;
 102   
 103  positive variables lambda_high, lambda_low,  alpha,
 104                     eta_high,eta_low, psi
 105                     tau,zeta,shadows_arbitrage,shadows_trans
 106                     ;
 107   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Demand.gms
 109  *$INCLUDE ACCESS_HLC.gms
 111   
 112  set hrs            hours in the load curve data set /1*8760/
 113  parameter HLC(r,hrs) hourly load curves for represenative day in each month in MW
 114  parameter ELlcgw(r,seasons,l) power demand load blocks in MW
 115            EL_demand(r,e,l,s,ss) Stochastic Electricity Demand for scenarios s in GW
 116            d(e,l) duration of segemt l in region r (deterministic)
 117            prob(s,ss) probability off each scenario
 118  ;
GDXIN   D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\db\load.gdx
--- LOAD  HLC = 1:HLC
 122   
 123   
 124   
 125  parameter day(hrs)    day for each hour in a year
 126            hour(hrs) represents each hour in the hourly demand data year from 0 to 23
 127  ;
 128   
 129   
 130            day(hrs) = floor(ord(hrs)/24)+1;
 131            day('8760') = 1;
 132   
 133   
 134            hour(hrs)=ord(hrs)-(day(hrs)-1)*24
 135   
 136  table duration(seasons,l) duration of segemt l in region r and season e
 137   
 138  * these are the hour blocks used to average the actual hourly demand patterns
 139  * must sum to 24
 140  *$ontext
 141                                   l1  l2  l3  l4  l5  l6  l7  l8
 142  (winter,spring-fall,summer)       4   4   4   2   3   2   2   3
 143  *$offtext
 144   
 145  *                                 l1  l2
 146  *(winter,spring-fall,summer)      12  12
 147   ;
 148   
 149   parameter block_start(seasons,l) start hour for hour in load block l
 150             block_end(seasons,l);
 151   
 152   block_start(seasons,l) = sum(ll$(ord(ll)<ord(l)),duration(seasons,ll));
 153   block_end(seasons,l) = sum(ll$(ord(ll)<=ord(l)),duration(seasons,ll));
 154   
 155  parameter start_day(seasons) first day to sample hourly data from for season e
 156   
 157  /
 158  winter 304
 159  spring-fall 61
 160  summer 122
 161  /
 162            end_day(seasons) last day to sample hourlyy data for season e
 163   
 164   
 165  number_of_days(seasons)
 166         ;
 167  scalar
 168           start_day_fall first day to sample hourly data from for fall season /243/
 169           end_day_fall first day to sample hourly data from
 170   
 171   
 172   
 173   
 174  ;
 175  end_day('winter') = start_day('spring-fall')-1;
 176  end_day('spring-fall') = start_day('summer')-1;
 177  end_day('summer') = start_day_fall-1;
 178  end_day_fall = start_day('winter')-1;
 179   
 180  number_of_days(seasons)$(not winter(seasons)) = end_day(seasons)-start_day(seasons)+1;
 181  number_of_days('spring-fall') = number_of_days('spring-fall')+end_day_fall-start_day_fall+1;
 182  number_of_days('winter') = smax(hrs,day(hrs))-sum(seasons,number_of_days(seasons));
 183   
 184   
 185     duration(seasons,l)=duration(seasons,l)*number_of_days(seasons);
 186   
 187  ELlcgw(r,e,l) =
 188  sum(hrs$(
 189                  (        (day(hrs)>=start_day(e) and
 190                            day(hrs)<=end_day(e) and (spring(e) or summer(e)) ) or
 191   
 192                           (day(hrs)>=start_day_fall and
 193                            day(hrs)<=end_day_fall and fall(e)) or
 194   
 195                           ((day(hrs)>=start_day(e) or day(hrs)<=end_day(e)) and
 196                                   winter(e))
 197   
 198                  )and
 199                  hour(hrs)>=block_start(e,l) and
 200                  hour(hrs)<block_end(e,l)
 201           ), HLC(r,hrs))/(duration(e,l))
 202  ;
 203   
 204   
 205  if(card(e)=1 ,
 206  duration(e,l)$(card(e)=1)=duration(e,l)*365/number_of_days(e);
 207   
 208  );
 209   
 210   
 211  scalar random, mean, stddev;
 212  mean = 1;
 213  stddev =0.2;
 214   
 215  scalar CDF_lo /0.5/, CDF_hi /1.5/, diff, CDF_alpha,CDF_beta,Z_cdf,X_cdf;
 216  parameter CDF_x(s) cumulative distribution functions for each scenario s;
 217   
 218   
 219            diff = CDF_hi -CDF_lo;
 220   
 221  *        apply growth equally to all demand segments
 222  *        Rescale demand to GW
 223  *        Rescale duration such taht energy is in units of TWH
 224  *        Marginal costs should be in units of MMUSD/TWH
 225   
 226           EL_Demand(r,e,l,s,ss) = ELlcgw(r,e,l)*1e-3;
 227           d(e,l) = duration(e,l)*1e-3;
 228           ;
 229   
 230           CDF_alpha = cdfnorm(CDF_lo,mean,stddev);
 231           CDF_beta =  cdfnorm(CDF_hi,mean,stddev);
 232           Z_cdf=CDF_beta-CDF_alpha;
 233           prob(s,ss)=0;
 234           CDF_x(s)=0;
 235   
 236  loop(s$(ord(s)<=card(s)),
 237   
 238           X_cdf=CDF_lo+ord(s)*diff/card(s);
 239           CDF_x(s)= (cdfnorm(X_cdf,mean,stddev)-CDF_alpha)/Z_cdf;
 240           prob(s,ss) = CDF_x(s) - CDF_x(s-1);
 241           X_cdf=X_cdf-(diff/(2*card(s)))$(card(s)>1);
 242           EL_Demand(r,e,l,s,ss)= EL_Demand(r,e,l,s,ss)*X_cdf;
 243           display x_cdf;
 244  );
 245   
 246  display prob,EL_Demand,CDF_x
 247   
 248   
 249   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\parameters.gms
 251  Parameters
 252             v(i)   CONJECTURAL VARIANTION for production by player /g1 0, g2 0, g3 0, g4 0, fringe -1/
 253             z(i)   CONJECTURAL VARIANTION for capacity by player /g1 0, g2 0, g3 0, g4 0, fringe -1/
 254   
 255   
 256             capital_cost(h) Capital cost in USD per GW /CCGT 1740, GT 1485, ST 2120, Nuclear 4896/
 257             ic(h)  investment cost USD per GW
 258             om(h) Fixed O&M cost USD per GW  /GT 11.2, CCGT 12.4, ST 11.2, Nuclear 68.8/
 259             K0(h,r) existent capacity of technology h in region r before liberalization
 260             kind0(i,h,r) initial capacity by technology and firm in each region in GW
 261             K(r,l) minimum installed capacity available to sell in region r and market segment l
 262  *           EL_demand(r,e,l,s,ss) Electricity Demand GW
 263  *           d(e,l) duration of segemt l in region r (deterministic)
 264  *           prob(s,ss) probability off each scenario
 265   
 266  *Design operating life for steam, GT, and CC from KFUPM generation report.
 267             lifetime(h) plant lifetime /CCGT 30, GT 25, ST 35, Nuclear 60/
 268             discrate discount rate used for power plant investments /0.06/
 269   
 270   
 271   
 272  ;
 273   
 274           parameter discoef;
 275           set t dummy time set /2020/
 276           set index /1*1000/
 277               tt(t) /2020/
 278           ;
 279   
 280  *        Discounting plant capital costs over lifetime
 281           discoef(h,t) = sum(tt$(ord(tt)>=ord(t)),1/(1+discrate)**(ord(tt)-ord(t)))/sum(index$(ord(index)<=lifetime(h)),1/(1+discrate)**(ord(index)-1));
 282   
 283           ic(h)=capital_cost(h)*discoef(h,'2020');
 284   
 285   
 286  Parameters ici(h)  investment cost
 287             icr(h)  retirement capacity cost;
 288   
 289  ici(h) = ic(h)
 290  ;
 291  icr(h) = ic(h)*0.1;
 292  *icr(h) = 0;
 293   
 294   
 295   
 296  parameter mc(h,r,s,ss) marginal cost in USD per MWh  ;
 297   
 298  mc('CCGT',r,s,ss)  = 1.2449 ;
 299  mc('CCGT','EOA',s,ss)  = 1.1833 ;
 300  mc('GT',r,s,ss) =  1.6840;
 301  mc('ST',r,s,ss) =  1.2261;
 302  mc('Nuclear',r,s,ss) = 6.9;
 303  *mc('ULtrsc',r,s,ss)  = 1.2449
 304   
 305   
 306  * Uranium-235 use is in g/GWh
 307  parameter heat_rate(h) fueal burn rate in mmbtu and KG per MWH
 308  /
 309  CCGT               6.09286
 310  GT                 10.000
 311  ST                 8.949
 312  Nuclear            0.120
 313  *Ultrsc              1.217
 314  /
 315  ;
 316   
 317   
 318  parameter fuel_price(h) price of fuels in USD per mmbtu and KG U235
 319  /
 320  CCGT               1.25
 321  GT                 1.25
 322  ST                 1.25
 323  Nuclear            113
 324  *Ultrsc             50
 325  /
 326  ;
 327   
 328  loop(s,
 329  mc(h,r,s,ss) = mc(h,r,s,ss)+heat_rate(h)*fuel_price(h)*1;
 330  *uniform(1,1)
 331  );
 332  ;
 333   
 334   
 335  parameter  beta(h,r,l) available capacity in market l
 336  ;
 337  beta(h,r,l)=1;
 338   
 339  Parameters  a(r,e,l,s,ss) intercept of energy demand curve,
 340              b(r,e,l,s,ss) slope of energy demand curve
 341              theta(r,e,l) intercept of capacity demand curve,
 342              xi(r,e,l) slope of capacity demand curve;
 343   
      Table K0(h,r)
            COA        EOA          SOA          WOA
      CCGT  1360.6     6496.37      0            9144.97
      GT    14185.3    9540.3       4113.14      9150.26
      ST    706        13252.8      1020         16399.2
      ;
       
      Table K0(h,r)
            COA   EOA   SOA   WOA
      CCGT  0     0     0     0
      GT    0     0     0     0
      ST    0     0     0     0
      ;
 359   
 360   
 361  table kind0(i,h,r) firms existing generation capacity in GW
 362   
 363                   COA             EOA             SOA             WOA
 364   
 365  g1.CCGT          1.3606          0               0               0
 366  g1.GT            13.0693         0               0               0
 367  g1.ST            0               0               0               0
 368   
 369  g2.CCGT          0               3.929           0               0
 370  g2.GT            0               5.8315          0               0
 371  g2.ST            0               6.756           0               0
 372   
 373  g3.CCGT          0               0               0               0
 374  g3.GT            0               0               4.11314         0
 375  g3.ST            0               0               0               0
 376   
 377  g4.CCGT          0               0               0               1.288
 378  g4.GT            0               0               0               8.5497
 379  g4.ST            0               0               0               9.8884
 380   
 381  fringe.CCGT      0               2.56737         0               0
 382  fringe.GT        1.116           3.7085          0               6.0056
 383  fringe.ST        0.706           6.4968          1.020           7.12936
 384  ;
 385   
 386  parameter kind_trans0(n) transmission capacity in GW
 387   /
 388           East    5.22
 389           South   1.5
 390           West    1.2
 391   /
 392        ;
 393  *WOA   0     1.16
 394   
 395  *Data for 2014 inter-regional transmission capacities were obtained from ECRA correspondence.
 396           parameter phi(n)  oper. and maint. cost of transmission in USD per MWH
 397           /
 398            West   3.71
 399            South  3.73
 400            East   3.78
 401           /
                      WOA   SOA     COA     EOA
               WOA   3.49   3.73    3.71    4.33
               SOA   3.73   3.49    4.10    4.50
               COA   3.71   4.1     3.49    3.78
               EOA   4.33   4.5     3.78    3.49
 409  ;
 410   
 411  Parameter capfactor(h) capacity factors for dispatchable plants
 412  /ST      0.885
 413   GT      0.923
 414   CCGT    0.885
 415   Nuclear 0.860
 416  /
 417   
 418   
 419   
 420  parameter  x(i,r,rr)   CONJECTURAL VARIANTION for electricity by player between region r and rr
 421  ;
 422  x(i,r,rr)=v(i);
 423   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\equations.gms
 425  set trans_node(n,r),trans_node_end(n,r);
 426   
 427  trans_node('WEST','WOA')=yes;
 428  trans_node_end('WEST','COA')=yes;
 429   
 430  trans_node('South','SOA')=yes;
 431  trans_node_end('South','WOA')=yes;
 432   
 433  trans_node('East','EOA')=yes;
 434  trans_node_end('East','COA')=yes;
 435   
 436   
 437  set r_trans(n,r,rr), r_trade(n,r,rr);
 438   
 439  r_trans(n,r,rr)$(trans_node(n,r) and trans_node_end(n,rr) and ord(r)<>ord(rr))=yes;
 440  r_trade(n,r,rr)$(r_trans(n,r,rr))=yes;
 441  r_trade(n,rr,r)$(r_trans(n,r,rr))=yes;
 442   
 443   
 444           trade.fx(i,n,r,rr,e,l,s,ss)$(trading<>1)=0;
 445  *         arbitrage.fx(r,rr,l,s,ss)=0;
 446   
 447  *        Fix capacity price
 448  *         delta.l(r,m) = 0;
 449   
 450  Equations
 451           Eq1(r,e,l,s,ss)              Equation (1)
 452           Eq2(r,e,l)                Equation (1)
 453           Eq9_1(i,h,r,e,l,s,ss)        Equation (8.1)
 454           Eq9_2(i,h,r)              Equation (8.2)
 455           Eq9_3(i,h,r)              Equation (8.3)
 456           Eq9_4(i,n,r,rr,e,l,s,ss)       Equation (8.4)
 457           Eq9_5(i,h,r,e,l,s,ss)
 458           Eq9_6(i,h,r)
 459           Eq9_7(i,h,r)
 460           Eq9_8(i,r,e,l,s,ss)
 461   
 462           Eq10_1(n,r,rr,e,l,s,ss)
 463   
 464           Eq11_1(n,e,l,s,ss)
 465           Eq11_2(n,e,l,s,ss)
 466           Eq11_3(n,e,l,s,ss)
 467   
 468           Eq_q(i,h,r,e,l,s,ss)
 469           Eq_inv(i,h,r)
 470           Eq_ret(i,h,r)
 471           Eq_trade(i,n,r,rr,e,l,s,ss)
 472           Eq_arb(n,r,rr,e,l,s,ss)
 473   
 474  ;
 475  Eq1(r,e,l,s,ss)..    price(r,e,l,s,ss)=e=
 476                       a(r,e,l,s,ss)-b(r,e,l,s,ss)*sum(j,sales(j,r,e,l,s,ss))
 477                       +b(r,e,l,s,ss)*(
 478                            sum((n,rr)$r_trade(n,r,rr),arbitrage(n,r,rr,e,l,s,ss))
 479                            -sum((n,rr)$r_trade(n,rr,r),arbitrage(n,rr,r,e,l,s,ss))
 480                       );
 481   
 482  Eq2(r,e,m) ..        delta(r,e,m)=e=theta(r,e,m)-xi(r,e,m)*sum((j,hh),beta(hh,r,m)*Cap_avail(j,hh,r));
 483   
 484  Eq9_1(i,h,r,e,l,s,ss) ..  price(r,e,l,s,ss)-mc(h,r,s,ss)-b(r,e,l,s,ss)*(1+v(i))*sales(i,r,e,l,s,ss)-lambda_high(i,h,r,e,l,s,ss)+lambda_low(i,h,r,e,l,s,ss)=e= 0 ;
 485  *
 486  Eq9_2(i,h,r)..       sum((e,m),d(e,m)*delta(r,e,m)*beta(h,r,m))
 487                      -sum((e,m),d(e,m)*xi(r,e,m)*(beta(h,r,m)+z(i))*sum(hh,beta(hh,r,m)*Cap_avail(i,hh,r)))
 488                       +sum((e,l,s,ss),prob(s,ss)*d(e,l)*lambda_high(i,h,r,e,l,s,ss)) +alpha(i,h,r) =e=ici(h)+om(h);
 489  *
 490   
 491  Eq9_3(i,h,r)..      -sum((e,m),d(e,m)*delta(r,e,m)*beta(h,r,m))
 492                      +sum((e,m),d(e,m)*xi(r,e,m)*(beta(h,r,m)+z(i))*sum(hh,beta(hh,r,m)*Cap_avail(i,hh,r)))
 493                      -sum((e,l,s,ss),prob(s,ss)*d(e,l)*lambda_high(i,h,r,e,l,s,ss))-eta_high(i,h,r)
 494                       +eta_low(i,h,r) =e= icr(h)-om(h);
 495  *
 496   
 497  Eq9_4(i,n,r,rr,e,l,s,ss)$(trading=1 and r_trade(n,r,rr))..
 498           price(rr,e,l,s,ss)-price(r,e,l,s,ss)+zeta(i,n,r,rr,e,l,s,ss)
 499           -price_trans(n,e,l,s,ss)
 500          +b(r,e,l,s,ss)*sales(i,r,e,l,s,ss)*(1+x(i,r,rr))
 501          -b(rr,e,l,s,ss)*sales(i,rr,e,l,s,ss)*(1+x(i,rr,r))
 502                   =e=0;
 503   
 504   
 505  Eq9_5(i,h,r,e,l,s,ss) ..  Cap_avail(i,h,r)-Q(i,h,r,e,l,s,ss)=g=0;
 506  Eq9_6(i,h,r)..         kind0(i,h,r) - ret(i,h,r)=g=0 ;
 507  Eq9_7(i,h,r)..         Cap_avail(i,h,r) =e= kind0(i,h,r)+inv(i,h,r)-ret(i,h,r);
 508   
 509  Eq9_8(i,r,e,l,s,ss)..     sales(i,r,e,l,s,ss)=e=
 510                           sum(h,Q(i,h,r,e,l,s,ss))
 511                         -sum((n,rr)$(r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s,ss))$(trading=1)
 512                         +sum((n,rr)$(r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s,ss))$(trading=1) ;
 513   
 514  Eq10_1(n,r,rr,e,l,s,ss)$r_trade(n,r,rr)..
 515           price(rr,e,l,s,ss)-price(r,e,l,s,ss)
 516           -price_trans(n,e,l,s,ss)
 517           +shadows_arbitrage(n,r,rr,e,l,s,ss)
 518                                   =e=0        ;
 519   
 520  Eq11_1(n,e,l,s,ss).. price_trans(n,e,l,s,ss)
 521                           -phi(n)-tau(n,e,l,s,ss)/d(e,l)
 522                           =e= 0;
 523   
 524  Eq11_2(n,e,l,s,ss)..   kind_trans0(n)-trans(n,e,l,s,ss)=g=0;
 525   
 526  Eq11_3(n,e,l,s,ss)..
 527   
 528           trans(n,e,l,s,ss)=g=
 529                      abs(
 530                   sum((i,r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s,ss))
 531                   -sum((i,r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s,ss))
 532                   +sum((r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s,ss))
 533                   -sum((r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),arbitrage(n,rr,r,e,l,s,ss))
 534             )$(trading=1)
 535             +sum((r,rr)$(r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s,ss))$(trading<>1)
 536           ;
 537   
 538  Eq_q(i,h,r,e,l,s,ss)        .. Q(i,h,r,e,l,s,ss) =g= 0;
 539  Eq_inv(i,h,r)            .. inv(i,h,r) =g= 0;
 540  Eq_ret(i,h,r)            .. ret(i,h,r)=g=0;
 541   
 542   
 543  Eq_trade(i,n,r,rr,e,l,s,ss)$(trading=1 and r_trade(n,r,rr))..
 544           trade(i,n,r,rr,e,l,s,ss)=g=0;
 545   
 546  Eq_arb(n,r,rr,e,l,s,ss)$r_trade(n,r,rr)   .. arbitrage(n,r,rr,e,l,s,ss)=g=0;
 547   
 548  model CMO   /
 549              Eq1,
 550              Eq2,
 551              Eq9_1,
 552              Eq9_2,
 553              Eq9_3,
 554              Eq9_4,
 555              Eq9_5.lambda_high,
 556              Eq9_6.eta_high,
 557              Eq9_7,
 558              Eq9_8,
 559   
 560              Eq10_1,
 561              Eq11_1,
 562              Eq11_2.tau,
 563              Eq11_3.price_trans
 564   
 565              Eq_q.lambda_low,
 566              Eq_trade.zeta,
 567              Eq_inv.alpha,
 568              Eq_ret.eta_low,
 569              Eq_arb.shadows_arbitrage,
 570  /;
 571           option MCP=path;
 572          CMO.scaleopt =1;
 573  *        tau.scale(n,e,l,s,ss)=1e4;
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\demand_calib.gms
 575   
 576  parameter EL_demgro(r)  projected percentage growth in electricity demand from 2015 to 2020 by region
 577  /
 578  WOA      1.183
 579  EOA      1.368
 580  SOA      1.329
 581  COA      1.217
 582  /
 583  ;
 584   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\solar.gms
 586  *Solar DNI curves.
 587  *Saudi Arabia obtained from NREL/KACST. The cities used for each region
 588  *are: West-Jeddah, South-Abha,Central-Solar Village,East-AlQusaimah. The values
 589  *represent average DNI levels for each segment over the seasonal period for each
 590  *region. The data from the year 2002 are used.
 591  *KWT = 'east' until data can be obtained
 592  Table ELsolcurve(l,seasons,r) regional and seasonal solar DNI profiles in W per sq. m
 593                   WOA         SOA        COA         EOA
 594  L1.summer        0.00        0.00       0.00        0.00
 595  L2.summer        110.09      259.83     308.17      301.34
 596  L3.summer        295.82      530.41     701.85      682.11
 597  L4.summer        364.87      436.38     759.63      741.60
 598  L5.summer        286.14      249.75     537.49      556.56
 599  L6.summer        107.01      83.94      171.54      195.74
 600  L7.summer        0.00        0.00       0.00        0.00
 601  L8.summer        0.00        0.00       0.00        0.00
 602   
 603  L1.winter        0.00        0.00       0.00        0.00
 604  L2.winter        118.65      240.74     208.64      147.02
 605  L3.winter        366.36      580.38     544.80      370.83
 606  L4.winter        501.84      646.97     658.06      426.94
 607  L5.winter        385.92      447.85     421.11      253.03
 608  L6.winter        131.80      140.52     99.21       49.90
 609  L7.winter        0.00        0.00       0.00        0.00
 610  L8.winter        0.00        0.00       0.00        0.00
 611   
 612  L1.spring-fall    0.00        0.00       0.00        0.00
 613  L2.spring-fall    133.59      321.61     268.68      185.34
 614  L3.spring-fall    366.00      717.74     631.74      453.89
 615  L4.spring-fall    446.01      725.93     683.32      500.01
 616  L5.spring-fall    326.06      464.02     401.39      292.48
 617  L6.spring-fall    112.45      134.21     81.12       61.02
 618  L7.spring-fall    0.00        0.00       0.00        0.00
 619  L8.spring-fall    0.00        0.00       0.00        0.00
 620  ;
 621  *We let the hourly operation of solar without storage to be proportional to the DNI.
 622  *In actuality, the output from solar plants is equal to some efficiency times the
 623  *irradiance (heat input). For thermal plants, it's the first law thermal efficiency.
 624  *While CSP plants only utilize direct irradiation (DI), the DI is linearly
 625  *proportional to the DNI. From this, we set the solar plant electricity output equal to its
 626  *peak nominal output (i.e. the plant's output capacity) multiplied by the solar irradiance
 627  *normalized by the maximum irradiance value throughout the year.
 628  Parameter ELsolcurvenorm(l,seasons,r) normalized DNI profiles from ELsolcurve;
 629  Elsolcurvenorm(l,e,r)=ELsolcurve(l,e,r)/smax((ll,ee),ELsolcurve(ll,ee,r));
 630   
 631   
 632  parameter solar_cap(r) regional solar capcitity installation in GW
 633  /
 634  COA      3
 635  EOA      2
 636  SOA      5
 637  WOA      1
 638  /
 639   
 640  ;
 641  scalar random, mean, stddev, CDF_lo , CDF_hi , diff, CDF_alpha,CDF_beta,Z_cdf,X_cdf;
 642  parameter CDF_x(ss) cumulative distribution functions for each scenario s;
 643   
 644           mean = 0.9;
 645           stddev =0.3;
 646           CDF_lo = 0;
 647           CDF_hi = 1;
 648           diff = CDF_hi -CDF_lo;
 649   
 650  CDF_alpha = cdfnorm(0,mean,stddev);
 651  CDF_beta =  cdfnorm(1,mean,stddev);
 652  Z_cdf=CDF_beta-CDF_alpha;
 653  loop(ss,
 654   
 655           X_cdf=CDF_lo+ord(ss)*diff/card(ss);
 656           CDF_x(s)= (cdfnorm(X_cdf,mean,stddev)-CDF_alpha)/Z_cdf;
 657           prob(s,ss) = (prob(s,ss)+(CDF_x(ss) - CDF_x(ss-1)))/2;
 658           X_cdf=X_cdf-(diff/(2*card(ss)))$(card(ss)>1);
 659           EL_Demand(r,e,l,s,ss)= EL_Demand(r,e,l,s,ss)-solar_cap(r)*Elsolcurvenorm(l,e,r)*X_cdf;
 660           display x_cdf;
 661  );
 662   
 663  display prob,EL_Demand,CDF_x,Elsolcurvenorm,solar_cap ;
 664   
 665   
 666  parameter elasticity(r) demand elasticity for eletricity ???;
 667   
 668  parameter  LRMC(r,e,l,s,ss) long run marginal cost in each load segment USD per MWH;
 669   
 670  * long run maringal cost. rescale capacity payment to USD/MW
 671  LRMC(r,e,l,s,ss) =
 672   
 673  smin(h,mc(h,r,s,ss)+(ic(h)+om(h))/sum((ll)$(EL_Demand(r,e,ll,s,ss)>=EL_Demand(r,e,l,s,ss)),d(e,ll)) )
 674  ;
 675   
 676  elasticity(r) = 0.3;
 677   
 678  * Energy Price calibration                                                     *
 679              a(r,e,l,s,ss) = LRMC(r,e,l,s,ss)*(1+1/elasticity(r));
 680              b(r,e,l,s,ss) = LRMC(r,e,l,s,ss)/EL_demand(r,e,l,s,ss)/elasticity(r) ;
 681   
 682   
 683  * Capacity Price calibration                                                   *
 684   
 685   
 686  * assume a flat inverse demand curve for capacity
 687  * price is set to the maximum fixed cost of all generators operating in the market
 688  * soread of the total number of demand hours
 689   
 690  theta(r,e,m) =  0
 691                   +smax(h,(ic(h)+om(h)))/sum((ee,l),d(ee,l))
 692  *                 sum((s),prob(s,ss)*d(e,m))    ;
 693  *                 sum((s,ll)$(EL_Demand(r,e,ll,s,ss)>=EL_Demand(r,e,m,s,ss)),prob(s,ss)*d(e,ll));
 694  ;
 695                   xi(r,e,m) =0;
 696   
 697   
 698   
               a(r,'l1',s,ss) = 1200 +uniform(0,100);
               a(r,'l2',s,ss) = 600 +uniform(0,50);
               a(r,'l3',s,ss) = 300 +uniform(0,10);
       
               b(r,'l1',s,ss) = 0.005 +uniform(0,0.0005);
               b(r,'l2',s,ss) = 0.01 +uniform(0,0.0005);
               b(r,'l3',s,ss) = 0.01 +uniform(0,0.0005);
       
       
      theta(r,e,'l1') = 5000 +uniform(0,200);
      theta(r,e,'l2') = 3000 +uniform(0,100);
      theta(r,e,'l3') = 2000 +uniform(0,50);
       
      xi(r,e,'l1') = 0.00001 ;
      xi(r,e,'l2') = 0.00002 ;
      xi(r,e,'l3') = 0.00003 ;
 717   
 718   
 719   
 720  *Option Savepoint=1;
 721  CMO.optfile = 1 ;
 722   
 723  *Execute_Loadpoint 'test.gdx';
 724   
 725  *trade.l(i,n,r,rr,e,l,s,ss)$(not r_trans(n,r,rr))=0;
 726  *arbitrage.l(n,r,rr,e,l,s,ss)$(not r_trans(n,r,rr))=0;
 727  *trans.lo(n,e,l,s,ss)=0;
 728  solve CMO using mcp;
 729   
 730   
 731  *$ontext
 732  Parameters
 733           profit(i)           profit per player
 734           roi(i)              return on investment
 735           cus(i)              capacity usage
 736           rop(i)              return on production
 737           roc(i)              return on capacity
 738   
 739   
 740           error_demand(r,e,l)
 741           reserve_capacity(r)
 742           ;
 743   
 744  *$ontext
 745           error_demand(r,e,l) =
 746           -sum((s,ss),prob(s,ss)*
 747             (EL_demand(r,e,l,s,ss)-
 748                   (sum((j),sales.l(j,r,e,l,s,ss))-sum((n,rr)$r_trade(n,r,rr),arbitrage.l(n,r,rr,e,l,s,ss))+sum((n,rr)$r_trade(n,rr,r),arbitrage.l(n,rr,r,e,l,s,ss)) )
 749             )
 750           )/sum((s,ss),EL_demand(r,e,l,s,ss));
 751   
 752           reserve_capacity(r) = sum((i,h),Cap_avail.l(i,h,r))/smax((e,l),sum((s,ss),EL_demand(r,e,l,s,ss)*prob(s,ss)))-1;
 753  ;
 754   
 755   
 756   
 757  profit(i)=sum((h,r,e,l,s,ss),prob(s,ss)*(price.l(r,e,l,s,ss)-mc(h,r,s,ss))*q.l(i,h,r,e,l,s,ss)*d(e,l))-sum((h,r),ici(h)*Cap_avail.l(i,h,r))-sum((h,r),icr(h)*ret.l(i,h,r))+sum((r,e,m,h),delta.l(r
      ,e,m)*beta(h,r,m)*Cap_avail.l(i,h,r));
 758   
 759   
 760   
 761   
 762  *********compute other indicators
 763   
 764  ***return on investment
 765  roi(i)=profit(i)/(sum((h,r),Cap_avail.l(i,h,r)*ici(h)));
 766   
 767  ****capacity usage
 768  cus(i)=sum((r,e,l,h,s,ss),prob(s,ss)*d(e,l)*q.l(i,h,r,e,l,s,ss))/sum((l,h,r,e,s,ss),prob(s,ss)*d(e,l)*Cap_avail.l(i,h,r));
 769   
 770  ****return on production
 771  rop(i)=profit(i)/sum((r,e,l,h,s,ss),prob(s,ss)*d(e,l)*q.l(i,h,r,e,l,s,ss));
 772   
 773  ****return on capacity
 774  roc(i)=profit(i)/(sum((r,e,l,h),d(e,l)*Cap_avail.l(i,h,r)));
 775   
 776   
 777  display q.l, price.l, delta.l,inv.l, Cap_avail.l, ret.l,kind0,profit;
 778   
 779   
 780  display roi,cus,rop,roc;
 781   
 782  display lambda_high.l,eta_high.l;
 783   
 784   
 785   
 786  file results /C:Users\c-olivef\AXEL Investment Gams\RESULTS.txt/;
 787   
 788  put results;
 789  put 'Investment model: the value of perfect rationality'//
 790      'Marginal Costs per generator'//;
 791   
 792  loop((h,r,s,ss),put h.tl,@12,s.tl,@24,mc(h,r,s,ss):6:1//);
 793   
 794  put 'Investment Costs per generator'//;
 795   
 796  loop(h,put h.tl,@12,ic(h):6:1//);
 797   
 798   
 799  put 'Investment per generator'//;
 800   
 801  loop((i,h,r),put i.tl,@12,h.tl,@24,inv.l(i,h,r):6:1//);
 802   
 803   
 804  put 'Generation per generator'//;
 805   
 806  loop((i,h,r,e,l,s,ss),put i.tl,@12,h.tl,@24,l.tl,@32,s.tl,@44,q.l(i,h,r,e,l,s,ss):6:1//);
 807   
 808   
 809  put 'Equilibrium Prices '//;
 810   
 811  loop((r,e,l,s,ss),put s.tl,@12,l.tl,@24,price(r,e,l,s,ss)//);
 812   
 813  put 'Total Profit per generator'//;
 814   
 815  loop(i,put i.tl,@12,profit(i):8:2//);
 816   
 817  put 'Generator, Return on Investment, Capacity usage, Return on production, Return on Capacity'//;
 818   
 819  loop(i,put i.tl,@12,roi(i),@30,cus(i),@50,rop(i),@70,roc(i):10:2//);
 820   
 821   
 822  *$offtext

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME psi OF TYPE VAR  
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/19/16 16:51:27 Page 2
Dynamic Programming Investment
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\run_model.gms
     2        7 INCLUDE        1       7  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Macros.gms
     3       45 FUNCLIBIN      1       9  stodclib
     4       50 INCLUDE        1      14  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\SetsAndVariables.gms
     5      108 INCLUDE        1      16  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Demand.gms
     6      119 GDXIN          5      11  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\db\load.gdx
     7      250 INCLUDE        1      17  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\parameters.gms
     8      424 INCLUDE        1      19  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\equations.gms
     9      574 INCLUDE        1      20  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\demand_calib.gms
    10      585 INCLUDE        9      11  ..D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\solar.gms


COMPILATION TIME     =        0.031 SECONDS      5 MB  24.1.3 r41464 WEX-WEI
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/19/16 16:51:27 Page 3
Dynamic Programming Investment
E x e c u t i o n


----    243 PARAMETER X_cdf                =        0.667  

----    243 PARAMETER X_cdf                =        1.000  

----    243 PARAMETER X_cdf                =        1.333  

----    246 PARAMETER prob  probability off each scenario

            s1          s2          s3

s1       0.199       0.199       0.199
s2       0.603       0.603       0.603
s3       0.199       0.199       0.199


----    246 PARAMETER EL_demand  Stochastic Electricity Demand for scenarios s in GW

INDEX 1 = COA  INDEX 2 = winter

               s1          s2          s3

l1.s1       4.821       4.821       4.821
l1.s2       7.231       7.231       7.231
l1.s3       9.642       9.642       9.642
l2.s1       4.568       4.568       4.568
l2.s2       6.852       6.852       6.852
l2.s3       9.136       9.136       9.136
l3.s1       4.906       4.906       4.906
l3.s2       7.359       7.359       7.359
l3.s3       9.812       9.812       9.812
l4.s1       5.242       5.242       5.242
l4.s2       7.862       7.862       7.862
l4.s3      10.483      10.483      10.483
l5.s1       5.368       5.368       5.368
l5.s2       8.052       8.052       8.052
l5.s3      10.737      10.737      10.737
l6.s1       5.857       5.857       5.857
l6.s2       8.786       8.786       8.786
l6.s3      11.714      11.714      11.714
l7.s1       6.058       6.058       6.058
l7.s2       9.087       9.087       9.087
l7.s3      12.116      12.116      12.116
l8.s1       5.740       5.740       5.740
l8.s2       8.610       8.610       8.610
l8.s3      11.480      11.480      11.480

INDEX 1 = COA  INDEX 2 = summer

               s1          s2          s3

l1.s1       9.963       9.963       9.963
l1.s2      14.944      14.944      14.944
l1.s3      19.925      19.925      19.925
l2.s1       9.279       9.279       9.279
l2.s2      13.918      13.918      13.918
l2.s3      18.557      18.557      18.557
l3.s1       9.978       9.978       9.978
l3.s2      14.967      14.967      14.967
l3.s3      19.956      19.956      19.956
l4.s1      10.793      10.793      10.793
l4.s2      16.190      16.190      16.190
l4.s3      21.586      21.586      21.586
l5.s1      11.287      11.287      11.287
l5.s2      16.930      16.930      16.930
l5.s3      22.574      22.574      22.574
l6.s1      10.967      10.967      10.967
l6.s2      16.450      16.450      16.450
l6.s3      21.933      21.933      21.933
l7.s1      10.818      10.818      10.818
l7.s2      16.227      16.227      16.227
l7.s3      21.636      21.636      21.636
l8.s1      10.441      10.441      10.441
l8.s2      15.662      15.662      15.662
l8.s3      20.883      20.883      20.883

INDEX 1 = COA  INDEX 2 = spring-fall

               s1          s2          s3

l1.s1       7.271       7.271       7.271
l1.s2      10.907      10.907      10.907
l1.s3      14.543      14.543      14.543
l2.s1       6.530       6.530       6.530
l2.s2       9.795       9.795       9.795
l2.s3      13.061      13.061      13.061
l3.s1       7.039       7.039       7.039
l3.s2      10.559      10.559      10.559
l3.s3      14.079      14.079      14.079
l4.s1       7.624       7.624       7.624
l4.s2      11.435      11.435      11.435
l4.s3      15.247      15.247      15.247
l5.s1       8.103       8.103       8.103
l5.s2      12.155      12.155      12.155
l5.s3      16.207      16.207      16.207
l6.s1       7.980       7.980       7.980
l6.s2      11.970      11.970      11.970
l6.s3      15.961      15.961      15.961
l7.s1       8.186       8.186       8.186
l7.s2      12.278      12.278      12.278
l7.s3      16.371      16.371      16.371
l8.s1       7.846       7.846       7.846
l8.s2      11.769      11.769      11.769
l8.s3      15.692      15.692      15.692

INDEX 1 = EOA  INDEX 2 = winter

               s1          s2          s3

l1.s1       7.083       7.083       7.083
l1.s2      10.625      10.625      10.625
l1.s3      14.166      14.166      14.166
l2.s1       6.940       6.940       6.940
l2.s2      10.410      10.410      10.410
l2.s3      13.879      13.879      13.879
l3.s1       7.059       7.059       7.059
l3.s2      10.589      10.589      10.589
l3.s3      14.119      14.119      14.119
l4.s1       7.274       7.274       7.274
l4.s2      10.910      10.910      10.910
l4.s3      14.547      14.547      14.547
l5.s1       7.345       7.345       7.345
l5.s2      11.018      11.018      11.018
l5.s3      14.691      14.691      14.691
l6.s1       7.677       7.677       7.677
l6.s2      11.515      11.515      11.515
l6.s3      15.353      15.353      15.353
l7.s1       7.707       7.707       7.707
l7.s2      11.561      11.561      11.561
l7.s3      15.415      15.415      15.415
l8.s1       7.537       7.537       7.537
l8.s2      11.305      11.305      11.305
l8.s3      15.073      15.073      15.073

INDEX 1 = EOA  INDEX 2 = summer

               s1          s2          s3

l1.s1      10.333      10.333      10.333
l1.s2      15.500      15.500      15.500
l1.s3      20.666      20.666      20.666
l2.s1       9.837       9.837       9.837
l2.s2      14.755      14.755      14.755
l2.s3      19.673      19.673      19.673
l3.s1      10.331      10.331      10.331
l3.s2      15.496      15.496      15.496
l3.s3      20.662      20.662      20.662
l4.s1      10.830      10.830      10.830
l4.s2      16.245      16.245      16.245
l4.s3      21.660      21.660      21.660
l5.s1      11.015      11.015      11.015
l5.s2      16.523      16.523      16.523
l5.s3      22.031      22.031      22.031
l6.s1      10.818      10.818      10.818
l6.s2      16.227      16.227      16.227
l6.s3      21.635      21.635      21.635
l7.s1      10.842      10.842      10.842
l7.s2      16.263      16.263      16.263
l7.s3      21.684      21.684      21.684
l8.s1      10.612      10.612      10.612
l8.s2      15.918      15.918      15.918
l8.s3      21.224      21.224      21.224

INDEX 1 = EOA  INDEX 2 = spring-fall

               s1          s2          s3

l1.s1       8.916       8.916       8.916
l1.s2      13.374      13.374      13.374
l1.s3      17.832      17.832      17.832
l2.s1       8.473       8.473       8.473
l2.s2      12.710      12.710      12.710
l2.s3      16.947      16.947      16.947
l3.s1       8.767       8.767       8.767
l3.s2      13.151      13.151      13.151
l3.s3      17.535      17.535      17.535
l4.s1       9.169       9.169       9.169
l4.s2      13.753      13.753      13.753
l4.s3      18.337      18.337      18.337
l5.s1       9.328       9.328       9.328
l5.s2      13.992      13.992      13.992
l5.s3      18.656      18.656      18.656
l6.s1       9.295       9.295       9.295
l6.s2      13.942      13.942      13.942
l6.s3      18.590      18.590      18.590
l7.s1       9.410       9.410       9.410
l7.s2      14.114      14.114      14.114
l7.s3      18.819      18.819      18.819
l8.s1       9.266       9.266       9.266
l8.s2      13.899      13.899      13.899
l8.s3      18.531      18.531      18.531

INDEX 1 = SOA  INDEX 2 = winter

               s1          s2          s3

l1.s1       2.052       2.052       2.052
l1.s2       3.078       3.078       3.078
l1.s3       4.104       4.104       4.104
l2.s1       1.828       1.828       1.828
l2.s2       2.742       2.742       2.742
l2.s3       3.655       3.655       3.655
l3.s1       1.782       1.782       1.782
l3.s2       2.673       2.673       2.673
l3.s3       3.563       3.563       3.563
l4.s1       1.977       1.977       1.977
l4.s2       2.966       2.966       2.966
l4.s3       3.954       3.954       3.954
l5.s1       2.040       2.040       2.040
l5.s2       3.060       3.060       3.060
l5.s3       4.080       4.080       4.080
l6.s1       2.070       2.070       2.070
l6.s2       3.106       3.106       3.106
l6.s3       4.141       4.141       4.141
l7.s1       2.329       2.329       2.329
l7.s2       3.494       3.494       3.494
l7.s3       4.659       4.659       4.659
l8.s1       2.297       2.297       2.297
l8.s2       3.445       3.445       3.445
l8.s3       4.594       4.594       4.594

INDEX 1 = SOA  INDEX 2 = summer

               s1          s2          s3

l1.s1       2.813       2.813       2.813
l1.s2       4.220       4.220       4.220
l1.s3       5.627       5.627       5.627
l2.s1       2.551       2.551       2.551
l2.s2       3.827       3.827       3.827
l2.s3       5.102       5.102       5.102
l3.s1       2.634       2.634       2.634
l3.s2       3.951       3.951       3.951
l3.s3       5.268       5.268       5.268
l4.s1       2.908       2.908       2.908
l4.s2       4.361       4.361       4.361
l4.s3       5.815       5.815       5.815
l5.s1       2.944       2.944       2.944
l5.s2       4.416       4.416       4.416
l5.s3       5.888       5.888       5.888
l6.s1       2.716       2.716       2.716
l6.s2       4.074       4.074       4.074
l6.s3       5.432       5.432       5.432
l7.s1       2.936       2.936       2.936
l7.s2       4.405       4.405       4.405
l7.s3       5.873       5.873       5.873
l8.s1       2.974       2.974       2.974
l8.s2       4.461       4.461       4.461
l8.s3       5.948       5.948       5.948

INDEX 1 = SOA  INDEX 2 = spring-fall

               s1          s2          s3

l1.s1       2.503       2.503       2.503
l1.s2       3.754       3.754       3.754
l1.s3       5.005       5.005       5.005
l2.s1       2.197       2.197       2.197
l2.s2       3.295       3.295       3.295
l2.s3       4.393       4.393       4.393
l3.s1       2.257       2.257       2.257
l3.s2       3.385       3.385       3.385
l3.s3       4.514       4.514       4.514
l4.s1       2.536       2.536       2.536
l4.s2       3.804       3.804       3.804
l4.s3       5.072       5.072       5.072
l5.s1       2.622       2.622       2.622
l5.s2       3.932       3.932       3.932
l5.s3       5.243       5.243       5.243
l6.s1       2.407       2.407       2.407
l6.s2       3.610       3.610       3.610
l6.s3       4.814       4.814       4.814
l7.s1       2.725       2.725       2.725
l7.s2       4.088       4.088       4.088
l7.s3       5.450       5.450       5.450
l8.s1       2.706       2.706       2.706
l8.s2       4.060       4.060       4.060
l8.s3       5.413       5.413       5.413

INDEX 1 = WOA  INDEX 2 = winter

               s1          s2          s3

l1.s1       5.019       5.019       5.019
l1.s2       7.529       7.529       7.529
l1.s3      10.039      10.039      10.039
l2.s1       4.478       4.478       4.478
l2.s2       6.717       6.717       6.717
l2.s3       8.956       8.956       8.956
l3.s1       4.612       4.612       4.612
l3.s2       6.918       6.918       6.918
l3.s3       9.224       9.224       9.224
l4.s1       5.106       5.106       5.106
l4.s2       7.660       7.660       7.660
l4.s3      10.213      10.213      10.213
l5.s1       5.283       5.283       5.283
l5.s2       7.924       7.924       7.924
l5.s3      10.566      10.566      10.566
l6.s1       5.322       5.322       5.322
l6.s2       7.984       7.984       7.984
l6.s3      10.645      10.645      10.645
l7.s1       5.591       5.591       5.591
l7.s2       8.387       8.387       8.387
l7.s3      11.182      11.182      11.182
l8.s1       5.492       5.492       5.492
l8.s2       8.238       8.238       8.238
l8.s3      10.985      10.985      10.985

INDEX 1 = WOA  INDEX 2 = summer

               s1          s2          s3

l1.s1       8.564       8.564       8.564
l1.s2      12.846      12.846      12.846
l1.s3      17.128      17.128      17.128
l2.s1       8.074       8.074       8.074
l2.s2      12.112      12.112      12.112
l2.s3      16.149      16.149      16.149
l3.s1       8.498       8.498       8.498
l3.s2      12.748      12.748      12.748
l3.s3      16.997      16.997      16.997
l4.s1       9.179       9.179       9.179
l4.s2      13.768      13.768      13.768
l4.s3      18.358      18.358      18.358
l5.s1       9.454       9.454       9.454
l5.s2      14.181      14.181      14.181
l5.s3      18.908      18.908      18.908
l6.s1       8.978       8.978       8.978
l6.s2      13.468      13.468      13.468
l6.s3      17.957      17.957      17.957
l7.s1       8.784       8.784       8.784
l7.s2      13.176      13.176      13.176
l7.s3      17.568      17.568      17.568
l8.s1       8.785       8.785       8.785
l8.s2      13.177      13.177      13.177
l8.s3      17.569      17.569      17.569

INDEX 1 = WOA  INDEX 2 = spring-fall

               s1          s2          s3

l1.s1       7.516       7.516       7.516
l1.s2      11.273      11.273      11.273
l1.s3      15.031      15.031      15.031
l2.s1       6.750       6.750       6.750
l2.s2      10.126      10.126      10.126
l2.s3      13.501      13.501      13.501
l3.s1       7.029       7.029       7.029
l3.s2      10.544      10.544      10.544
l3.s3      14.059      14.059      14.059
l4.s1       7.716       7.716       7.716
l4.s2      11.573      11.573      11.573
l4.s3      15.431      15.431      15.431
l5.s1       8.084       8.084       8.084
l5.s2      12.126      12.126      12.126
l5.s3      16.168      16.168      16.168
l6.s1       7.674       7.674       7.674
l6.s2      11.511      11.511      11.511
l6.s3      15.347      15.347      15.347
l7.s1       7.839       7.839       7.839
l7.s2      11.759      11.759      11.759
l7.s3      15.679      15.679      15.679
l8.s1       7.792       7.792       7.792
l8.s2      11.689      11.689      11.689
l8.s3      15.585      15.585      15.585


----    246 PARAMETER CDF_x  cumulative distribution functions for each scenario s

s1 0.199,    s2 0.801,    s3 1.000


----    660 PARAMETER X_cdf                =        0.167  

----    660 PARAMETER X_cdf                =        0.500  

----    660 PARAMETER X_cdf                =        0.833  

----    663 PARAMETER prob  probability off each scenario

            s1          s2          s3

s1       0.122       0.099       0.099
s2       0.324       0.301       0.301
s3       0.122       0.099       0.099


----    663 PARAMETER EL_demand  Stochastic Electricity Demand for scenarios s in GW

INDEX 1 = COA  INDEX 2 = winter

               s1          s2          s3

l1.s1       4.821       4.821       4.821
l1.s2       7.231       7.231       7.231
l1.s3       9.642       9.642       9.642
l2.s1       4.431       4.156       3.881
l2.s2       6.714       6.440       6.165
l2.s3       8.998       8.724       8.449
l3.s1       4.547       3.830       3.113
l3.s2       7.000       6.283       5.566
l3.s3       9.453       8.736       8.019
l4.s1       4.808       3.942       3.076
l4.s2       7.429       6.563       5.697
l4.s3      10.050       9.184       8.317
l5.s1       5.091       4.537       3.982
l5.s2       7.775       7.221       6.667
l5.s3      10.459       9.905       9.351
l6.s1       5.792       5.661       5.531
l6.s2       8.720       8.590       8.459
l6.s3      11.649      11.518      11.388
l7.s1       6.058       6.058       6.058
l7.s2       9.087       9.087       9.087
l7.s3      12.116      12.116      12.116
l8.s1       5.740       5.740       5.740
l8.s2       8.610       8.610       8.610
l8.s3      11.480      11.480      11.480

INDEX 1 = COA  INDEX 2 = summer

               s1          s2          s3

l1.s1       9.963       9.963       9.963
l1.s2      14.944      14.944      14.944
l1.s3      19.925      19.925      19.925
l2.s1       9.076       8.670       8.265
l2.s2      13.715      13.310      12.904
l2.s3      18.355      17.949      17.543
l3.s1       9.516       8.592       7.668
l3.s2      14.505      13.581      12.657
l3.s3      19.494      18.570      17.646
l4.s1      10.293       9.293       8.293
l4.s2      15.690      14.690      13.690
l4.s3      21.086      20.086      19.086
l5.s1      10.933      10.226       9.518
l5.s2      16.577      15.869      15.161
l5.s3      22.220      21.512      20.805
l6.s1      10.854      10.628      10.402
l6.s2      16.337      16.111      15.885
l6.s3      21.820      21.595      21.369
l7.s1      10.818      10.818      10.818
l7.s2      16.227      16.227      16.227
l7.s3      21.636      21.636      21.636
l8.s1      10.441      10.441      10.441
l8.s2      15.662      15.662      15.662
l8.s3      20.883      20.883      20.883

INDEX 1 = COA  INDEX 2 = spring-fall

               s1          s2          s3

l1.s1       7.271       7.271       7.271
l1.s2      10.907      10.907      10.907
l1.s3      14.543      14.543      14.543
l2.s1       6.353       6.000       5.646
l2.s2       9.619       9.265       8.911
l2.s3      12.884      12.530      12.176
l3.s1       6.624       5.792       4.960
l3.s2      10.143       9.312       8.480
l3.s3      13.663      12.831      12.000
l4.s1       7.174       6.274       5.375
l4.s2      10.986      10.086       9.187
l4.s3      14.797      13.898      12.998
l5.s1       7.839       7.311       6.782
l5.s2      11.891      11.362      10.834
l5.s3      15.942      15.414      14.886
l6.s1       7.927       7.820       7.713
l6.s2      11.917      11.810      11.703
l6.s3      15.907      15.800      15.694
l7.s1       8.186       8.186       8.186
l7.s2      12.278      12.278      12.278
l7.s3      16.371      16.371      16.371
l8.s1       7.846       7.846       7.846
l8.s2      11.769      11.769      11.769
l8.s3      15.692      15.692      15.692

INDEX 1 = EOA  INDEX 2 = winter

               s1          s2          s3

l1.s1       7.083       7.083       7.083
l1.s2      10.625      10.625      10.625
l1.s3      14.166      14.166      14.166
l2.s1       6.874       6.741       6.609
l2.s2      10.343      10.211      10.079
l2.s3      13.813      13.681      13.549
l3.s1       6.893       6.559       6.226
l3.s2      10.422      10.089       9.756
l3.s3      13.952      13.619      13.285
l4.s1       7.082       6.698       6.314
l4.s2      10.718      10.335       9.951
l4.s3      14.355      13.971      13.588
l5.s1       7.232       7.004       6.777
l5.s2      10.904      10.677      10.450
l5.s3      14.577      14.350      14.122
l6.s1       7.654       7.609       7.564
l6.s2      11.493      11.448      11.403
l6.s3      15.331      15.286      15.241
l7.s1       7.707       7.707       7.707
l7.s2      11.561      11.561      11.561
l7.s3      15.415      15.415      15.415
l8.s1       7.537       7.537       7.537
l8.s2      11.305      11.305      11.305
l8.s3      15.073      15.073      15.073

INDEX 1 = EOA  INDEX 2 = summer

               s1          s2          s3

l1.s1      10.333      10.333      10.333
l1.s2      15.500      15.500      15.500
l1.s3      20.666      20.666      20.666
l2.s1       9.701       9.430       9.159
l2.s2      14.620      14.349      14.078
l2.s3      19.538      19.267      18.996
l3.s1      10.024       9.411       8.798
l3.s2      15.190      14.577      13.964
l3.s3      20.355      19.742      19.129
l4.s1      10.497       9.830       9.164
l4.s2      15.912      15.245      14.579
l4.s3      21.327      20.660      19.994
l5.s1      10.765      10.265       9.765
l5.s2      16.273      15.773      15.272
l5.s3      21.781      21.280      20.780
l6.s1      10.730      10.554      10.378
l6.s2      16.139      15.963      15.787
l6.s3      21.547      21.371      21.196
l7.s1      10.842      10.842      10.842
l7.s2      16.263      16.263      16.263
l7.s3      21.684      21.684      21.684
l8.s1      10.612      10.612      10.612
l8.s2      15.918      15.918      15.918
l8.s3      21.224      21.224      21.224

INDEX 1 = EOA  INDEX 2 = spring-fall

               s1          s2          s3

l1.s1       8.916       8.916       8.916
l1.s2      13.374      13.374      13.374
l1.s3      17.832      17.832      17.832
l2.s1       8.390       8.223       8.057
l2.s2      12.627      12.460      12.293
l2.s3      16.863      16.697      16.530
l3.s1       8.563       8.155       7.747
l3.s2      12.947      12.539      12.131
l3.s3      17.331      16.923      16.515
l4.s1       8.944       8.494       8.045
l4.s2      13.528      13.079      12.629
l4.s3      18.113      17.663      17.214
l5.s1       9.196       8.933       8.671
l5.s2      13.860      13.597      13.334
l5.s3      18.524      18.261      17.998
l6.s1       9.268       9.213       9.158
l6.s2      13.915      13.860      13.805
l6.s3      18.562      18.508      18.453
l7.s1       9.410       9.410       9.410
l7.s2      14.114      14.114      14.114
l7.s3      18.819      18.819      18.819
l8.s1       9.266       9.266       9.266
l8.s2      13.899      13.899      13.899
l8.s3      18.531      18.531      18.531

INDEX 1 = SOA  INDEX 2 = winter

               s1          s2          s3

l1.s1       2.052       2.052       2.052
l1.s2       3.078       3.078       3.078
l1.s3       4.104       4.104       4.104
l2.s1       1.551       0.999       0.446
l2.s2       2.465       1.913       1.360
l2.s3       3.379       2.826       2.274
l3.s1       1.115      -0.217      -1.550
l3.s2       2.006       0.674      -0.659
l3.s3       2.897       1.565       0.232
l4.s1       1.234      -0.251      -1.736
l4.s2       2.223       0.738      -0.748
l4.s3       3.212       1.726       0.241
l5.s1       1.526       0.498      -0.531
l5.s2       2.546       1.518       0.489
l5.s3       3.566       2.538       1.509
l6.s1       1.909       1.586       1.264
l6.s2       2.944       2.622       2.299
l6.s3       3.979       3.657       3.334
l7.s1       2.329       2.329       2.329
l7.s2       3.494       3.494       3.494
l7.s3       4.659       4.659       4.659
l8.s1       2.297       2.297       2.297
l8.s2       3.445       3.445       3.445
l8.s3       4.594       4.594       4.594

INDEX 1 = SOA  INDEX 2 = summer

               s1          s2          s3

l1.s1       2.813       2.813       2.813
l1.s2       4.220       4.220       4.220
l1.s3       5.627       5.627       5.627
l2.s1       2.253       1.656       1.060
l2.s2       3.528       2.932       2.335
l2.s3       4.804       4.207       3.611
l3.s1       2.025       0.807      -0.410
l3.s2       3.342       2.124       0.907
l3.s3       4.659       3.441       2.224
l4.s1       2.407       1.405       0.403
l4.s2       3.860       2.858       1.857
l4.s3       5.314       4.312       3.310
l5.s1       2.657       2.084       1.510
l5.s2       4.129       3.556       2.982
l5.s3       5.601       5.028       4.454
l6.s1       2.620       2.427       2.234
l6.s2       3.978       3.785       3.592
l6.s3       5.336       5.143       4.950
l7.s1       2.936       2.936       2.936
l7.s2       4.405       4.405       4.405
l7.s3       5.873       5.873       5.873
l8.s1       2.974       2.974       2.974
l8.s2       4.461       4.461       4.461
l8.s3       5.948       5.948       5.948

INDEX 1 = SOA  INDEX 2 = spring-fall

               s1          s2          s3

l1.s1       2.503       2.503       2.503
l1.s2       3.754       3.754       3.754
l1.s3       5.005       5.005       5.005
l2.s1       1.827       1.089       0.351
l2.s2       2.926       2.187       1.449
l2.s3       4.024       3.286       2.547
l3.s1       1.433      -0.215      -1.863
l3.s2       2.561       0.914      -0.734
l3.s3       3.690       2.042       0.394
l4.s1       1.703       0.036      -1.630
l4.s2       2.971       1.304      -0.362
l4.s3       4.239       2.572       0.906
l5.s1       2.089       1.024      -0.042
l5.s2       3.400       2.334       1.269
l5.s3       4.711       3.645       2.580
l6.s1       2.253       1.945       1.636
l6.s2       3.456       3.148       2.840
l6.s3       4.660       4.351       4.043
l7.s1       2.725       2.725       2.725
l7.s2       4.088       4.088       4.088
l7.s3       5.450       5.450       5.450
l8.s1       2.706       2.706       2.706
l8.s2       4.060       4.060       4.060
l8.s3       5.413       5.413       5.413

INDEX 1 = WOA  INDEX 2 = winter

               s1          s2          s3

l1.s1       5.019       5.019       5.019
l1.s2       7.529       7.529       7.529
l1.s3      10.039      10.039      10.039
l2.s1       4.439       4.360       4.281
l2.s2       6.678       6.599       6.520
l2.s3       8.917       8.838       8.759
l3.s1       4.490       4.247       4.003
l3.s2       6.796       6.553       6.309
l3.s3       9.102       8.859       8.615
l4.s1       4.940       4.606       4.273
l4.s2       7.493       7.160       6.826
l4.s3      10.046       9.713       9.380
l5.s1       5.155       4.898       4.642
l5.s2       7.796       7.540       7.283
l5.s3      10.437      10.181       9.925
l6.s1       5.279       5.191       5.104
l6.s2       7.940       7.852       7.765
l6.s3      10.601      10.513      10.426
l7.s1       5.591       5.591       5.591
l7.s2       8.387       8.387       8.387
l7.s3      11.182      11.182      11.182
l8.s1       5.492       5.492       5.492
l8.s2       8.238       8.238       8.238
l8.s3      10.985      10.985      10.985

INDEX 1 = WOA  INDEX 2 = summer

               s1          s2          s3

l1.s1       8.564       8.564       8.564
l1.s2      12.846      12.846      12.846
l1.s3      17.128      17.128      17.128
l2.s1       8.038       7.965       7.892
l2.s2      12.075      12.002      11.929
l2.s3      16.112      16.039      15.966
l3.s1       8.400       8.204       8.007
l3.s2      12.649      12.453      12.256
l3.s3      16.898      16.702      16.505
l4.s1       9.058       8.815       8.573
l4.s2      13.647      13.405      13.162
l4.s3      18.236      17.994      17.752
l5.s1       9.359       9.169       8.979
l5.s2      14.086      13.896      13.706
l5.s3      18.813      18.623      18.433
l6.s1       8.943       8.872       8.801
l6.s2      13.432      13.361      13.290
l6.s3      17.921      17.850      17.779
l7.s1       8.784       8.784       8.784
l7.s2      13.176      13.176      13.176
l7.s3      17.568      17.568      17.568
l8.s1       8.785       8.785       8.785
l8.s2      13.177      13.177      13.177
l8.s3      17.569      17.569      17.569

INDEX 1 = WOA  INDEX 2 = spring-fall

               s1          s2          s3

l1.s1       7.516       7.516       7.516
l1.s2      11.273      11.273      11.273
l1.s3      15.031      15.031      15.031
l2.s1       6.706       6.617       6.529
l2.s2      10.081       9.993       9.904
l2.s3      13.457      13.368      13.279
l3.s1       6.908       6.665       6.422
l3.s2      10.423      10.180       9.936
l3.s3      13.937      13.694      13.451
l4.s1       7.567       7.271       6.975
l4.s2      11.425      11.129      10.833
l4.s3      15.283      14.987      14.690
l5.s1       7.976       7.759       7.543
l5.s2      12.018      11.801      11.585
l5.s3      16.060      15.843      15.627
l6.s1       7.636       7.562       7.487
l6.s2      11.473      11.398      11.324
l6.s3      15.310      15.235      15.161
l7.s1       7.839       7.839       7.839
l7.s2      11.759      11.759      11.759
l7.s3      15.679      15.679      15.679
l8.s1       7.792       7.792       7.792
l8.s2      11.689      11.689      11.689
l8.s3      15.585      15.585      15.585


----    663 PARAMETER CDF_x  cumulative distribution functions for each scenario s

s1 1.000,    s2 1.000,    s3 1.000


----    663 PARAMETER ELsolcurvenorm  normalized DNI profiles from ELsolcurve

                       COA         EOA         SOA         WOA

l2.winter            0.275       0.198       0.332       0.236
l2.summer            0.406       0.406       0.358       0.219
l2.spring-fall       0.354       0.250       0.443       0.266
l3.winter            0.717       0.500       0.799       0.730
l3.summer            0.924       0.920       0.731       0.589
l3.spring-fall       0.832       0.612       0.989       0.729
l4.winter            0.866       0.576       0.891       1.000
l4.summer            1.000       1.000       0.601       0.727
l4.spring-fall       0.900       0.674       1.000       0.889
l5.winter            0.554       0.341       0.617       0.769
l5.summer            0.708       0.750       0.344       0.570
l5.spring-fall       0.528       0.394       0.639       0.650
l6.winter            0.131       0.067       0.194       0.263
l6.summer            0.226       0.264       0.116       0.213
l6.spring-fall       0.107       0.082       0.185       0.224


----    663 PARAMETER solar_cap  regional solar capcitity installation in GW

COA 3.000,    EOA 2.000,    SOA 5.000,    WOA 1.000

GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/19/16 16:51:27 Page 4
Dynamic Programming Investment
Equation Listing    SOLVE CMO Using MCP From line 728


---- Eq1  =E=  Equation (1)

Eq1(COA,winter,l1,s1,s1)..  58.7063617509738*sales(fringe,COA,winter,l1,s1,s1) + 58.7063617509738*sales(g1,COA,winter,l1,s1,s1) + 58.7063617509738*sales(g2,COA,winter,l1,s1,s1)
     
      + 58.7063617509738*sales(g3,COA,winter,l1,s1,s1) + 58.7063617509738*sales(g4,COA,winter,l1,s1,s1) + price(COA,winter,l1,s1,s1) - 58.7063617509738*arbitrage(East,COA,EOA,winter,l1,s1,s1)
     
      + 58.7063617509738*arbitrage(East,EOA,COA,winter,l1,s1,s1) - 58.7063617509738*arbitrage(west,COA,WOA,winter,l1,s1,s1) + 58.7063617509738*arbitrage(west,WOA,COA,winter,l1,s1,s1) =E= 
     367.920997607992 ; (LHS = 0, INFES = 367.920997607992 ****)
     
Eq1(COA,winter,l1,s1,s2)..  72.0424574787812*sales(fringe,COA,winter,l1,s1,s2) + 72.0424574787812*sales(g1,COA,winter,l1,s1,s2) + 72.0424574787812*sales(g2,COA,winter,l1,s1,s2)
     
      + 72.0424574787812*sales(g3,COA,winter,l1,s1,s2) + 72.0424574787812*sales(g4,COA,winter,l1,s1,s2) + price(COA,winter,l1,s1,s2) - 72.0424574787812*arbitrage(East,COA,EOA,winter,l1,s1,s2)
     
      + 72.0424574787812*arbitrage(East,EOA,COA,winter,l1,s1,s2) - 72.0424574787812*arbitrage(west,COA,WOA,winter,l1,s1,s2) + 72.0424574787812*arbitrage(west,WOA,COA,winter,l1,s1,s2) =E= 
     451.500178773808 ; (LHS = 0, INFES = 451.500178773808 ****)
     
Eq1(COA,winter,l1,s1,s3)..  72.0424574787812*sales(fringe,COA,winter,l1,s1,s3) + 72.0424574787812*sales(g1,COA,winter,l1,s1,s3) + 72.0424574787812*sales(g2,COA,winter,l1,s1,s3)
     
      + 72.0424574787812*sales(g3,COA,winter,l1,s1,s3) + 72.0424574787812*sales(g4,COA,winter,l1,s1,s3) + price(COA,winter,l1,s1,s3) - 72.0424574787812*arbitrage(East,COA,EOA,winter,l1,s1,s3)
     
      + 72.0424574787812*arbitrage(East,EOA,COA,winter,l1,s1,s3) - 72.0424574787812*arbitrage(west,COA,WOA,winter,l1,s1,s3) + 72.0424574787812*arbitrage(west,WOA,COA,winter,l1,s1,s3) =E= 
     451.500178773808 ; (LHS = 0, INFES = 451.500178773808 ****)
     
REMAINING 861 ENTRIES SKIPPED


---- Eq2  =E=  Equation (1)

Eq2(COA,winter,l5)..  delta(COA,winter,l5) =E= 40.4789709383651 ; (LHS = 0, INFES = 40.4789709383651 ****)
     
Eq2(COA,winter,l6)..  delta(COA,winter,l6) =E= 40.4789709383651 ; (LHS = 0, INFES = 40.4789709383651 ****)
     
Eq2(COA,winter,l7)..  delta(COA,winter,l7) =E= 40.4789709383651 ; (LHS = 0, INFES = 40.4789709383651 ****)
     
REMAINING 33 ENTRIES SKIPPED


---- Eq9_1  =E=  Equation (8.1)

Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)..  - lambda_high(fringe,CCGT,COA,winter,l1,s1,s1) + lambda_low(fringe,CCGT,COA,winter,l1,s1,s1) + price(COA,winter,l1,s1,s1) =E= 8.860975 ;
     
      (LHS = 0, INFES = 8.860975 ****)
     
Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)..  - lambda_high(fringe,CCGT,COA,winter,l1,s1,s2) + lambda_low(fringe,CCGT,COA,winter,l1,s1,s2) + price(COA,winter,l1,s1,s2) =E= 8.860975 ;
     
      (LHS = 0, INFES = 8.860975 ****)
     
Eq9_1(fringe,CCGT,COA,winter,l1,s1,s3)..  - lambda_high(fringe,CCGT,COA,winter,l1,s1,s3) + lambda_low(fringe,CCGT,COA,winter,l1,s1,s3) + price(COA,winter,l1,s1,s3) =E= 8.860975 ;
     
      (LHS = 0, INFES = 8.860975 ****)
     
REMAINING 17277 ENTRIES SKIPPED


---- Eq9_2  =E=  Equation (8.2)

Eq9_2(fringe,CCGT,COA)..  0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l1,s1,s1) + 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l1,s1,s2)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l1,s1,s3) + 0.157988718422215*lambda_high(fringe,CCGT,COA,winter,l1,s2,s1)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l1,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l1,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l1,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l1,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l1,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l2,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l2,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l2,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,COA,winter,l2,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l2,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l2,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l2,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l2,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l2,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l3,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l3,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l3,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,COA,winter,l3,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l3,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l3,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l3,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l3,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l3,s3,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l4,s1,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l4,s1,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l4,s1,s3)
     
      + 0.0789943592111073*lambda_high(fringe,CCGT,COA,winter,l4,s2,s1) + 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l4,s2,s2)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l4,s2,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l4,s3,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l4,s3,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l4,s3,s3)
     
      + 0.0445147084947624*lambda_high(fringe,CCGT,COA,winter,l5,s1,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l5,s1,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l5,s1,s3) + 0.118491538816661*lambda_high(fringe,CCGT,COA,winter,l5,s2,s1)
     
      + 0.110317886881266*lambda_high(fringe,CCGT,COA,winter,l5,s2,s2) + 0.110317886881266*lambda_high(fringe,CCGT,COA,winter,l5,s2,s3)
     
      + 0.0445147084947625*lambda_high(fringe,CCGT,COA,winter,l5,s3,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l5,s3,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l5,s3,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l6,s1,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l6,s1,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l6,s1,s3)
     
      + 0.0789943592111073*lambda_high(fringe,CCGT,COA,winter,l6,s2,s1) + 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l6,s2,s2)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l6,s2,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l6,s3,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l6,s3,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l6,s3,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l7,s1,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l7,s1,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l7,s1,s3) + 0.0789943592111073*lambda_high(fringe,CCGT,COA,winter,l7,s2,s1)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l7,s2,s2) + 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l7,s2,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l7,s3,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l7,s3,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l7,s3,s3) + 0.0445147084947624*lambda_high(fringe,CCGT,COA,winter,l8,s1,s1)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l8,s1,s2) + 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l8,s1,s3)
     
      + 0.118491538816661*lambda_high(fringe,CCGT,COA,winter,l8,s2,s1) + 0.110317886881266*lambda_high(fringe,CCGT,COA,winter,l8,s2,s2) + 0.110317886881266*lambda_high(fringe,CCGT,COA,winter,l8,s2,s3)
     
      + 0.0445147084947625*lambda_high(fringe,CCGT,COA,winter,l8,s3,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l8,s3,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l8,s3,s3) + 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l1,s1,s1)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l1,s1,s2) + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l1,s1,s3) + 0.15669372892695*lambda_high(fringe,CCGT,COA,summer,l1,s2,s1)
     
      + 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l1,s2,s2) + 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l1,s2,s3)
     
      + 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l1,s3,s1) + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l1,s3,s2)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l1,s3,s3) + 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l2,s1,s1)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l2,s1,s2) + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l2,s1,s3) + 0.15669372892695*lambda_high(fringe,CCGT,COA,summer,l2,s2,s1)
     
      + 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l2,s2,s2) + 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l2,s2,s3)
     
      + 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l2,s3,s1) + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l2,s3,s2)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l2,s3,s3) + 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l3,s1,s1)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l3,s1,s2) + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l3,s1,s3) + 0.15669372892695*lambda_high(fringe,CCGT,COA,summer,l3,s2,s1)
     
      + 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l3,s2,s2) + 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l3,s2,s3)
     
      + 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l3,s3,s1) + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l3,s3,s2)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l3,s3,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l4,s1,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l4,s1,s2) + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l4,s1,s3)
     
      + 0.0783468644634752*lambda_high(fringe,CCGT,COA,summer,l4,s2,s1) + 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l4,s2,s2)
     
      + 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l4,s2,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l4,s3,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l4,s3,s2) + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l4,s3,s3)
     
      + 0.0441498338349693*lambda_high(fringe,CCGT,COA,summer,l5,s1,s1) + 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l5,s1,s2)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l5,s1,s3) + 0.117520296695213*lambda_high(fringe,CCGT,COA,summer,l5,s2,s1)
     
      + 0.109413641906829*lambda_high(fringe,CCGT,COA,summer,l5,s2,s2) + 0.109413641906829*lambda_high(fringe,CCGT,COA,summer,l5,s2,s3)
     
      + 0.0441498338349693*lambda_high(fringe,CCGT,COA,summer,l5,s3,s1) + 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l5,s3,s2)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l5,s3,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l6,s1,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l6,s1,s2) + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l6,s1,s3)
     
      + 0.0783468644634752*lambda_high(fringe,CCGT,COA,summer,l6,s2,s1) + 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l6,s2,s2)
     
      + 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l6,s2,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l6,s3,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l6,s3,s2) + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l6,s3,s3)
     
      + 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l7,s1,s1) + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l7,s1,s2)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l7,s1,s3) + 0.0783468644634752*lambda_high(fringe,CCGT,COA,summer,l7,s2,s1)
     
      + 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l7,s2,s2) + 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l7,s2,s3)
     
      + 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l7,s3,s1) + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l7,s3,s2)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l7,s3,s3) + 0.0441498338349693*lambda_high(fringe,CCGT,COA,summer,l8,s1,s1)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l8,s1,s2) + 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l8,s1,s3)
     
      + 0.117520296695213*lambda_high(fringe,CCGT,COA,summer,l8,s2,s1) + 0.109413641906829*lambda_high(fringe,CCGT,COA,summer,l8,s2,s2) + 0.109413641906829*lambda_high(fringe,CCGT,COA,summer,l8,s2,s3)
     
      + 0.0441498338349693*lambda_high(fringe,CCGT,COA,summer,l8,s3,s1) + 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l8,s3,s2)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l8,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s2)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s1)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s2) + 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s1) + 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s2)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s3) + 0.157988718422215*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s1)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s2)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s1)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s2) + 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s3) + 0.0789943592111073*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s1)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s2) + 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s3) + 0.0445147084947624*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s1)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s2) + 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s3)
     
      + 0.118491538816661*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s1) + 0.110317886881266*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s2)
     
      + 0.110317886881266*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s3) + 0.0445147084947625*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s1)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s2) + 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s3) + 0.0789943592111073*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s1)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s2) + 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s3)
     
      + 0.0789943592111073*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s1) + 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s2)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s3)
     
      + 0.0445147084947624*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s3) + 0.118491538816661*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s1)
     
      + 0.110317886881266*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s2) + 0.110317886881266*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s3)
     
      + 0.0445147084947625*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s3) + 0.366*delta(COA,winter,l5) + 0.244*delta(COA,winter,l6) + 0.244*delta(COA,winter,l7) + 0.363*delta(COA,summer,l5)
     
      + 0.242*delta(COA,summer,l6) + 0.242*delta(COA,summer,l7) + 0.366*delta(COA,spring-fall,l5) + 0.244*delta(COA,spring-fall,l6) + 0.244*delta(COA,spring-fall,l7) + alpha(fringe,CCGT,COA) =E= 
     131.653873578002 ; (LHS = 0, INFES = 131.653873578002 ****)
     
Eq9_2(fringe,CCGT,EOA)..  0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s1) + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s2)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s3) + 0.157988718422215*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s1)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s3)
     
      + 0.0789943592111073*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s1) + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s2)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s3)
     
      + 0.0445147084947624*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s3) + 0.118491538816661*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s1)
     
      + 0.110317886881266*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s2) + 0.110317886881266*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s3)
     
      + 0.0445147084947625*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s3)
     
      + 0.0789943592111073*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s1) + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s2)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s3) + 0.0789943592111073*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s1)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s2) + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s3) + 0.0445147084947624*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s1)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s2) + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s3)
     
      + 0.118491538816661*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s1) + 0.110317886881266*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s2) + 0.110317886881266*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s3)
     
      + 0.0445147084947625*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s3) + 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s1)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s2) + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s3) + 0.15669372892695*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s1)
     
      + 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s2) + 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s3)
     
      + 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s1) + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s2)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s3) + 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s1)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s2) + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s3) + 0.15669372892695*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s1)
     
      + 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s2) + 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s3)
     
      + 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s1) + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s2)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s3) + 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s1)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s2) + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s3) + 0.15669372892695*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s1)
     
      + 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s2) + 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s3)
     
      + 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s1) + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s2)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s2) + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s3)
     
      + 0.0783468644634752*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s1) + 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s2)
     
      + 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s2) + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s3)
     
      + 0.0441498338349693*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s1) + 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s2)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s3) + 0.117520296695213*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s1)
     
      + 0.109413641906829*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s2) + 0.109413641906829*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s3)
     
      + 0.0441498338349693*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s1) + 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s2)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s2) + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s3)
     
      + 0.0783468644634752*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s1) + 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s2)
     
      + 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s2) + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s3)
     
      + 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s1) + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s2)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s3) + 0.0783468644634752*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s1)
     
      + 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s2) + 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s3)
     
      + 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s1) + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s2)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s3) + 0.0441498338349693*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s1)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s2) + 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s3)
     
      + 0.117520296695213*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s1) + 0.109413641906829*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s2) + 0.109413641906829*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s3)
     
      + 0.0441498338349693*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s1) + 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s2)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s2)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s1)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s2) + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s1) + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s2)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s3) + 0.157988718422215*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s1)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s2)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s1)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s2) + 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s3) + 0.0789943592111073*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s1)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s2) + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s3) + 0.0445147084947624*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s1)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s2) + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s3)
     
      + 0.118491538816661*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s1) + 0.110317886881266*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s2)
     
      + 0.110317886881266*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s3) + 0.0445147084947625*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s1)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s2) + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s3) + 0.0789943592111073*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s1)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s2) + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s3)
     
      + 0.0789943592111073*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s1) + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s2)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s3)
     
      + 0.0445147084947624*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s3) + 0.118491538816661*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s1)
     
      + 0.110317886881266*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s2) + 0.110317886881266*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s3)
     
      + 0.0445147084947625*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s3) + 0.366*delta(EOA,winter,l5) + 0.244*delta(EOA,winter,l6) + 0.244*delta(EOA,winter,l7) + 0.363*delta(EOA,summer,l5)
     
      + 0.242*delta(EOA,summer,l6) + 0.242*delta(EOA,summer,l7) + 0.366*delta(EOA,spring-fall,l5) + 0.244*delta(EOA,spring-fall,l6) + 0.244*delta(EOA,spring-fall,l7) + alpha(fringe,CCGT,EOA) =E= 
     131.653873578002 ; (LHS = 0, INFES = 131.653873578002 ****)
     
Eq9_2(fringe,CCGT,SOA)..  0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s1) + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s2)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s3) + 0.157988718422215*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s1)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s3)
     
      + 0.0789943592111073*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s1) + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s2)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s3)
     
      + 0.0445147084947624*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s3) + 0.118491538816661*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s1)
     
      + 0.110317886881266*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s2) + 0.110317886881266*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s3)
     
      + 0.0445147084947625*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s3)
     
      + 0.0789943592111073*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s1) + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s2)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s3) + 0.0789943592111073*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s1)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s2) + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s3) + 0.0445147084947624*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s1)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s2) + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s3)
     
      + 0.118491538816661*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s1) + 0.110317886881266*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s2) + 0.110317886881266*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s3)
     
      + 0.0445147084947625*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s3) + 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s1)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s2) + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s3) + 0.15669372892695*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s1)
     
      + 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s2) + 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s3)
     
      + 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s1) + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s2)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s3) + 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s1)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s2) + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s3) + 0.15669372892695*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s1)
     
      + 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s2) + 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s3)
     
      + 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s1) + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s2)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s3) + 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s1)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s2) + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s3) + 0.15669372892695*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s1)
     
      + 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s2) + 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s3)
     
      + 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s1) + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s2)
     
      + 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s2) + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s3)
     
      + 0.0783468644634752*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s1) + 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s2)
     
      + 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s2) + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s3)
     
      + 0.0441498338349693*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s1) + 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s2)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s3) + 0.117520296695213*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s1)
     
      + 0.109413641906829*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s2) + 0.109413641906829*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s3)
     
      + 0.0441498338349693*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s1) + 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s2)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s2) + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s3)
     
      + 0.0783468644634752*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s1) + 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s2)
     
      + 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s3) + 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s1)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s2) + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s3)
     
      + 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s1) + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s2)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s3) + 0.0783468644634752*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s1)
     
      + 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s2) + 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s3)
     
      + 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s1) + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s2)
     
      + 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s3) + 0.0441498338349693*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s1)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s2) + 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s3)
     
      + 0.117520296695213*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s1) + 0.109413641906829*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s2) + 0.109413641906829*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s3)
     
      + 0.0441498338349693*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s1) + 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s2)
     
      + 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s2)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s1)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s2) + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s1) + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s2)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s3) + 0.157988718422215*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s1)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s2) + 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s3)
     
      + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s1) + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s2)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s1)
     
      + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s2) + 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s3)
     
      + 0.157988718422215*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s1) + 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s2)
     
      + 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s3) + 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s1)
     
      + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s2) + 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s3) + 0.0789943592111073*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s1)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s2) + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s3) + 0.0445147084947624*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s1)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s2) + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s3)
     
      + 0.118491538816661*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s1) + 0.110317886881266*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s2)
     
      + 0.110317886881266*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s3) + 0.0445147084947625*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s1)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s2) + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s3) + 0.0789943592111073*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s1)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s2) + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s3)
     
      + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s1) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s2)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s3)
     
      + 0.0789943592111073*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s1) + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s2)
     
      + 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s3) + 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s1)
     
      + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s2) + 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s3)
     
      + 0.0445147084947624*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s3) + 0.118491538816661*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s1)
     
      + 0.110317886881266*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s2) + 0.110317886881266*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s3)
     
      + 0.0445147084947625*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s1) + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s2)
     
      + 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s3) + 0.366*delta(SOA,winter,l5) + 0.244*delta(SOA,winter,l6) + 0.244*delta(SOA,winter,l7) + 0.363*delta(SOA,summer,l5)
     
      + 0.242*delta(SOA,summer,l6) + 0.242*delta(SOA,summer,l7) + 0.366*delta(SOA,spring-fall,l5) + 0.244*delta(SOA,spring-fall,l6) + 0.244*delta(SOA,spring-fall,l7) + alpha(fringe,CCGT,SOA) =E= 
     131.653873578002 ; (LHS = 0, INFES = 131.653873578002 ****)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_3  =E=  Equation (8.3)

Eq9_3(fringe,CCGT,COA)..  - 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l1,s1,s1) - 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l1,s1,s2)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l1,s1,s3) - 0.157988718422215*lambda_high(fringe,CCGT,COA,winter,l1,s2,s1)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l1,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l1,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l1,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l1,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l1,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l2,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l2,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l2,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,COA,winter,l2,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l2,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l2,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l2,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l2,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l2,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l3,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l3,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,COA,winter,l3,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,COA,winter,l3,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l3,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,COA,winter,l3,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,COA,winter,l3,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l3,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,COA,winter,l3,s3,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l4,s1,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l4,s1,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l4,s1,s3)
     
      - 0.0789943592111073*lambda_high(fringe,CCGT,COA,winter,l4,s2,s1) - 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l4,s2,s2)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l4,s2,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l4,s3,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l4,s3,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l4,s3,s3)
     
      - 0.0445147084947624*lambda_high(fringe,CCGT,COA,winter,l5,s1,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l5,s1,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l5,s1,s3) - 0.118491538816661*lambda_high(fringe,CCGT,COA,winter,l5,s2,s1)
     
      - 0.110317886881266*lambda_high(fringe,CCGT,COA,winter,l5,s2,s2) - 0.110317886881266*lambda_high(fringe,CCGT,COA,winter,l5,s2,s3)
     
      - 0.0445147084947625*lambda_high(fringe,CCGT,COA,winter,l5,s3,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l5,s3,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l5,s3,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l6,s1,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l6,s1,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l6,s1,s3)
     
      - 0.0789943592111073*lambda_high(fringe,CCGT,COA,winter,l6,s2,s1) - 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l6,s2,s2)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l6,s2,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l6,s3,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l6,s3,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l6,s3,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l7,s1,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l7,s1,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l7,s1,s3) - 0.0789943592111073*lambda_high(fringe,CCGT,COA,winter,l7,s2,s1)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l7,s2,s2) - 0.0735452579208438*lambda_high(fringe,CCGT,COA,winter,l7,s2,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,COA,winter,l7,s3,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l7,s3,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,winter,l7,s3,s3) - 0.0445147084947624*lambda_high(fringe,CCGT,COA,winter,l8,s1,s1)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l8,s1,s2) - 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l8,s1,s3)
     
      - 0.118491538816661*lambda_high(fringe,CCGT,COA,winter,l8,s2,s1) - 0.110317886881266*lambda_high(fringe,CCGT,COA,winter,l8,s2,s2) - 0.110317886881266*lambda_high(fringe,CCGT,COA,winter,l8,s2,s3)
     
      - 0.0445147084947625*lambda_high(fringe,CCGT,COA,winter,l8,s3,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l8,s3,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,COA,winter,l8,s3,s3) - 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l1,s1,s1)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l1,s1,s2) - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l1,s1,s3) - 0.15669372892695*lambda_high(fringe,CCGT,COA,summer,l1,s2,s1)
     
      - 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l1,s2,s2) - 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l1,s2,s3)
     
      - 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l1,s3,s1) - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l1,s3,s2)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l1,s3,s3) - 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l2,s1,s1)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l2,s1,s2) - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l2,s1,s3) - 0.15669372892695*lambda_high(fringe,CCGT,COA,summer,l2,s2,s1)
     
      - 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l2,s2,s2) - 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l2,s2,s3)
     
      - 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l2,s3,s1) - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l2,s3,s2)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l2,s3,s3) - 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l3,s1,s1)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l3,s1,s2) - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l3,s1,s3) - 0.15669372892695*lambda_high(fringe,CCGT,COA,summer,l3,s2,s1)
     
      - 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l3,s2,s2) - 0.145884855875772*lambda_high(fringe,CCGT,COA,summer,l3,s2,s3)
     
      - 0.0588664451132924*lambda_high(fringe,CCGT,COA,summer,l3,s3,s1) - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l3,s3,s2)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,COA,summer,l3,s3,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l4,s1,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l4,s1,s2) - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l4,s1,s3)
     
      - 0.0783468644634752*lambda_high(fringe,CCGT,COA,summer,l4,s2,s1) - 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l4,s2,s2)
     
      - 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l4,s2,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l4,s3,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l4,s3,s2) - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l4,s3,s3)
     
      - 0.0441498338349693*lambda_high(fringe,CCGT,COA,summer,l5,s1,s1) - 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l5,s1,s2)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l5,s1,s3) - 0.117520296695213*lambda_high(fringe,CCGT,COA,summer,l5,s2,s1)
     
      - 0.109413641906829*lambda_high(fringe,CCGT,COA,summer,l5,s2,s2) - 0.109413641906829*lambda_high(fringe,CCGT,COA,summer,l5,s2,s3)
     
      - 0.0441498338349693*lambda_high(fringe,CCGT,COA,summer,l5,s3,s1) - 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l5,s3,s2)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l5,s3,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l6,s1,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l6,s1,s2) - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l6,s1,s3)
     
      - 0.0783468644634752*lambda_high(fringe,CCGT,COA,summer,l6,s2,s1) - 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l6,s2,s2)
     
      - 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l6,s2,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l6,s3,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l6,s3,s2) - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l6,s3,s3)
     
      - 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l7,s1,s1) - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l7,s1,s2)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l7,s1,s3) - 0.0783468644634752*lambda_high(fringe,CCGT,COA,summer,l7,s2,s1)
     
      - 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l7,s2,s2) - 0.072942427937886*lambda_high(fringe,CCGT,COA,summer,l7,s2,s3)
     
      - 0.0294332225566462*lambda_high(fringe,CCGT,COA,summer,l7,s3,s1) - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l7,s3,s2)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,COA,summer,l7,s3,s3) - 0.0441498338349693*lambda_high(fringe,CCGT,COA,summer,l8,s1,s1)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l8,s1,s2) - 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l8,s1,s3)
     
      - 0.117520296695213*lambda_high(fringe,CCGT,COA,summer,l8,s2,s1) - 0.109413641906829*lambda_high(fringe,CCGT,COA,summer,l8,s2,s2) - 0.109413641906829*lambda_high(fringe,CCGT,COA,summer,l8,s2,s3)
     
      - 0.0441498338349693*lambda_high(fringe,CCGT,COA,summer,l8,s3,s1) - 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l8,s3,s2)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,COA,summer,l8,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s2)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s1)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s2) - 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s1) - 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s2)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s3) - 0.157988718422215*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s1)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s2)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s1)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s2) - 0.0484547420791563*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s3) - 0.0789943592111073*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s1)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s2) - 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s3) - 0.0445147084947624*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s1)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s2) - 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s3)
     
      - 0.118491538816661*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s1) - 0.110317886881266*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s2)
     
      - 0.110317886881266*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s3) - 0.0445147084947625*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s1)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s2) - 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s3) - 0.0789943592111073*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s1)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s2) - 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s3)
     
      - 0.0789943592111073*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s1) - 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s2)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s3)
     
      - 0.0445147084947624*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s3) - 0.118491538816661*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s1)
     
      - 0.110317886881266*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s2) - 0.110317886881266*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s3)
     
      - 0.0445147084947625*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s3) - 0.366*delta(COA,winter,l5) - 0.244*delta(COA,winter,l6) - 0.244*delta(COA,winter,l7) - 0.363*delta(COA,summer,l5)
     
      - 0.242*delta(COA,summer,l6) - 0.242*delta(COA,summer,l7) - 0.366*delta(COA,spring-fall,l5) - 0.244*delta(COA,spring-fall,l6) - 0.244*delta(COA,spring-fall,l7) - eta_high(fringe,CCGT,COA)
     
      + eta_low(fringe,CCGT,COA) =E= -0.474612642199789 ; (LHS = 0, INFES = 0.474612642199789 ****)
     
Eq9_3(fringe,CCGT,EOA)..  - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s1) - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s2)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s3) - 0.157988718422215*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s1)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s3)
     
      - 0.0789943592111073*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s1) - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s2)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s3)
     
      - 0.0445147084947624*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s3) - 0.118491538816661*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s1)
     
      - 0.110317886881266*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s2) - 0.110317886881266*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s3)
     
      - 0.0445147084947625*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s3)
     
      - 0.0789943592111073*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s1) - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s2)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s3) - 0.0789943592111073*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s1)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s2) - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s3) - 0.0445147084947624*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s1)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s2) - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s3)
     
      - 0.118491538816661*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s1) - 0.110317886881266*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s2) - 0.110317886881266*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s3)
     
      - 0.0445147084947625*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s3) - 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s1)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s2) - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s3) - 0.15669372892695*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s1)
     
      - 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s2) - 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s3)
     
      - 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s1) - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s2)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s3) - 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s1)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s2) - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s3) - 0.15669372892695*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s1)
     
      - 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s2) - 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s3)
     
      - 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s1) - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s2)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s3) - 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s1)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s2) - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s3) - 0.15669372892695*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s1)
     
      - 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s2) - 0.145884855875772*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s3)
     
      - 0.0588664451132924*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s1) - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s2)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s2) - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s3)
     
      - 0.0783468644634752*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s1) - 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s2)
     
      - 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s2) - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s3)
     
      - 0.0441498338349693*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s1) - 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s2)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s3) - 0.117520296695213*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s1)
     
      - 0.109413641906829*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s2) - 0.109413641906829*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s3)
     
      - 0.0441498338349693*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s1) - 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s2)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s2) - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s3)
     
      - 0.0783468644634752*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s1) - 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s2)
     
      - 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s2) - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s3)
     
      - 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s1) - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s2)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s3) - 0.0783468644634752*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s1)
     
      - 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s2) - 0.072942427937886*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s3)
     
      - 0.0294332225566462*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s1) - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s2)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s3) - 0.0441498338349693*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s1)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s2) - 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s3)
     
      - 0.117520296695213*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s1) - 0.109413641906829*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s2) - 0.109413641906829*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s3)
     
      - 0.0441498338349693*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s1) - 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s2)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s2)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s1)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s2) - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s1) - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s2)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s3) - 0.157988718422215*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s1)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s2)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s1)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s2) - 0.0484547420791563*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s3) - 0.0789943592111073*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s1)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s2) - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s3) - 0.0445147084947624*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s1)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s2) - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s3)
     
      - 0.118491538816661*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s1) - 0.110317886881266*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s2)
     
      - 0.110317886881266*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s3) - 0.0445147084947625*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s1)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s2) - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s3) - 0.0789943592111073*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s1)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s2) - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s3)
     
      - 0.0789943592111073*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s1) - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s2)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s3)
     
      - 0.0445147084947624*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s3) - 0.118491538816661*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s1)
     
      - 0.110317886881266*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s2) - 0.110317886881266*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s3)
     
      - 0.0445147084947625*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s3) - 0.366*delta(EOA,winter,l5) - 0.244*delta(EOA,winter,l6) - 0.244*delta(EOA,winter,l7) - 0.363*delta(EOA,summer,l5)
     
      - 0.242*delta(EOA,summer,l6) - 0.242*delta(EOA,summer,l7) - 0.366*delta(EOA,spring-fall,l5) - 0.244*delta(EOA,spring-fall,l6) - 0.244*delta(EOA,spring-fall,l7) - eta_high(fringe,CCGT,EOA)
     
      + eta_low(fringe,CCGT,EOA) =E= -0.474612642199789 ; (LHS = 0, INFES = 0.474612642199789 ****)
     
Eq9_3(fringe,CCGT,SOA)..  - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s1) - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s2)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s3) - 0.157988718422215*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s1)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s3)
     
      - 0.0789943592111073*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s1) - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s2)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s3)
     
      - 0.0445147084947624*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s3) - 0.118491538816661*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s1)
     
      - 0.110317886881266*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s2) - 0.110317886881266*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s3)
     
      - 0.0445147084947625*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s3)
     
      - 0.0789943592111073*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s1) - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s2)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s3) - 0.0789943592111073*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s1)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s2) - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s3) - 0.0445147084947624*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s1)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s2) - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s3)
     
      - 0.118491538816661*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s1) - 0.110317886881266*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s2) - 0.110317886881266*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s3)
     
      - 0.0445147084947625*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s3) - 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s1)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s2) - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s3) - 0.15669372892695*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s1)
     
      - 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s2) - 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s3)
     
      - 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s1) - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s2)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s3) - 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s1)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s2) - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s3) - 0.15669372892695*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s1)
     
      - 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s2) - 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s3)
     
      - 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s1) - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s2)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s3) - 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s1)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s2) - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s3) - 0.15669372892695*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s1)
     
      - 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s2) - 0.145884855875772*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s3)
     
      - 0.0588664451132924*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s1) - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s2)
     
      - 0.048057572062114*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s2) - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s3)
     
      - 0.0783468644634752*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s1) - 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s2)
     
      - 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s2) - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s3)
     
      - 0.0441498338349693*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s1) - 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s2)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s3) - 0.117520296695213*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s1)
     
      - 0.109413641906829*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s2) - 0.109413641906829*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s3)
     
      - 0.0441498338349693*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s1) - 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s2)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s2) - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s3)
     
      - 0.0783468644634752*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s1) - 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s2)
     
      - 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s3) - 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s1)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s2) - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s3)
     
      - 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s1) - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s2)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s3) - 0.0783468644634752*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s1)
     
      - 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s2) - 0.072942427937886*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s3)
     
      - 0.0294332225566462*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s1) - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s2)
     
      - 0.024028786031057*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s3) - 0.0441498338349693*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s1)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s2) - 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s3)
     
      - 0.117520296695213*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s1) - 0.109413641906829*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s2) - 0.109413641906829*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s3)
     
      - 0.0441498338349693*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s1) - 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s2)
     
      - 0.0360431790465855*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s2)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s1)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s2) - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s1) - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s2)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s3) - 0.157988718422215*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s1)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s2) - 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s3)
     
      - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s1) - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s2)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s1)
     
      - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s2) - 0.0484547420791562*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s3)
     
      - 0.157988718422215*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s1) - 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s2)
     
      - 0.147090515841688*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s3) - 0.0593529446596833*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s1)
     
      - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s2) - 0.0484547420791563*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s3) - 0.0789943592111073*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s1)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s2) - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s3) - 0.0445147084947624*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s1)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s2) - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s3)
     
      - 0.118491538816661*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s1) - 0.110317886881266*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s2)
     
      - 0.110317886881266*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s3) - 0.0445147084947625*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s1)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s2) - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s3) - 0.0789943592111073*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s1)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s2) - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s3)
     
      - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s1) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s2)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s3)
     
      - 0.0789943592111073*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s1) - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s2)
     
      - 0.0735452579208438*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s3) - 0.0296764723298416*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s1)
     
      - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s2) - 0.0242273710395781*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s3)
     
      - 0.0445147084947624*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s3) - 0.118491538816661*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s1)
     
      - 0.110317886881266*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s2) - 0.110317886881266*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s3)
     
      - 0.0445147084947625*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s1) - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s2)
     
      - 0.0363410565593672*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s3) - 0.366*delta(SOA,winter,l5) - 0.244*delta(SOA,winter,l6) - 0.244*delta(SOA,winter,l7) - 0.363*delta(SOA,summer,l5)
     
      - 0.242*delta(SOA,summer,l6) - 0.242*delta(SOA,summer,l7) - 0.366*delta(SOA,spring-fall,l5) - 0.244*delta(SOA,spring-fall,l6) - 0.244*delta(SOA,spring-fall,l7) - eta_high(fringe,CCGT,SOA)
     
      + eta_low(fringe,CCGT,SOA) =E= -0.474612642199789 ; (LHS = 0, INFES = 0.474612642199789 ****)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_4  =E=  Equation (8.4)

Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s1)..  - price(COA,winter,l1,s1,s1) + price(EOA,winter,l1,s1,s1) - price_trans(East,winter,l1,s1,s1) + zeta(fringe,East,COA,EOA,winter,l1,s1,s1) =E= 0 ;
     
      (LHS = 0)
     
Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s2)..  - price(COA,winter,l1,s1,s2) + price(EOA,winter,l1,s1,s2) - price_trans(East,winter,l1,s1,s2) + zeta(fringe,East,COA,EOA,winter,l1,s1,s2) =E= 0 ;
     
      (LHS = 0)
     
Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s3)..  - price(COA,winter,l1,s1,s3) + price(EOA,winter,l1,s1,s3) - price_trans(East,winter,l1,s1,s3) + zeta(fringe,East,COA,EOA,winter,l1,s1,s3) =E= 0 ;
     
      (LHS = 0)
     
REMAINING 6477 ENTRIES SKIPPED


---- Eq9_5  =G=  

Eq9_5(fringe,CCGT,COA,winter,l1,s1,s1)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s1,s1) =G= 0 ; (LHS = 0)
     
Eq9_5(fringe,CCGT,COA,winter,l1,s1,s2)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s1,s2) =G= 0 ; (LHS = 0)
     
Eq9_5(fringe,CCGT,COA,winter,l1,s1,s3)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s1,s3) =G= 0 ; (LHS = 0)
     
REMAINING 17277 ENTRIES SKIPPED


---- Eq9_6  =G=  

Eq9_6(fringe,CCGT,COA)..  - ret(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq9_6(fringe,CCGT,EOA)..  - ret(fringe,CCGT,EOA) =G= -2.56737 ; (LHS = 0)
     
Eq9_6(fringe,CCGT,SOA)..  - ret(fringe,CCGT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_7  =E=  

Eq9_7(fringe,CCGT,COA)..  - inv(fringe,CCGT,COA) + ret(fringe,CCGT,COA) + Cap_avail(fringe,CCGT,COA) =E= 0 ; (LHS = 0)
     
Eq9_7(fringe,CCGT,EOA)..  - inv(fringe,CCGT,EOA) + ret(fringe,CCGT,EOA) + Cap_avail(fringe,CCGT,EOA) =E= 2.56737 ; (LHS = 0, INFES = 2.56737 ****)
     
Eq9_7(fringe,CCGT,SOA)..  - inv(fringe,CCGT,SOA) + ret(fringe,CCGT,SOA) + Cap_avail(fringe,CCGT,SOA) =E= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_8  =E=  

Eq9_8(fringe,COA,winter,l1,s1,s1)..  - Q(fringe,CCGT,COA,winter,l1,s1,s1) - Q(fringe,GT,COA,winter,l1,s1,s1) - Q(fringe,ST,COA,winter,l1,s1,s1) - Q(fringe,Nuclear,COA,winter,l1,s1,s1)
     
      + sales(fringe,COA,winter,l1,s1,s1) + trade(fringe,East,COA,EOA,winter,l1,s1,s1) - trade(fringe,East,EOA,COA,winter,l1,s1,s1) + trade(fringe,west,COA,WOA,winter,l1,s1,s1)
     
      - trade(fringe,west,WOA,COA,winter,l1,s1,s1) =E= 0 ; (LHS = 0)
     
Eq9_8(fringe,COA,winter,l1,s1,s2)..  - Q(fringe,CCGT,COA,winter,l1,s1,s2) - Q(fringe,GT,COA,winter,l1,s1,s2) - Q(fringe,ST,COA,winter,l1,s1,s2) - Q(fringe,Nuclear,COA,winter,l1,s1,s2)
     
      + sales(fringe,COA,winter,l1,s1,s2) + trade(fringe,East,COA,EOA,winter,l1,s1,s2) - trade(fringe,East,EOA,COA,winter,l1,s1,s2) + trade(fringe,west,COA,WOA,winter,l1,s1,s2)
     
      - trade(fringe,west,WOA,COA,winter,l1,s1,s2) =E= 0 ; (LHS = 0)
     
Eq9_8(fringe,COA,winter,l1,s1,s3)..  - Q(fringe,CCGT,COA,winter,l1,s1,s3) - Q(fringe,GT,COA,winter,l1,s1,s3) - Q(fringe,ST,COA,winter,l1,s1,s3) - Q(fringe,Nuclear,COA,winter,l1,s1,s3)
     
      + sales(fringe,COA,winter,l1,s1,s3) + trade(fringe,East,COA,EOA,winter,l1,s1,s3) - trade(fringe,East,EOA,COA,winter,l1,s1,s3) + trade(fringe,west,COA,WOA,winter,l1,s1,s3)
     
      - trade(fringe,west,WOA,COA,winter,l1,s1,s3) =E= 0 ; (LHS = 0)
     
REMAINING 4317 ENTRIES SKIPPED


---- Eq10_1  =E=  

Eq10_1(East,COA,EOA,winter,l1,s1,s1)..  - price(COA,winter,l1,s1,s1) + price(EOA,winter,l1,s1,s1) - price_trans(East,winter,l1,s1,s1) + shadows_arbitrage(East,COA,EOA,winter,l1,s1,s1) =E= 0 ;
     
      (LHS = 0)
     
Eq10_1(East,COA,EOA,winter,l1,s1,s2)..  - price(COA,winter,l1,s1,s2) + price(EOA,winter,l1,s1,s2) - price_trans(East,winter,l1,s1,s2) + shadows_arbitrage(East,COA,EOA,winter,l1,s1,s2) =E= 0 ;
     
      (LHS = 0)
     
Eq10_1(East,COA,EOA,winter,l1,s1,s3)..  - price(COA,winter,l1,s1,s3) + price(EOA,winter,l1,s1,s3) - price_trans(East,winter,l1,s1,s3) + shadows_arbitrage(East,COA,EOA,winter,l1,s1,s3) =E= 0 ;
     
      (LHS = 0)
     
REMAINING 1293 ENTRIES SKIPPED


---- Eq11_1  =E=  

Eq11_1(East,winter,l1,s1,s1)..  price_trans(East,winter,l1,s1,s1) - 2.04918032786885*tau(East,winter,l1,s1,s1) =E= 3.78 ; (LHS = 0, INFES = 3.78 ****)
     
Eq11_1(East,winter,l1,s1,s2)..  price_trans(East,winter,l1,s1,s2) - 2.04918032786885*tau(East,winter,l1,s1,s2) =E= 3.78 ; (LHS = 0, INFES = 3.78 ****)
     
Eq11_1(East,winter,l1,s1,s3)..  price_trans(East,winter,l1,s1,s3) - 2.04918032786885*tau(East,winter,l1,s1,s3) =E= 3.78 ; (LHS = 0, INFES = 3.78 ****)
     
REMAINING 645 ENTRIES SKIPPED


---- Eq11_2  =G=  

Eq11_2(East,winter,l1,s1,s1)..  - trans(East,winter,l1,s1,s1) =G= -5.22 ; (LHS = 0)
     
Eq11_2(East,winter,l1,s1,s2)..  - trans(East,winter,l1,s1,s2) =G= -5.22 ; (LHS = 0)
     
Eq11_2(East,winter,l1,s1,s3)..  - trans(East,winter,l1,s1,s3) =G= -5.22 ; (LHS = 0)
     
REMAINING 645 ENTRIES SKIPPED


---- Eq11_3  =G=  

Eq11_3(East,winter,l1,s1,s1)..  (1)*arbitrage(East,COA,EOA,winter,l1,s1,s1) - (1)*arbitrage(East,EOA,COA,winter,l1,s1,s1) + (1)*trade(fringe,East,COA,EOA,winter,l1,s1,s1)
     
      - (1)*trade(fringe,East,EOA,COA,winter,l1,s1,s1) + (1)*trade(g1,East,COA,EOA,winter,l1,s1,s1) - (1)*trade(g1,East,EOA,COA,winter,l1,s1,s1) + (1)*trade(g2,East,COA,EOA,winter,l1,s1,s1)
     
      - (1)*trade(g2,East,EOA,COA,winter,l1,s1,s1) + (1)*trade(g3,East,COA,EOA,winter,l1,s1,s1) - (1)*trade(g3,East,EOA,COA,winter,l1,s1,s1) + (1)*trade(g4,East,COA,EOA,winter,l1,s1,s1)
     
      - (1)*trade(g4,East,EOA,COA,winter,l1,s1,s1) + trans(East,winter,l1,s1,s1) =G= 0 ; (LHS = 0)
     
Eq11_3(East,winter,l1,s1,s2)..  (1)*arbitrage(East,COA,EOA,winter,l1,s1,s2) - (1)*arbitrage(East,EOA,COA,winter,l1,s1,s2) + (1)*trade(fringe,East,COA,EOA,winter,l1,s1,s2)
     
      - (1)*trade(fringe,East,EOA,COA,winter,l1,s1,s2) + (1)*trade(g1,East,COA,EOA,winter,l1,s1,s2) - (1)*trade(g1,East,EOA,COA,winter,l1,s1,s2) + (1)*trade(g2,East,COA,EOA,winter,l1,s1,s2)
     
      - (1)*trade(g2,East,EOA,COA,winter,l1,s1,s2) + (1)*trade(g3,East,COA,EOA,winter,l1,s1,s2) - (1)*trade(g3,East,EOA,COA,winter,l1,s1,s2) + (1)*trade(g4,East,COA,EOA,winter,l1,s1,s2)
     
      - (1)*trade(g4,East,EOA,COA,winter,l1,s1,s2) + trans(East,winter,l1,s1,s2) =G= 0 ; (LHS = 0)
     
Eq11_3(East,winter,l1,s1,s3)..  (1)*arbitrage(East,COA,EOA,winter,l1,s1,s3) - (1)*arbitrage(East,EOA,COA,winter,l1,s1,s3) + (1)*trade(fringe,East,COA,EOA,winter,l1,s1,s3)
     
      - (1)*trade(fringe,East,EOA,COA,winter,l1,s1,s3) + (1)*trade(g1,East,COA,EOA,winter,l1,s1,s3) - (1)*trade(g1,East,EOA,COA,winter,l1,s1,s3) + (1)*trade(g2,East,COA,EOA,winter,l1,s1,s3)
     
      - (1)*trade(g2,East,EOA,COA,winter,l1,s1,s3) + (1)*trade(g3,East,COA,EOA,winter,l1,s1,s3) - (1)*trade(g3,East,EOA,COA,winter,l1,s1,s3) + (1)*trade(g4,East,COA,EOA,winter,l1,s1,s3)
     
      - (1)*trade(g4,East,EOA,COA,winter,l1,s1,s3) + trans(East,winter,l1,s1,s3) =G= 0 ; (LHS = 0)
     
REMAINING 645 ENTRIES SKIPPED


---- Eq_q  =G=  

Eq_q(fringe,CCGT,COA,winter,l1,s1,s1)..  Q(fringe,CCGT,COA,winter,l1,s1,s1) =G= 0 ; (LHS = 0)
     
Eq_q(fringe,CCGT,COA,winter,l1,s1,s2)..  Q(fringe,CCGT,COA,winter,l1,s1,s2) =G= 0 ; (LHS = 0)
     
Eq_q(fringe,CCGT,COA,winter,l1,s1,s3)..  Q(fringe,CCGT,COA,winter,l1,s1,s3) =G= 0 ; (LHS = 0)
     
REMAINING 17277 ENTRIES SKIPPED


---- Eq_trade  =G=  

Eq_trade(fringe,East,COA,EOA,winter,l1,s1,s1)..  trade(fringe,East,COA,EOA,winter,l1,s1,s1) =G= 0 ; (LHS = 0)
     
Eq_trade(fringe,East,COA,EOA,winter,l1,s1,s2)..  trade(fringe,East,COA,EOA,winter,l1,s1,s2) =G= 0 ; (LHS = 0)
     
Eq_trade(fringe,East,COA,EOA,winter,l1,s1,s3)..  trade(fringe,East,COA,EOA,winter,l1,s1,s3) =G= 0 ; (LHS = 0)
     
REMAINING 6477 ENTRIES SKIPPED


---- Eq_inv  =G=  

Eq_inv(fringe,CCGT,COA)..  inv(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq_inv(fringe,CCGT,EOA)..  inv(fringe,CCGT,EOA) =G= 0 ; (LHS = 0)
     
Eq_inv(fringe,CCGT,SOA)..  inv(fringe,CCGT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq_ret  =G=  

Eq_ret(fringe,CCGT,COA)..  ret(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq_ret(fringe,CCGT,EOA)..  ret(fringe,CCGT,EOA) =G= 0 ; (LHS = 0)
     
Eq_ret(fringe,CCGT,SOA)..  ret(fringe,CCGT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq_arb  =G=  

Eq_arb(East,COA,EOA,winter,l1,s1,s1)..  arbitrage(East,COA,EOA,winter,l1,s1,s1) =G= 0 ; (LHS = 0)
     
Eq_arb(East,COA,EOA,winter,l1,s1,s2)..  arbitrage(East,COA,EOA,winter,l1,s1,s2) =G= 0 ; (LHS = 0)
     
Eq_arb(East,COA,EOA,winter,l1,s1,s3)..  arbitrage(East,COA,EOA,winter,l1,s1,s3) =G= 0 ; (LHS = 0)
     
REMAINING 1293 ENTRIES SKIPPED

GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/19/16 16:51:27 Page 5
Dynamic Programming Investment
Column Listing      SOLVE CMO Using MCP From line 728


---- inv  investment by player i in technology h

inv(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_7(fringe,CCGT,COA)
        1       Eq_inv(fringe,CCGT,COA)

inv(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_7(fringe,CCGT,EOA)
        1       Eq_inv(fringe,CCGT,EOA)

inv(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_7(fringe,CCGT,SOA)
        1       Eq_inv(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- ret  retirement of technology h in region r by player i

ret(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,COA)
        1       Eq9_7(fringe,CCGT,COA)
        1       Eq_ret(fringe,CCGT,COA)

ret(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,EOA)
        1       Eq9_7(fringe,CCGT,EOA)
        1       Eq_ret(fringe,CCGT,EOA)

ret(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,SOA)
        1       Eq9_7(fringe,CCGT,SOA)
        1       Eq_ret(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- Cap_avail  available capacity of player i of technolgy h in region r in MW

Cap_avail(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s3,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s1,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s2,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s3,s3)
        1       Eq9_7(fringe,CCGT,COA)

Cap_avail(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s3,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s1,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s2,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s3,s3)
        1       Eq9_7(fringe,CCGT,EOA)

Cap_avail(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s3,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s1,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s2,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s3,s3)
        1       Eq9_7(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- Q  generation quantity from a player i at market l in scenario in MW

Q(fringe,CCGT,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s1)
       -1       Eq9_8(fringe,COA,winter,l1,s1,s1)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s1,s1)

Q(fringe,CCGT,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s2)
       -1       Eq9_8(fringe,COA,winter,l1,s1,s2)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s1,s2)

Q(fringe,CCGT,COA,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s3)
       -1       Eq9_8(fringe,COA,winter,l1,s1,s3)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s1,s3)

REMAINING 17277 ENTRIES SKIPPED

---- sales  sales of firm in region r market l scenario s in MW

sales(fringe,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       58.7064  Eq1(COA,winter,l1,s1,s1)
        1       Eq9_8(fringe,COA,winter,l1,s1,s1)

sales(fringe,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       72.0425  Eq1(COA,winter,l1,s1,s2)
        1       Eq9_8(fringe,COA,winter,l1,s1,s2)

sales(fringe,COA,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       72.0425  Eq1(COA,winter,l1,s1,s3)
        1       Eq9_8(fringe,COA,winter,l1,s1,s3)

REMAINING 4317 ENTRIES SKIPPED

---- lambda_high  shadow prices for the high capacity constraint in USD per  MWh

lambda_high(fringe,CCGT,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)
        0.0594  Eq9_2(fringe,CCGT,COA)
       -0.0594  Eq9_3(fringe,CCGT,COA)

lambda_high(fringe,CCGT,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)
        0.0485  Eq9_2(fringe,CCGT,COA)
       -0.0485  Eq9_3(fringe,CCGT,COA)

lambda_high(fringe,CCGT,COA,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s3)
        0.0485  Eq9_2(fringe,CCGT,COA)
       -0.0485  Eq9_3(fringe,CCGT,COA)

REMAINING 17277 ENTRIES SKIPPED

---- lambda_low  shadows prices for low constraint in USD per  MWh

lambda_low(fringe,CCGT,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)

lambda_low(fringe,CCGT,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)

lambda_low(fringe,CCGT,COA,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s3)

REMAINING 17277 ENTRIES SKIPPED

---- delta  shadow prices for the capacity market in USD per  MW per hour

delta(COA,winter,l5)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq2(COA,winter,l5)
        0.366   Eq9_2(fringe,CCGT,COA)
        0.366   Eq9_2(fringe,GT,COA)
        0.366   Eq9_2(fringe,ST,COA)
        0.366   Eq9_2(fringe,Nuclear,COA)
        0.366   Eq9_2(g1,CCGT,COA)
        0.366   Eq9_2(g1,GT,COA)
        0.366   Eq9_2(g1,ST,COA)
        0.366   Eq9_2(g1,Nuclear,COA)
        0.366   Eq9_2(g2,CCGT,COA)
        0.366   Eq9_2(g2,GT,COA)
        0.366   Eq9_2(g2,ST,COA)
        0.366   Eq9_2(g2,Nuclear,COA)
        0.366   Eq9_2(g3,CCGT,COA)
        0.366   Eq9_2(g3,GT,COA)
        0.366   Eq9_2(g3,ST,COA)
        0.366   Eq9_2(g3,Nuclear,COA)
        0.366   Eq9_2(g4,CCGT,COA)
        0.366   Eq9_2(g4,GT,COA)
        0.366   Eq9_2(g4,ST,COA)
        0.366   Eq9_2(g4,Nuclear,COA)
       -0.366   Eq9_3(fringe,CCGT,COA)
       -0.366   Eq9_3(fringe,GT,COA)
       -0.366   Eq9_3(fringe,ST,COA)
       -0.366   Eq9_3(fringe,Nuclear,COA)
       -0.366   Eq9_3(g1,CCGT,COA)
       -0.366   Eq9_3(g1,GT,COA)
       -0.366   Eq9_3(g1,ST,COA)
       -0.366   Eq9_3(g1,Nuclear,COA)
       -0.366   Eq9_3(g2,CCGT,COA)
       -0.366   Eq9_3(g2,GT,COA)
       -0.366   Eq9_3(g2,ST,COA)
       -0.366   Eq9_3(g2,Nuclear,COA)
       -0.366   Eq9_3(g3,CCGT,COA)
       -0.366   Eq9_3(g3,GT,COA)
       -0.366   Eq9_3(g3,ST,COA)
       -0.366   Eq9_3(g3,Nuclear,COA)
       -0.366   Eq9_3(g4,CCGT,COA)
       -0.366   Eq9_3(g4,GT,COA)
       -0.366   Eq9_3(g4,ST,COA)
       -0.366   Eq9_3(g4,Nuclear,COA)

delta(COA,winter,l6)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq2(COA,winter,l6)
        0.244   Eq9_2(fringe,CCGT,COA)
        0.244   Eq9_2(fringe,GT,COA)
        0.244   Eq9_2(fringe,ST,COA)
        0.244   Eq9_2(fringe,Nuclear,COA)
        0.244   Eq9_2(g1,CCGT,COA)
        0.244   Eq9_2(g1,GT,COA)
        0.244   Eq9_2(g1,ST,COA)
        0.244   Eq9_2(g1,Nuclear,COA)
        0.244   Eq9_2(g2,CCGT,COA)
        0.244   Eq9_2(g2,GT,COA)
        0.244   Eq9_2(g2,ST,COA)
        0.244   Eq9_2(g2,Nuclear,COA)
        0.244   Eq9_2(g3,CCGT,COA)
        0.244   Eq9_2(g3,GT,COA)
        0.244   Eq9_2(g3,ST,COA)
        0.244   Eq9_2(g3,Nuclear,COA)
        0.244   Eq9_2(g4,CCGT,COA)
        0.244   Eq9_2(g4,GT,COA)
        0.244   Eq9_2(g4,ST,COA)
        0.244   Eq9_2(g4,Nuclear,COA)
       -0.244   Eq9_3(fringe,CCGT,COA)
       -0.244   Eq9_3(fringe,GT,COA)
       -0.244   Eq9_3(fringe,ST,COA)
       -0.244   Eq9_3(fringe,Nuclear,COA)
       -0.244   Eq9_3(g1,CCGT,COA)
       -0.244   Eq9_3(g1,GT,COA)
       -0.244   Eq9_3(g1,ST,COA)
       -0.244   Eq9_3(g1,Nuclear,COA)
       -0.244   Eq9_3(g2,CCGT,COA)
       -0.244   Eq9_3(g2,GT,COA)
       -0.244   Eq9_3(g2,ST,COA)
       -0.244   Eq9_3(g2,Nuclear,COA)
       -0.244   Eq9_3(g3,CCGT,COA)
       -0.244   Eq9_3(g3,GT,COA)
       -0.244   Eq9_3(g3,ST,COA)
       -0.244   Eq9_3(g3,Nuclear,COA)
       -0.244   Eq9_3(g4,CCGT,COA)
       -0.244   Eq9_3(g4,GT,COA)
       -0.244   Eq9_3(g4,ST,COA)
       -0.244   Eq9_3(g4,Nuclear,COA)

delta(COA,winter,l7)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq2(COA,winter,l7)
        0.244   Eq9_2(fringe,CCGT,COA)
        0.244   Eq9_2(fringe,GT,COA)
        0.244   Eq9_2(fringe,ST,COA)
        0.244   Eq9_2(fringe,Nuclear,COA)
        0.244   Eq9_2(g1,CCGT,COA)
        0.244   Eq9_2(g1,GT,COA)
        0.244   Eq9_2(g1,ST,COA)
        0.244   Eq9_2(g1,Nuclear,COA)
        0.244   Eq9_2(g2,CCGT,COA)
        0.244   Eq9_2(g2,GT,COA)
        0.244   Eq9_2(g2,ST,COA)
        0.244   Eq9_2(g2,Nuclear,COA)
        0.244   Eq9_2(g3,CCGT,COA)
        0.244   Eq9_2(g3,GT,COA)
        0.244   Eq9_2(g3,ST,COA)
        0.244   Eq9_2(g3,Nuclear,COA)
        0.244   Eq9_2(g4,CCGT,COA)
        0.244   Eq9_2(g4,GT,COA)
        0.244   Eq9_2(g4,ST,COA)
        0.244   Eq9_2(g4,Nuclear,COA)
       -0.244   Eq9_3(fringe,CCGT,COA)
       -0.244   Eq9_3(fringe,GT,COA)
       -0.244   Eq9_3(fringe,ST,COA)
       -0.244   Eq9_3(fringe,Nuclear,COA)
       -0.244   Eq9_3(g1,CCGT,COA)
       -0.244   Eq9_3(g1,GT,COA)
       -0.244   Eq9_3(g1,ST,COA)
       -0.244   Eq9_3(g1,Nuclear,COA)
       -0.244   Eq9_3(g2,CCGT,COA)
       -0.244   Eq9_3(g2,GT,COA)
       -0.244   Eq9_3(g2,ST,COA)
       -0.244   Eq9_3(g2,Nuclear,COA)
       -0.244   Eq9_3(g3,CCGT,COA)
       -0.244   Eq9_3(g3,GT,COA)
       -0.244   Eq9_3(g3,ST,COA)
       -0.244   Eq9_3(g3,Nuclear,COA)
       -0.244   Eq9_3(g4,CCGT,COA)
       -0.244   Eq9_3(g4,GT,COA)
       -0.244   Eq9_3(g4,ST,COA)
       -0.244   Eq9_3(g4,Nuclear,COA)

REMAINING 33 ENTRIES SKIPPED

---- price  energy price in USD per MWh

price(COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq1(COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s1,s1)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s1)
        1       Eq9_4(fringe,East,EOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(fringe,west,COA,WOA,winter,l1,s1,s1)
        1       Eq9_4(fringe,west,WOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s1,s1)
        1       Eq9_4(g1,East,EOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g1,west,COA,WOA,winter,l1,s1,s1)
        1       Eq9_4(g1,west,WOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s1,s1)
        1       Eq9_4(g2,East,EOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g2,west,COA,WOA,winter,l1,s1,s1)
        1       Eq9_4(g2,west,WOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s1,s1)
        1       Eq9_4(g3,East,EOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g3,west,COA,WOA,winter,l1,s1,s1)
        1       Eq9_4(g3,west,WOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s1,s1)
        1       Eq9_4(g4,East,EOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g4,west,COA,WOA,winter,l1,s1,s1)
        1       Eq9_4(g4,west,WOA,COA,winter,l1,s1,s1)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s1)
        1       Eq10_1(East,EOA,COA,winter,l1,s1,s1)
       -1       Eq10_1(west,COA,WOA,winter,l1,s1,s1)
        1       Eq10_1(west,WOA,COA,winter,l1,s1,s1)

price(COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq1(COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s1,s2)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s2)
        1       Eq9_4(fringe,East,EOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(fringe,west,COA,WOA,winter,l1,s1,s2)
        1       Eq9_4(fringe,west,WOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s1,s2)
        1       Eq9_4(g1,East,EOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g1,west,COA,WOA,winter,l1,s1,s2)
        1       Eq9_4(g1,west,WOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s1,s2)
        1       Eq9_4(g2,East,EOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g2,west,COA,WOA,winter,l1,s1,s2)
        1       Eq9_4(g2,west,WOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s1,s2)
        1       Eq9_4(g3,East,EOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g3,west,COA,WOA,winter,l1,s1,s2)
        1       Eq9_4(g3,west,WOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s1,s2)
        1       Eq9_4(g4,East,EOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g4,west,COA,WOA,winter,l1,s1,s2)
        1       Eq9_4(g4,west,WOA,COA,winter,l1,s1,s2)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s2)
        1       Eq10_1(East,EOA,COA,winter,l1,s1,s2)
       -1       Eq10_1(west,COA,WOA,winter,l1,s1,s2)
        1       Eq10_1(west,WOA,COA,winter,l1,s1,s2)

price(COA,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq1(COA,winter,l1,s1,s3)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s3)
        1       Eq9_1(fringe,GT,COA,winter,l1,s1,s3)
        1       Eq9_1(fringe,ST,COA,winter,l1,s1,s3)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s1,s3)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s1,s3)
        1       Eq9_1(g1,GT,COA,winter,l1,s1,s3)
        1       Eq9_1(g1,ST,COA,winter,l1,s1,s3)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s1,s3)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s1,s3)
        1       Eq9_1(g2,GT,COA,winter,l1,s1,s3)
        1       Eq9_1(g2,ST,COA,winter,l1,s1,s3)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s1,s3)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s1,s3)
        1       Eq9_1(g3,GT,COA,winter,l1,s1,s3)
        1       Eq9_1(g3,ST,COA,winter,l1,s1,s3)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s1,s3)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s1,s3)
        1       Eq9_1(g4,GT,COA,winter,l1,s1,s3)
        1       Eq9_1(g4,ST,COA,winter,l1,s1,s3)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s1,s3)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s3)
        1       Eq9_4(fringe,East,EOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(fringe,west,COA,WOA,winter,l1,s1,s3)
        1       Eq9_4(fringe,west,WOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s1,s3)
        1       Eq9_4(g1,East,EOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g1,west,COA,WOA,winter,l1,s1,s3)
        1       Eq9_4(g1,west,WOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s1,s3)
        1       Eq9_4(g2,East,EOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g2,west,COA,WOA,winter,l1,s1,s3)
        1       Eq9_4(g2,west,WOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s1,s3)
        1       Eq9_4(g3,East,EOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g3,west,COA,WOA,winter,l1,s1,s3)
        1       Eq9_4(g3,west,WOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s1,s3)
        1       Eq9_4(g4,East,EOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g4,west,COA,WOA,winter,l1,s1,s3)
        1       Eq9_4(g4,west,WOA,COA,winter,l1,s1,s3)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s3)
        1       Eq10_1(East,EOA,COA,winter,l1,s1,s3)
       -1       Eq10_1(west,COA,WOA,winter,l1,s1,s3)
        1       Eq10_1(west,WOA,COA,winter,l1,s1,s3)

REMAINING 861 ENTRIES SKIPPED

---- price_trans  tranmission price in USD per MWh

price_trans(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s1)
       -1       Eq9_4(fringe,East,EOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s1,s1)
       -1       Eq9_4(g1,East,EOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s1,s1)
       -1       Eq9_4(g2,East,EOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s1,s1)
       -1       Eq9_4(g3,East,EOA,COA,winter,l1,s1,s1)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s1,s1)
       -1       Eq9_4(g4,East,EOA,COA,winter,l1,s1,s1)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s1)
       -1       Eq10_1(East,EOA,COA,winter,l1,s1,s1)
        1       Eq11_1(East,winter,l1,s1,s1)

price_trans(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s2)
       -1       Eq9_4(fringe,East,EOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s1,s2)
       -1       Eq9_4(g1,East,EOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s1,s2)
       -1       Eq9_4(g2,East,EOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s1,s2)
       -1       Eq9_4(g3,East,EOA,COA,winter,l1,s1,s2)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s1,s2)
       -1       Eq9_4(g4,East,EOA,COA,winter,l1,s1,s2)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s2)
       -1       Eq10_1(East,EOA,COA,winter,l1,s1,s2)
        1       Eq11_1(East,winter,l1,s1,s2)

price_trans(East,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s3)
       -1       Eq9_4(fringe,East,EOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s1,s3)
       -1       Eq9_4(g1,East,EOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s1,s3)
       -1       Eq9_4(g2,East,EOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s1,s3)
       -1       Eq9_4(g3,East,EOA,COA,winter,l1,s1,s3)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s1,s3)
       -1       Eq9_4(g4,East,EOA,COA,winter,l1,s1,s3)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s3)
       -1       Eq10_1(East,EOA,COA,winter,l1,s1,s3)
        1       Eq11_1(East,winter,l1,s1,s3)

REMAINING 645 ENTRIES SKIPPED

---- alpha  shadow prices for the non-negative investment constraints in USD per  MW

alpha(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_2(fringe,CCGT,COA)

alpha(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_2(fringe,CCGT,EOA)

alpha(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_2(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- eta_high  shadow prices for the capacity retirment constraint in USD per  MW

eta_high(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_3(fringe,CCGT,COA)

eta_high(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_3(fringe,CCGT,EOA)

eta_high(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_3(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- eta_low  

eta_low(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_3(fringe,CCGT,COA)

eta_low(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_3(fringe,CCGT,EOA)

eta_low(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_3(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- arbitrage  TSO outgoing electricity arbitrage from node r on line n

arbitrage(East,COA,EOA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      -58.7064  Eq1(COA,winter,l1,s1,s1)
       39.9564  Eq1(EOA,winter,l1,s1,s1)
       (1)      Eq11_3(East,winter,l1,s1,s1)
        1       Eq_arb(East,COA,EOA,winter,l1,s1,s1)

arbitrage(East,COA,EOA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      -72.0425  Eq1(COA,winter,l1,s1,s2)
       49.0331  Eq1(EOA,winter,l1,s1,s2)
       (1)      Eq11_3(East,winter,l1,s1,s2)
        1       Eq_arb(East,COA,EOA,winter,l1,s1,s2)

arbitrage(East,COA,EOA,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      -72.0425  Eq1(COA,winter,l1,s1,s3)
       49.0331  Eq1(EOA,winter,l1,s1,s3)
       (1)      Eq11_3(East,winter,l1,s1,s3)
        1       Eq_arb(East,COA,EOA,winter,l1,s1,s3)

REMAINING 1293 ENTRIES SKIPPED

---- trade  outgoing electricity trade by firm i from node r on line n

trade(fringe,East,COA,EOA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_8(fringe,COA,winter,l1,s1,s1)
       -1       Eq9_8(fringe,EOA,winter,l1,s1,s1)
       (1)      Eq11_3(East,winter,l1,s1,s1)
        1       Eq_trade(fringe,East,COA,EOA,winter,l1,s1,s1)

trade(fringe,East,COA,EOA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_8(fringe,COA,winter,l1,s1,s2)
       -1       Eq9_8(fringe,EOA,winter,l1,s1,s2)
       (1)      Eq11_3(East,winter,l1,s1,s2)
        1       Eq_trade(fringe,East,COA,EOA,winter,l1,s1,s2)

trade(fringe,East,COA,EOA,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_8(fringe,COA,winter,l1,s1,s3)
       -1       Eq9_8(fringe,EOA,winter,l1,s1,s3)
       (1)      Eq11_3(East,winter,l1,s1,s3)
        1       Eq_trade(fringe,East,COA,EOA,winter,l1,s1,s3)

REMAINING 6477 ENTRIES SKIPPED

---- trans  electricity trans by on line n

trans(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq11_2(East,winter,l1,s1,s1)
        1       Eq11_3(East,winter,l1,s1,s1)

trans(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq11_2(East,winter,l1,s1,s2)
        1       Eq11_3(East,winter,l1,s1,s2)

trans(East,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq11_2(East,winter,l1,s1,s3)
        1       Eq11_3(East,winter,l1,s1,s3)

REMAINING 645 ENTRIES SKIPPED

---- tau  shadow prices for the high capacity constraint in USD per MW

tau(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2.0492  Eq11_1(East,winter,l1,s1,s1)

tau(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2.0492  Eq11_1(East,winter,l1,s1,s2)

tau(East,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2.0492  Eq11_1(East,winter,l1,s1,s3)

REMAINING 645 ENTRIES SKIPPED

---- zeta  shadow prices for the outgoing no-negative trade constraint in USD per MW

zeta(fringe,East,COA,EOA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s1)

zeta(fringe,East,COA,EOA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s2)

zeta(fringe,East,COA,EOA,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1,s3)

REMAINING 6477 ENTRIES SKIPPED

---- shadows_arbitrage  shadow prices for no-negative incoming arbitrage constriant in USD per MW

shadows_arbitrage(East,COA,EOA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s1,s1)

shadows_arbitrage(East,COA,EOA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s1,s2)

shadows_arbitrage(East,COA,EOA,winter,l1,s1,s3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s1,s3)

REMAINING 1293 ENTRIES SKIPPED
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/19/16 16:51:27 Page 6
Dynamic Programming Investment
Model Statistics    SOLVE CMO Using MCP From line 728


MODEL STATISTICS

BLOCKS OF EQUATIONS          19     SINGLE EQUATIONS       75,036
BLOCKS OF VARIABLES          19     SINGLE VARIABLES       75,036
NON ZERO ELEMENTS       256,212     NON LINEAR N-Z          7,776
DERIVATIVE POOL              10     CONSTANT POOL              16
CODE LENGTH              10,368


GENERATION TIME      =        0.312 SECONDS     33 MB  24.1.3 r41464 WEX-WEI


EXECUTION TIME       =        0.781 SECONDS     33 MB  24.1.3 r41464 WEX-WEI
