GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/24/16 10:03:39 Page 1
Dynamic Programming Investment
C o m p i l a t i o n


       
   5   
   6  *$INCLUDE ACCESS_HLC.gms
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Macros.gms
   8  ********************************************************************************
   9  *        MACROS for KEM
  10  ********************************************************************************
  11   
  12  *        Time dependant discount factor
  13  $MACRO   discfact(i,t)                   1/(1+i)**(ord(t)-1)
  14   
  15  *        sum of discount factors over lifetime T of capital
  16  $MACRO   sumdiscfact(T,i,n)              sum(n$(ord(n)<=T),discfact(i,n))
  17   
  18  *        Numerator of discounting coefficients
  19  *        Accounts for recursive dynmic solves when size of t greater than tt
  20  *        Consider final time period of tt to be a long term static solution
  21  $MACRO   intdiscfact(i,t,tt) sum(tt$(ord(tt)>=ord(t)),1/(1+i)**(ord(tt)-ord(t)))
  22   
  23  $MACRO   discounting(Time,i,n,t,tt)    intdiscfact(i,t,tt)/sumdiscfact(Time,i,n)
  24   
  25  * Solar position equations used for CSP implementation (Parameters described in power sub-model):
  26  * the parameter table "Dayofyear" in the power sub-model.
  27  * long and lat are specificed in power sub-model for each region;
  28   
  29  $MACRO   earthpos(Dayofyear)            ((Dayofyear-1)*360/365)
  30   
  31  $MACRO   EOT(Dayofyear)                  (229.2*(0.000075+0.001868*COS(earthpos(Dayofyear)*pi/180)-0.032077*SIN(earthpos(Dayofyear)*pi/180)-0.014615*COS(2*(earthpos(Dayofyear)*pi/180))-0.04089*S
      IN(2*(earthpos(Dayofyear)*pi/180))))
  32   
  33  $MACRO   solhr(hr,Dayofyear,long,tzone)       (((1$(frac(hr/24)=0)+frac(hr/24))*24*60-(long-tzone)*4+EOT(Dayofyear)))/60
  34  $MACRO   hourangle(solhour)                   (solhour-12)*360/24
  35   
  36  $MACRO   soldecl(Dayofyear)              (0.3963723-22.9132745*COS(earthpos(Dayofyear)*pi/180)+4.0254304*SIN(earthpos(Dayofyear)*pi/180)-0.387205*COS(2*earthpos(Dayofyear)*pi/180)+0.05196728*SIN
      (2*earthpos(Dayofyear)*pi/180)-0.1545267*COS(3*earthpos(Dayofyear)*pi/180)+0.0847977*SIN(3*earthpos(Dayofyear)*pi/180))
  37  $MACRO   solalt(hrangle,solardeclination,lat)   (arcsin(COS(lat*pi/180)*COS(hrangle*pi/180)*COS(solardeclination*pi/180)+SIN(lat*pi/180)*SIN(solardeclination*pi/180))*180/pi)
  38  $MACRO   solazim(hrangle,solardeclination,lat,solaralt)  (180/pi*arccos((SIN(solardeclination*pi/180)*COS(lat*pi/180)-COS(solardeclination*pi/180)*SIN(lat*pi/180)*COS(hrangle*pi/180))/COS(solara
      lt*pi/180)))
  39  $MACRO   Gamma(solarazimuth,surfaceazimuth)  (ABS(solarazimuth-surfaceazimuth))
  40   
  41   
  42  $MACRO   Incidence(solaralt,gammaa,orientation)    (180/pi*arccos(COS(solaralt*pi/180)*COS(gammaa*pi/180)*SIN(orientation*pi/180)+SIN(solaralt*pi/180)*COS(orientation*pi/180)))
  43  *orientation is the tilt angle of the surface, 0 for horizontal surfaces and 90 degrees for vertical surfaces.
  44   
FUNCLIBIN  stolib stodclib
Function Library stolib
Random deviates, probability density function, cumulative distribution function, inverse cumulative distribution function
GAMS Development Corporation

Mod. Function                          Description
Type

none SetSeed(SEED)                     Define the seed for random number gen
none dUniform(LOW,HIGH)                Uniform distribution
DNLP pdfUniform(x,LOW,HIGH)            Probability density function for uniform distribution
DNLP cdfUniform(x,LOW,HIGH)            Cumulative distribution function for uniform distribution
DNLP icdfUniform(x,LOW,HIGH)           Inverse cumulative distribution function for uniform distribution
none dNormal(MEAN,STD_DEV)             Normal distribution
DNLP pdfNormal(x,MEAN,STD_DEV)         Probability density function for normal distribution
DNLP cdfNormal(x,MEAN,STD_DEV)         Cumulative distribution function for normal distribution
DNLP icdfNormal(x,MEAN,STD_DEV)        Inverse cumulative distribution function for normal distribution
none dInvGaussian(MEAN,SHAPE)          Inverse Gaussian distribution
DNLP pdfInvGaussian(x,MEAN,SHAPE)      Probability density function for inverse Gaussian distribution
DNLP cdfInvGaussian(x,MEAN,SHAPE)      Cumulative distribution function for inverse Gaussian distribution
DNLP icdfInvGaussian(x,MEAN,SHAPE)     Inverse cumulative distribution function for inverse Gaussian distribution
none dRayleigh(SIGMA)                  Rayleigh distribution
DNLP pdfRayleigh(x,SIGMA)              Probability density function for Rayleigh distribution
DNLP cdfRayleigh(x,SIGMA)              Cumulative distribution function for Rayleigh distribution
DNLP icdfRayleigh(x,SIGMA)             Inverse cumulative distribution function for Rayleigh distribution
none dCauchy(LOCATION,SCALE)           Cauchy distribution
DNLP pdfCauchy(x,LOCATION,SCALE)       Probability density function for Cauchy distribution
DNLP cdfCauchy(x,LOCATION,SCALE)       Cumulative distribution function for Cauchy distribution
DNLP icdfCauchy(x,LOCATION,SCALE)      Inverse cumulative distribution function for Cauchy distribution
none dLognormal(MEAN,STD_DEV)          Lognormal distribution
DNLP pdfLognormal(x,MEAN,STD_DEV)      Probability density function for Lognormal distribution
DNLP cdfLognormal(x,MEAN,STD_DEV)      Cumulative distribution function for Lognormal distribution
DNLP icdfLognormal(x,MEAN,STD_DEV)     Inverse cumulative distribution function for Lognormal distribution
none dExponential(LAMBDA)              Exponential distribution
DNLP pdfExponential(x,LAMBDA)          Probability density function for Exponential distribution
DNLP cdfExponential(x,LAMBDA)          Cumulative distribution function for Exponential distribution
DNLP icdfExponential(x,LAMBDA)         Inverse cumulative distribution function for Exponential distribution
none dLogistic(LOCATION,SCALE)         Logistic distribution
DNLP pdfLogistic(x,LOCATION,SCALE)     Probability density function for Logistic distribution
DNLP cdfLogistic(x,LOCATION,SCALE)     Cumulative distribution function for Logistic distribution
DNLP icdfLogistic(x,LOCATION,SCALE)    Inverse cumulative distribution function for Logistic distribution
none dGamma(SHAPE,SCALE)               Gamma distribution
DNLP pdfGamma(x,SHAPE,SCALE)           Probability density function for Gamma distribution
DNLP cdfGamma(x,SHAPE,SCALE)           Cumulative distribution function for Gamma distribution
DNLP icdfGamma(x,SHAPE,SCALE)          Inverse cumulative distribution function for Gamma distribution
none dChiSquare(DF)                    Chi square distribution
none DF(DF_1,DF_2)                     F distribution
DNLP pdfChiSquare(x,DF)                Probability density function for Chi square distribution
DNLP cdfChiSquare(x,DF)                Cumulative distribution function for Chi square distribution
DNLP icdfChiSquare(x,DF)               Inverse cumulative distribution function for Chi square distribution
none dWeibull(SHAPE,SCALE)             Weibull distribution
DNLP pdfWeibull(x,SHAPE,SCALE)         Probability density function for Weibull distribution
DNLP cdfWeibull(x,SHAPE,SCALE)         Cumulative distribution function for Weibull distribution
DNLP icdfWeibull(x,SHAPE,SCALE)        Inverse cumulative distribution function for Weibull distribution
none dBeta(SHAPE_1,SHAPE_2)            Beta distribution
DNLP pdfBeta(x,SHAPE_1,SHAPE_2)        Probability density function for Beta distribution
DNLP cdfBeta(x,SHAPE_1,SHAPE_2)        Cumulative distribution function for Beta distribution
DNLP icdfBeta(x,SHAPE_1,SHAPE_2)       Inverse cumulative distribution function for Beta distribution
DNLP pdfF(x,DF_1,DF_2)                 Probability density function for F distribution
DNLP cdfF(x,DF_1,DF_2)                 Cumulative distribution function for F distribution
DNLP icdfF(x,DF_1,DF_2)                Inverse cumulative distribution function for F distribution
none dStudentT(DF)                     Students T distribution
DNLP pdfStudentT(x,DF)                 Probability density function for Students T distribution
DNLP cdfStudentT(x,DF)                 Cumulative distribution function for Students T distribution
DNLP icdfStudentT(x,DF)                Inverse cumulative distribution function for Students T distribution
none dPareto(SCALE,SHAPE)              Pareto distribution
DNLP pdfPareto(x,SCALE,SHAPE)          Probability density function for Pareto distribution
DNLP cdfPareto(x,SCALE,SHAPE)          Cumulative distribution function for Pareto distribution
DNLP icdfPareto(x,SCALE,SHAPE)         Inverse cumulative distribution function for Pareto distribution
none dGumbel(LOCATION,SCALE)           Gumbel distribution
DNLP pdfGumbel(x,LOCATION,SCALE)       Probability density function for Gumbel distribution
DNLP cdfGumbel(x,LOCATION,SCALE)       Cumulative distribution function for Gumbel distribution
DNLP icdfGumbel(x,LOCATION,SCALE)      Inverse cumulative distribution function for Gumbel distribution
none dLaplace(MEAN,SCALE)              Laplace distribution
DNLP pdfLaplace(x,MEAN,SCALE)          Probability density function for Laplace distribution
DNLP cdfLaplace(x,MEAN,SCALE)          Cumulative distribution function for Laplace distribution
DNLP icdfLaplace(x,MEAN,SCALE)         Inverse cumulative distribution function for Laplace distribution
none dTriangular(LOW,MID,HIGH)         Triangular distribution
DNLP pdfTriangular(x,LOW,MID,HIGH)     Probability density function for Triangular distribution
DNLP cdfTriangular(x,LOW,MID,HIGH)     Cumulative distribution function for Triangular distribution
DNLP icdfTriangular(x,LOW,MID,HIGH)    Inverse cumulative distribution function for Triangular distribution
none dUniformInt(LOW,HIGH)             Uniform integer distribution
none pdfUniformInt(x,LOW,HIGH)         Probability density function for Uniform integer distribution
none cdfUniformInt(x,LOW,HIGH)         Cumulative distribution function for Uniform integer distribution
none icdfUniformInt(x,LOW,HIGH)        Inverse cumulative distribution function for Uniform integer distribution
none dBinomial(N,P)                    Binomial distribution
none pdfBinomial(x,N,P)                Probability density function for Binomial distribution
none cdfBinomial(x,N,P)                Cumulative distribution function for Binomial distribution
none icdfBinomial(x,N,P)               Inverse cumulative distribution function for Binomial distribution
none dNegBinomial(FAILURES,P)          Negative Binomial distribution
none pdfNegBinomial(x,FAILURES,P)      Probability density function for Negative Binomial distribution
none cdfNegBinomial(x,FAILURES,P)      Cumulative distribution function for Negative Binomial distribution
none icdfNegBinomial(x,FAILURES,P)     Inverse cumulative distribution function for Negative Binomial distribution
none dGeometric(P)                     Geometric distribution
none pdfGeometric(x,P)                 Probability density function for Geometric distribution
none cdfGeometric(x,P)                 Cumulative distribution function for Geometric distribution
none icdfGeometric(x,P)                Inverse cumulative distribution function for Geometric distribution
none dHyperGeo(TOTAL,GOOD,TRIALS)      HyperGeometric distribution
none pdfHyperGeo(x,TOTAL,GOOD,TRIALS)  Probability density function for HyperGeometric distribution
none cdfHyperGeo(x,TOTAL,GOOD,TRIALS)  Cumulative distribution function for HyperGeometric distribution
none icdfHyperGeo(x,TOTAL,GOOD,TRIALS) Inverse cumulative distribution function for HyperGeometric distribution
none dLogarithmic(P-FACTOR)            Logarithmic distribution
none pdfLogarithmic(x,P-FACTOR)        Probability density function for Logarithmic distribution
none cdfLogarithmic(x,P-FACTOR)        Cumulative distribution function for Logarithmic distribution
none icdfLogarithmic(x,P-FACTOR)       Inverse cumulative distribution function for Logarithmic distribution
none dPoisson(LAMBDA)                  Poisson distribution
none pdfPoisson(x,LAMBDA)              Probability density function for Poisson distribution
none cdfPoisson(x,LAMBDA)              Cumulative distribution function for Poisson distribution
none icdfPoisson(x,LAMBDA)             Inverse cumulative distribution function for Poisson distribution

  46  function cdfnorm     /stolib.cdfnormal/;
  47   
  48  scalar trading set to 1 to allow regional trade by firms /0/;
  49   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\SetsAndVariables.gms
  51  Sets i generators       /fringe, g1*g4/
  52       h technology       /CCGT, GT, ST, Nuclear/
  53       l market segment   /l1*l8/
  54       seasons  /winter,summer,spring-fall/
  55  *     e(seasons) seasons for running the model /summer/
  56       e(seasons) seasons for running the model /winter,summer,spring-fall/
  57       winter(seasons) /winter/
  58       spring(seasons) /spring-fall/
  59       summer(seasons) /summer/
  60       fall(seasons) /spring-fall/
  61   
  62       m(l) capacity market /l5,l6,l7/
  63       s scenarios        /s1*s4/
  64       ss(s)                  /s1*s2/
  65       r regions          /COA,EOA,SOA,WOA/
  66       n power_lines      /East,South,west/
  67                                           ;
  68   
  69  *     m(l) = no;
  70   
  71   
  72  Alias (h,hh), (i,j), (m,mm), (r,rr);
  73   
  74  alias (l,ll), (i,ii), (h,hh), (r,rr,rrr), (e,ee)
  75  *(s,ss)
  76  ;
  77   
  78  variables
  79           inv(i,h,r)  investment by player i in technology h
  80           ret(i,h,r)  retirement of technology h in region r by player i
  81   
  82           Cap_avail(i,h,r) available capacity of player i of technolgy h in region r in MW
  83           Q(i,h,r,seasons,l,s,ss)  generation quantity from a player i at market l in scenario in MW
  84           sales(i,r,seasons,l,s,ss) sales of firm in region r market l scenario s in MW
  85           lambda_high(i,h,r,seasons,l,s,ss) shadow prices for the high capacity constraint in USD per  MWh
  86           lambda_low(i,h,r,seasons,l,s,ss)  shadows prices for low constraint in USD per  MWh
  87           delta(r,seasons,l)   shadow prices for the capacity market in USD per  MW per hour
  88           price(r,seasons,l,s,ss) energy price in USD per MWh
  89           price_trans(n,seasons,l,s,ss) tranmission price in USD per MWh
  90           price_trans_pos(n,seasons,l,s,ss) tranmission price in USD per MWh
  91           price_trans_neg(n,seasons,l,s,ss) tranmission price in USD per MWh
  92           alpha(i,h,r) shadow prices for the non-negative investment constraints in USD per  MW
  93           eta_high(i,h,r) shadow prices for the capacity retirment constraint in USD per  MW
  94           eta_low(i,h,r)
  95   
  96           arbitrage(n,r,rr,seasons,l,s,ss) TSO outgoing electricity arbitrage from node r on line n
  97           trade(i,n,r,rr,seasons,l,s,ss) outgoing electricity trade by firm i from node r on line n
  98           trans(n,seasons,l,s,ss) electricity trans by on line n
  99   
 100           tau(n,seasons,l,s,ss) shadow prices for the high capacity constraint in USD per MW
 101           zeta(i,n,r,rr,seasons,l,s,ss) shadow prices for the outgoing no-negative trade constraint in USD per MW
 102           shadows_arbitrage(n,r,rr,seasons,l,s,ss) shadow prices for no-negative incoming arbitrage constriant in USD per MW
 103           shadows_trans(n,seasons,l,s,ss) shadow prices for the positive transmission constriant in USD per MW
 104            ;
 105   
 106  positive variables lambda_high, lambda_low,  alpha,
 107                     eta_high,eta_low, psi
 108                     tau,zeta,shadows_arbitrage,shadows_trans
 109                     ;
 110   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Demand.gms
 112  *$INCLUDE ACCESS_HLC.gms
 114   
 115  set hrs            hours in the load curve data set /1*8760/
 116  parameter HLC(r,hrs) hourly load curves for represenative day in each month in MW
 117  parameter ELlcgw(r,seasons,l) average power demand load blocks in MW
 118            ELlcgw_stddev(r,seasons,l) variance power demand load blocks in MW
 119            EL_demand(r,e,l,s,ss) Stochastic Electricity Demand for scenarios s in GW
 120            d(e,l) duration of segemt l in region r (deterministic)
 121            prob(r,e,l,s,ss) probability off each scenario
 122  ;
GDXIN   D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\db\load.gdx
--- LOAD  HLC = 1:HLC
 126   
 127   
 128   
 129  parameter day(hrs)    day for each hour in a year
 130            hour(hrs) represents each hour in the hourly demand data year from 0 to 23
 131  ;
 132   
 133   
 134            day(hrs) = floor(ord(hrs)/24)+1;
 135            day('8760') = 1;
 136   
 137   
 138            hour(hrs)=ord(hrs)-(day(hrs)-1)*24
 139   
 140  table duration(seasons,l) duration of segemt l in region r and season e
 141   
 142  * these are the hour blocks used to average the actual hourly demand patterns
 143  * must sum to 24
 144  *$ontext
 145                                   l1  l2  l3  l4  l5  l6  l7  l8
 146  (winter,spring-fall,summer)       4   4   4   2   3   2   2   3
 147  *$offtext
 148   
 149  *                                 l1  l2
 150  *(winter,spring-fall,summer)      12  12
 151   ;
 152   
 153   parameter block_start(seasons,l) start hour for hour in load block l
 154             block_end(seasons,l);
 155   
 156   block_start(seasons,l) = sum(ll$(ord(ll)<ord(l)),duration(seasons,ll));
 157   block_end(seasons,l) = sum(ll$(ord(ll)<=ord(l)),duration(seasons,ll));
 158   
 159  parameter start_day(seasons) first day to sample hourly data from for season e
 160   
 161  /
 162  winter 304
 163  spring-fall 61
 164  summer 122
 165  /
 166            end_day(seasons) last day to sample hourlyy data for season e
 167   
 168   
 169  number_of_days(seasons)
 170         ;
 171  scalar
 172           start_day_fall first day to sample hourly data from for fall season /243/
 173           end_day_fall first day to sample hourly data from
 174   
 175   
 176   
 177   
 178  ;
 179  end_day('winter') = start_day('spring-fall')-1;
 180  end_day('spring-fall') = start_day('summer')-1;
 181  end_day('summer') = start_day_fall-1;
 182  end_day_fall = start_day('winter')-1;
 183   
 184  number_of_days(seasons)$(not winter(seasons)) = end_day(seasons)-start_day(seasons)+1;
 185  number_of_days('spring-fall') = number_of_days('spring-fall')+end_day_fall-start_day_fall+1;
 186  number_of_days('winter') = smax(hrs,day(hrs))-sum(seasons,number_of_days(seasons));
 187   
 188   
 189     duration(seasons,l)=duration(seasons,l)*number_of_days(seasons);
 190   
 191  ELlcgw(r,e,l) =
 192  sum(hrs$(
 193                  (        (day(hrs)>=start_day(e) and
 194                            day(hrs)<=end_day(e) and (spring(e) or summer(e)) ) or
 195   
 196                           (day(hrs)>=start_day_fall and
 197                            day(hrs)<=end_day_fall and fall(e)) or
 198   
 199                           ((day(hrs)>=start_day(e) or day(hrs)<=end_day(e)) and
 200                                   winter(e))
 201   
 202                  )and
 203                  hour(hrs)>=block_start(e,l) and
 204                  hour(hrs)<block_end(e,l)
 205           ), HLC(r,hrs))/(duration(e,l))
 206  ;
 207   
 208  ELlcgw_stddev(r,e,l) =
 209  sum(hrs$(
 210                  (        (day(hrs)>=start_day(e) and
 211                            day(hrs)<=end_day(e) and (spring(e) or summer(e)) ) or
 212   
 213                           (day(hrs)>=start_day_fall and
 214                            day(hrs)<=end_day_fall and fall(e)) or
 215   
 216                           ((day(hrs)>=start_day(e) or day(hrs)<=end_day(e)) and
 217                                   winter(e))
 218   
 219                  )and
 220                  hour(hrs)>=block_start(e,l) and
 221                  hour(hrs)<block_end(e,l)
 222           ), (HLC(r,hrs)-ELlcgw(r,e,l))*(HLC(r,hrs)-ELlcgw(r,e,l)) )/(duration(e,l))
 223  ;
 224  ELlcgw_stddev(r,e,l) = sqrt(ELlcgw_stddev(r,e,l));
 225   
 226  if(card(e)=1 ,
 227  duration(e,l)$(card(e)=1)=duration(e,l)*365/number_of_days(e);
 228   
 229  );
 230   
 231   
 232  scalar random, mean, stddev;
 233  mean = 1;
 234  stddev =0.2;
 235   
 236  parameter CDF_lo(r,e,l), CDF_hi(r,e,l), diff(r,e,l), CDF_alpha(r,e,l), CDF_beta(r,e,l), Z_cdf(r,e,l), X_cdf(r,e,l,s);
 237  parameter CDF_x(r,e,l,s) cumulative distribution functions for each scenario s;
 238   
 239   
 240   
 241   
 242  *        apply growth equally to all demand segments
 243  *        Rescale demand to GW
 244  *        Rescale duration such taht energy is in units of TWH
 245  *        Marginal costs should be in units of MMUSD/TWH
 246   
 247           EL_Demand(r,e,l,s,ss) = ELlcgw(r,e,l)*1e-3;
 248           d(e,l) = duration(e,l)*1e-3;
 249           ;
 250   
 251           CDF_lo(r,e,l)=ELlcgw(r,e,l)-ELlcgw_stddev(r,e,l)*2;
 252           CDF_hi(r,e,l)=ELlcgw(r,e,l)+ELlcgw_stddev(r,e,l)*2;
 253   
 254           diff(r,e,l) = CDF_hi(r,e,l) -CDF_lo(r,e,l);
 255   
 256           CDF_alpha(r,e,l) = cdfnorm(CDF_lo(r,e,l),ELlcgw(r,e,l),ELlcgw_stddev(r,e,l));
 257           CDF_beta(r,e,l) =  cdfnorm(CDF_hi(r,e,l),ELlcgw(r,e,l),ELlcgw_stddev(r,e,l));
 258           Z_cdf(r,e,l)=CDF_beta(r,e,l)-CDF_alpha(r,e,l);
 259           prob(r,e,l,s,ss)=0;
 260           CDF_x(r,e,l,s)=0;
 261   
 262  loop(s$(ord(s)<=card(s)),
 263   
 264           X_cdf(r,e,l,s)=CDF_lo(r,e,l)+ord(s)*diff(r,e,l)/card(s);
 265           CDF_x(r,e,l,s)= (cdfnorm(X_cdf(r,e,l,s),ELlcgw(r,e,l),ELlcgw_stddev(r,e,l))-CDF_alpha(r,e,l))/Z_cdf(r,e,l);
 266           prob(r,e,l,s,ss) = CDF_x(r,e,l,s) - CDF_x(r,e,l,s-1);
 267           X_cdf(r,e,l,s)=X_cdf(r,e,l,s)-(diff(r,e,l)/(2*card(s)))$(card(s)>1);
 268           EL_Demand(r,e,l,s,ss)= X_cdf(r,e,l,s);
 269  );
 270   
 271  *abort prob,EL_Demand,CDF_x,x_cdf
 272   
 273   
 274   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\parameters.gms
 276  Parameters
 277             v(i)   CONJECTURAL VARIANTION for production by player /g1 0, g2 0, g3 0, g4 0, fringe -1/
 278             z(i)   CONJECTURAL VARIANTION for capacity by player /g1 0, g2 0, g3 0, g4 0, fringe -1/
 279   
 280   
 281             capital_cost(h) Capital cost in USD per GW /CCGT 1740, GT 1485, ST 2120, Nuclear 4896/
 282             ic(h)  investment cost USD per GW
 283             om(h) Fixed O&M cost USD per GW  /GT 11.2, CCGT 12.4, ST 11.2, Nuclear 68.8/
 284             K0(h,r) existent capacity of technology h in region r before liberalization
 285             kind0(i,h,r) initial capacity by technology and firm in each region in GW
 286             K(r,l) minimum installed capacity available to sell in region r and market segment l
 287  *           EL_demand(r,e,l,s,ss) Electricity Demand GW
 288  *           d(e,l) duration of segemt l in region r (deterministic)
 289  *           prob(s,ss) probability off each scenario
 290   
 291  *Design operating life for steam, GT, and CC from KFUPM generation report.
 292             lifetime(h) plant lifetime /CCGT 30, GT 25, ST 35, Nuclear 60/
 293             discrate discount rate used for power plant investments /0.06/
 294   
 295   
 296   
 297  ;
 298   
 299           parameter discoef;
 300           set t dummy time set /2020/
 301           set index /1*1000/
 302               tt(t) /2020/
 303           ;
 304   
 305  *        Discounting plant capital costs over lifetime
 306           discoef(h,t) = sum(tt$(ord(tt)>=ord(t)),1/(1+discrate)**(ord(tt)-ord(t)))/sum(index$(ord(index)<=lifetime(h)),1/(1+discrate)**(ord(index)-1));
 307   
 308           ic(h)=capital_cost(h)*discoef(h,'2020');
 309   
 310   
 311  Parameters ici(h)  investment cost
 312             icr(h)  retirement capacity cost;
 313   
 314  ici(h) = ic(h)
 315  ;
 316  icr(h) = ic(h)*0.1;
 317  *icr(h) = 0;
 318   
 319   
 320   
 321  parameter mc(h,r,s,ss) marginal cost in USD per MWh  ;
 322   
 323  mc('CCGT',r,s,ss)  = 1.2449 ;
 324  mc('CCGT','EOA',s,ss)  = 1.1833 ;
 325  mc('GT',r,s,ss) =  1.6840;
 326  mc('ST',r,s,ss) =  1.2261;
 327  mc('Nuclear',r,s,ss) = 6.9;
 328  *mc('ULtrsc',r,s,ss)  = 1.2449
 329   
 330   
 331  * Uranium-235 use is in g/GWh
 332  parameter heat_rate(h) fueal burn rate in mmbtu and KG per MWH
 333  /
 334  CCGT               6.09286
 335  GT                 10.000
 336  ST                 8.949
 337  Nuclear            0.120
 338  *Ultrsc              1.217
 339  /
 340  ;
 341   
 342   
 343  parameter fuel_price(h) price of fuels in USD per mmbtu and KG U235
 344  /
 345  CCGT               1.25
 346  GT                 1.25
 347  ST                 1.25
 348  Nuclear            113
 349  *Ultrsc             50
 350  /
 351  ;
 352   
 353  loop(s,
 354  mc(h,r,s,ss) = mc(h,r,s,ss)+heat_rate(h)*fuel_price(h)*1;
 355  *uniform(1,1)
 356  );
 357  ;
 358   
 359   
 360  parameter  beta(h,r,l) available capacity in market l
 361  ;
 362  beta(h,r,l)=1;
 363   
 364  Parameters  a(r,e,l,s,ss) intercept of energy demand curve,
 365              b(r,e,l,s,ss) slope of energy demand curve
 366              theta(r,e,l) intercept of capacity demand curve,
 367              xi(r,e,l) slope of capacity demand curve;
 368   
      Table K0(h,r)
            COA        EOA          SOA          WOA
      CCGT  1360.6     6496.37      0            9144.97
      GT    14185.3    9540.3       4113.14      9150.26
      ST    706        13252.8      1020         16399.2
      ;
       
      Table K0(h,r)
            COA   EOA   SOA   WOA
      CCGT  0     0     0     0
      GT    0     0     0     0
      ST    0     0     0     0
      ;
 384   
 385   
 386  table kind0(i,h,r) firms existing generation capacity in GW
 387   
 388                   COA             EOA             SOA             WOA
 389   
 390  g1.CCGT          1.3606          0               0               0
 391  g1.GT            13.0693         0               0               0
 392  g1.ST            0               0               0               0
 393   
 394  g2.CCGT          0               3.929           0               0
 395  g2.GT            0               5.8315          0               0
 396  g2.ST            0               6.756           0               0
 397   
 398  g3.CCGT          0               0               0               0
 399  g3.GT            0               0               4.11314         0
 400  g3.ST            0               0               0               0
 401   
 402  g4.CCGT          0               0               0               1.288
 403  g4.GT            0               0               0               8.5497
 404  g4.ST            0               0               0               9.8884
 405   
 406  fringe.CCGT      0               2.56737         0               0
 407  fringe.GT        1.116           3.7085          0               6.0056
 408  fringe.ST        0.706           6.4968          1.020           7.12936
 409  ;
 410   
 411  parameter kind_trans0(n) transmission capacity in GW
 412   /
 413           East    5.22
 414           South   1.5
 415           West    1.2
 416   /
 417        ;
 418  *WOA   0     1.16
 419   
 420  *Data for 2014 inter-regional transmission capacities were obtained from ECRA correspondence.
 421           parameter phi(n)  oper. and maint. cost of transmission in USD per MWH
 422           /
 423            West   3.71
 424            South  3.73
 425            East   3.78
 426           /
                      WOA   SOA     COA     EOA
               WOA   3.49   3.73    3.71    4.33
               SOA   3.73   3.49    4.10    4.50
               COA   3.71   4.1     3.49    3.78
               EOA   4.33   4.5     3.78    3.49
 434  ;
 435   
 436  Parameter capfactor(h) capacity factors for dispatchable plants
 437  /ST      0.885
 438   GT      0.923
 439   CCGT    0.885
 440   Nuclear 0.860
 441  /
 442   
 443   
 444   
 445  parameter  x(i,r,rr)   CONJECTURAL VARIANTION for electricity by player between region r and rr
 446  ;
 447  x(i,r,rr)=v(i);
 448   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\equations.gms
 450  set trans_node(n,r),trans_node_end(n,r);
 451   
 452  trans_node('WEST','WOA')=yes;
 453  trans_node_end('WEST','COA')=yes;
 454   
 455  trans_node('South','SOA')=yes;
 456  trans_node_end('South','WOA')=yes;
 457   
 458  trans_node('East','EOA')=yes;
 459  trans_node_end('East','COA')=yes;
 460   
 461   
 462  set r_trans(n,r,rr), r_trade(n,r,rr);
 463   
 464  r_trans(n,r,rr)$(trans_node(n,r) and trans_node_end(n,rr) and ord(r)<>ord(rr))=yes;
 465  r_trade(n,r,rr)$(r_trans(n,r,rr))=yes;
 466  r_trade(n,rr,r)$(r_trans(n,r,rr))=yes;
 467   
 468   
 469           trade.fx(i,n,r,rr,e,l,s,ss)$(trading<>1)=0;
 470  *         arbitrage.fx(r,rr,l,s,ss)=0;
 471   
 472  *        Fix capacity price
 473  *         delta.l(r,m) = 0;
 474   
 475  Equations
 476           Eq1(r,e,l,s,ss)              Equation (1)
 477           Eq2(r,e,l)                Equation (1)
 478           Eq9_1(i,h,r,e,l,s,ss)        Equation (8.1)
 479           Eq9_2(i,h,r)              Equation (8.2)
 480           Eq9_3(i,h,r)              Equation (8.3)
 481           Eq9_4(i,n,r,rr,e,l,s,ss)       Equation (8.4)
 482           Eq9_5(i,h,r,e,l,s,ss)
 483           Eq9_6(i,h,r)
 484           Eq9_7(i,h,r)
 485           Eq9_8(i,r,e,l,s,ss)
 486   
 487           Eq10_1(n,r,rr,e,l,s,ss)
 488   
 489           Eq11_1(n,e,l,s,ss)
 490           Eq11_2(n,e,l,s,ss)
 491           Eq11_3(n,e,l,s,ss)
 492           Eq11_4(n,e,l,s,ss)
 493           Eq11_5(n,e,l,s,ss)
 494   
 495           Eq_q(i,h,r,e,l,s,ss)
 496           Eq_inv(i,h,r)
 497           Eq_ret(i,h,r)
 498           Eq_trade(i,n,r,rr,e,l,s,ss)
 499           Eq_arb(n,r,rr,e,l,s,ss)
 500   
 501  ;
 502  Eq1(r,e,l,s,ss)..    price(r,e,l,s,ss)=e=
 503                       a(r,e,l,s,ss)-b(r,e,l,s,ss)*sum(j,sales(j,r,e,l,s,ss))
 504                       +b(r,e,l,s,ss)*(
 505                            sum((n,rr)$r_trade(n,r,rr),arbitrage(n,r,rr,e,l,s,ss))
 506                            -sum((n,rr)$r_trade(n,rr,r),arbitrage(n,rr,r,e,l,s,ss))
 507                       );
 508   
 509  Eq2(r,e,m) ..        delta(r,e,m)=e=theta(r,e,m)-xi(r,e,m)*sum((j,hh),beta(hh,r,m)*Cap_avail(j,hh,r));
 510   
 511  Eq9_1(i,h,r,e,l,s,ss) ..  price(r,e,l,s,ss)-mc(h,r,s,ss)-b(r,e,l,s,ss)*(1+v(i))*sales(i,r,e,l,s,ss)-lambda_high(i,h,r,e,l,s,ss)+lambda_low(i,h,r,e,l,s,ss)=e= 0 ;
 512  *
 513  Eq9_2(i,h,r)..       sum((e,m),d(e,m)*delta(r,e,m)*beta(h,r,m))
 514                      -sum((e,m),d(e,m)*xi(r,e,m)*(beta(h,r,m)+z(i))*sum(hh,beta(hh,r,m)*Cap_avail(i,hh,r)))
 515                       +sum((e,l,s,ss),prob(r,e,l,s,ss)*d(e,l)*lambda_high(i,h,r,e,l,s,ss)) +alpha(i,h,r) =e=ici(h)+om(h);
 516  *
 517   
 518  Eq9_3(i,h,r)..      -sum((e,m),d(e,m)*delta(r,e,m)*beta(h,r,m))
 519                      +sum((e,m),d(e,m)*xi(r,e,m)*(beta(h,r,m)+z(i))*sum(hh,beta(hh,r,m)*Cap_avail(i,hh,r)))
 520                      -sum((e,l,s,ss),prob(r,e,l,s,ss)*d(e,l)*lambda_high(i,h,r,e,l,s,ss))-eta_high(i,h,r)
 521                       +eta_low(i,h,r) =e= icr(h)-om(h);
 522  *
 523   
 524  Eq9_4(i,n,r,rr,e,l,s,ss)$(trading=1 and r_trade(n,r,rr))..
 525           price(rr,e,l,s,ss)-price(r,e,l,s,ss)+zeta(i,n,r,rr,e,l,s,ss)
 526           -price_trans(n,e,l,s,ss)
 527          +b(r,e,l,s,ss)*sales(i,r,e,l,s,ss)*(1+x(i,r,rr))
 528          -b(rr,e,l,s,ss)*sales(i,rr,e,l,s,ss)*(1+x(i,rr,r))
 529                   =e=0;
 530   
 531   
 532  Eq9_5(i,h,r,e,l,s,ss) ..  Cap_avail(i,h,r)-Q(i,h,r,e,l,s,ss)=g=0;
 533  Eq9_6(i,h,r)..         kind0(i,h,r) - ret(i,h,r)=g=0 ;
 534  Eq9_7(i,h,r)..         Cap_avail(i,h,r) =e= kind0(i,h,r)+inv(i,h,r)-ret(i,h,r);
 535   
 536  Eq9_8(i,r,e,l,s,ss)..     sales(i,r,e,l,s,ss)=e=
 537                           sum(h,Q(i,h,r,e,l,s,ss))
 538                         -sum((n,rr)$(r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s,ss))$(trading=1)
 539                         +sum((n,rr)$(r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s,ss))$(trading=1) ;
 540   
 541  Eq10_1(n,r,rr,e,l,s,ss)$r_trade(n,r,rr)..
 542           price(rr,e,l,s,ss)-price(r,e,l,s,ss)
 543           -price_trans(n,e,l,s,ss)
 544           +shadows_arbitrage(n,r,rr,e,l,s,ss)
 545                                   =e=0        ;
 546   
 547  Eq11_1(n,e,l,s,ss).. price_trans_pos(n,e,l,s,ss)+price_trans_neg(n,e,l,s,ss)$(trading=1)
 548                           -phi(n)-tau(n,e,l,s,ss)/d(e,l)
 549                           =e= 0;
 550   
 551  Eq11_2(n,e,l,s,ss)..
 552   
 553           trans(n,e,l,s,ss)=g=
 554           (
 555                   sum((i,r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s,ss))
 556                   -sum((i,r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s,ss))
 557                   +sum((r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s,ss))
 558                   -sum((r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),arbitrage(n,rr,r,e,l,s,ss))
 559             )$(trading=1)
 560             +sum((r,rr)$(r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s,ss))$(trading<>1)
 561           ;
 562   
 563   
 564  Eq11_3(n,e,l,s,ss)$(trading=1)..
 565   
 566           trans(n,e,l,s,ss)=g=
 567           -(
 568                   sum((i,r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s,ss))
 569                   -sum((i,r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s,ss))
 570                   +sum((r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s,ss))
 571                   -sum((r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),arbitrage(n,rr,r,e,l,s,ss))
 572             )
 573           ;
 574   
 575  Eq11_4(n,e,l,s,ss)..   kind_trans0(n)-trans(n,e,l,s,ss)=g=0;
 576   
 577   
 578  Eq11_5(n,e,l,s,ss)..   price_trans(n,e,l,s,ss)=e=
 579                           price_trans_pos(n,e,l,s,ss)+price_trans_neg(n,e,l,s,ss)$(trading=1);
 580   
 581   
 582   
 583  Eq_q(i,h,r,e,l,s,ss)        .. Q(i,h,r,e,l,s,ss) =g= 0;
 584  Eq_inv(i,h,r)            .. inv(i,h,r) =g= 0;
 585  Eq_ret(i,h,r)            .. ret(i,h,r)=g=0;
 586   
 587   
 588  Eq_trade(i,n,r,rr,e,l,s,ss)$(trading=1 and r_trade(n,r,rr))..
 589           trade(i,n,r,rr,e,l,s,ss)=g=0;
 590   
 591  Eq_arb(n,r,rr,e,l,s,ss)$r_trade(n,r,rr)   .. arbitrage(n,r,rr,e,l,s,ss)=g=0;
 592   
 593  model CMO   /
 594              Eq1,
 595              Eq2,
 596              Eq9_1,
 597              Eq9_2,
 598              Eq9_3,
 599              Eq9_4,
 600              Eq9_5.lambda_high,
 601              Eq9_6.eta_high,
 602              Eq9_7,
 603              Eq9_8,
 604   
 605              Eq10_1,
 606              Eq11_1,
 607              Eq11_2.price_trans_pos
 608              Eq11_3.price_trans_neg,
 609              Eq11_4.tau,
 610              EQ11_5,
 611   
 612              Eq_q.lambda_low,
 613              Eq_trade.zeta,
 614              Eq_inv.alpha,
 615              Eq_ret.eta_low,
 616              Eq_arb.shadows_arbitrage,
 617  /;
 618           option MCP=path;
 619          CMO.scaleopt =1;
 620  *        tau.scale(n,e,l,s,ss)=1e4;
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\demand_calib.gms
 622   
 623  parameter EL_demgro(r)  projected percentage growth in electricity demand from 2015 to 2020 by region
 624  /
 625  WOA      1.183
 626  EOA      1.368
 627  SOA      1.329
 628  COA      1.217
 629  /
 630  ;
 631   
 632  *$INCLUDE solar.gms
 633   
 634  parameter elasticity(r) demand elasticity for eletricity ???;
 635   
 636  parameter  LRMC(r,e,l,s,ss) long run marginal cost in each load segment USD per MWH;
 637   
 638  * long run maringal cost. rescale capacity payment to USD/MW
 639  LRMC(r,e,l,s,ss) =
 640   
 641  smin(h,mc(h,r,s,ss)+(ic(h)+om(h))/sum((ll)$(EL_Demand(r,e,ll,s,ss)>=EL_Demand(r,e,l,s,ss)),d(e,ll)) )
 642  ;
 643   
 644  elasticity(r) = 0.3;
 645   
 646  * Energy Price calibration                                                     *
 647              a(r,e,l,s,ss) = LRMC(r,e,l,s,ss)*(1+1/elasticity(r));
 648              b(r,e,l,s,ss) = LRMC(r,e,l,s,ss)/EL_demand(r,e,l,s,ss)/elasticity(r) ;
 649   
 650   
 651  * Capacity Price calibration                                                   *
 652   
 653   
 654  * assume a flat inverse demand curve for capacity
 655  * price is set to the maximum fixed cost of all generators operating in the market
 656  * soread of the total number of demand hours
 657   
 658  theta(r,e,m) =  0
 659                   +smax(h,(ic(h)+om(h)))/sum((ee,l),d(ee,l))
 660  *                 sum((s),prob(s,ss)*d(e,m))    ;
 661  *                 sum((s,ll)$(EL_Demand(r,e,ll,s,ss)>=EL_Demand(r,e,m,s,ss)),prob(s,ss)*d(e,ll));
 662  ;
 663                   xi(r,e,m) =0;
 664   
 665   
 666   
               a(r,'l1',s,ss) = 1200 +uniform(0,100);
               a(r,'l2',s,ss) = 600 +uniform(0,50);
               a(r,'l3',s,ss) = 300 +uniform(0,10);
       
               b(r,'l1',s,ss) = 0.005 +uniform(0,0.0005);
               b(r,'l2',s,ss) = 0.01 +uniform(0,0.0005);
               b(r,'l3',s,ss) = 0.01 +uniform(0,0.0005);
       
       
      theta(r,e,'l1') = 5000 +uniform(0,200);
      theta(r,e,'l2') = 3000 +uniform(0,100);
      theta(r,e,'l3') = 2000 +uniform(0,50);
       
      xi(r,e,'l1') = 0.00001 ;
      xi(r,e,'l2') = 0.00002 ;
      xi(r,e,'l3') = 0.00003 ;
 685   
 686   
 687   
 688  Option Savepoint=1;
 689  CMO.optfile = 1 ;
 690   
 691  Execute_Loadpoint 'CMO_p.gdx';
 692   
 693  *trade.l(i,n,r,rr,e,l,s,ss)$(not r_trans(n,r,rr))=0;
 694  *arbitrage.l(n,r,rr,e,l,s,ss)$(not r_trans(n,r,rr))=0;
 695  *trans.lo(n,e,l,s,ss)=0;
 696  solve CMO using mcp;
 697   
 698   
 699  *$ontext
 700  Parameters
 701           profit(i)           profit per player
 702           roi(i)              return on investment
 703           cus(i)              capacity usage
 704           rop(i)              return on production
 705           roc(i)              return on capacity
 706   
 707   
 708           error_demand(r,e,l)
 709           reserve_capacity(r)
 710           ;
 711   
 712  *$ontext
 713           error_demand(r,e,l) =
 714           -sum((s,ss),prob(r,e,l,s,ss)*
 715             (EL_demand(r,e,l,s,ss)-
 716                   (sum((j),sales.l(j,r,e,l,s,ss))-sum((n,rr)$r_trade(n,r,rr),arbitrage.l(n,r,rr,e,l,s,ss))+sum((n,rr)$r_trade(n,rr,r),arbitrage.l(n,rr,r,e,l,s,ss)) )
 717             )
 718           )/sum((s,ss),EL_demand(r,e,l,s,ss));
 719   
 720           reserve_capacity(r) = sum((i,h),Cap_avail.l(i,h,r))/smax((e,l),sum((s,ss),EL_demand(r,e,l,s,ss)*prob(r,e,l,s,ss)))-1;
 721  ;
 722   
 723   
 724   
 725  profit(i)=sum((h,r,e,l,s,ss),prob(r,e,l,s,ss)*(price.l(r,e,l,s,ss)-mc(h,r,s,ss))*q.l(i,h,r,e,l,s,ss)*d(e,l))-sum((h,r),ici(h)*Cap_avail.l(i,h,r))-sum((h,r),icr(h)*ret.l(i,h,r))+sum((r,e,m,h),del
      ta.l(r,e,m)*beta(h,r,m)*Cap_avail.l(i,h,r));
 726   
 727   
 728   
 729   
 730  *********compute other indicators
 731   
 732  ***return on investment
 733  roi(i)=profit(i)/(sum((h,r),Cap_avail.l(i,h,r)*ici(h)));
 734   
 735  ****capacity usage
 736  cus(i)=sum((r,e,l,h,s,ss),prob(r,e,l,s,ss)*d(e,l)*q.l(i,h,r,e,l,s,ss))/sum((l,h,r,e,s,ss),prob(r,e,l,s,ss)*d(e,l)*Cap_avail.l(i,h,r));
 737   
 738  ****return on production
 739  rop(i)=profit(i)/sum((r,e,l,h,s,ss),prob(r,e,l,s,ss)*d(e,l)*q.l(i,h,r,e,l,s,ss));
 740   
 741  ****return on capacity
 742  roc(i)=profit(i)/(sum((r,e,l,h),d(e,l)*Cap_avail.l(i,h,r)));
 743   
 744   
 745  display q.l, price.l, delta.l,inv.l, Cap_avail.l, ret.l,kind0,profit;
 746   
 747   
 748  display roi,cus,rop,roc;
 749   
 750  display lambda_high.l,eta_high.l;
 751   
 752   
 753   
 754  file results /C:Users\c-olivef\AXEL Investment Gams\RESULTS.txt/;
 755   
 756  put results;
 757  put 'Investment model: the value of perfect rationality'//
 758      'Marginal Costs per generator'//;
 759   
 760  loop((h,r,s,ss),put h.tl,@12,s.tl,@24,mc(h,r,s,ss):6:1//);
 761   
 762  put 'Investment Costs per generator'//;
 763   
 764  loop(h,put h.tl,@12,ic(h):6:1//);
 765   
 766   
 767  put 'Investment per generator'//;
 768   
 769  loop((i,h,r),put i.tl,@12,h.tl,@24,inv.l(i,h,r):6:1//);
 770   
 771   
 772  put 'Generation per generator'//;
 773   
 774  loop((i,h,r,e,l,s,ss),put i.tl,@12,h.tl,@24,l.tl,@32,s.tl,@44,q.l(i,h,r,e,l,s,ss):6:1//);
 775   
 776   
 777  put 'Equilibrium Prices '//;
 778   
 779  loop((r,e,l,s,ss),put s.tl,@12,l.tl,@24,price(r,e,l,s,ss)//);
 780   
 781  put 'Total Profit per generator'//;
 782   
 783  loop(i,put i.tl,@12,profit(i):8:2//);
 784   
 785  put 'Generator, Return on Investment, Capacity usage, Return on production, Return on Capacity'//;
 786   
 787  loop(i,put i.tl,@12,roi(i),@30,cus(i),@50,rop(i),@70,roc(i):10:2//);
 788   
 789   
 790  *$offtext

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME psi OF TYPE VAR  
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/24/16 10:03:39 Page 2
Dynamic Programming Investment
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\run_model.gms
     2        7 INCLUDE        1       7  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Macros.gms
     3       45 FUNCLIBIN      1       9  stodclib
     4       50 INCLUDE        1      14  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\SetsAndVariables.gms
     5      111 INCLUDE        1      16  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Demand.gms
     6      123 GDXIN          5      12  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\db\load.gdx
     7      275 INCLUDE        1      17  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\parameters.gms
     8      449 INCLUDE        1      19  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\equations.gms
     9      621 INCLUDE        1      20  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\demand_calib.gms


COMPILATION TIME     =        0.016 SECONDS      5 MB  24.1.3 r41464 WEX-WEI
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/24/16 10:03:39 Page 3
Dynamic Programming Investment
Equation Listing    SOLVE CMO Using MCP From line 696


---- Eq1  =E=  Equation (1)

Eq1(COA,winter,l1,s1,s1)..  0.0363905028168885*sales(fringe,COA,winter,l1,s1,s1) + 0.0363905028168885*sales(g1,COA,winter,l1,s1,s1) + 0.0363905028168885*sales(g2,COA,winter,l1,s1,s1)
     
      + 0.0363905028168885*sales(g3,COA,winter,l1,s1,s1) + 0.0363905028168885*sales(g4,COA,winter,l1,s1,s1) + price(COA,winter,l1,s1,s1) - 0.0363905028168885*arbitrage(East,COA,EOA,winter,l1,s1,s1)
     
      + 0.0363905028168885*arbitrage(East,EOA,COA,winter,l1,s1,s1) - 0.0363905028168885*arbitrage(west,COA,WOA,winter,l1,s1,s1) + 0.0363905028168885*arbitrage(west,WOA,COA,winter,l1,s1,s1) =E= 
     272.209082447272 ; (LHS = 272.209082446419, INFES = 8.52100612291906E-10 ****)
     
Eq1(COA,winter,l1,s1,s2)..  0.0363905028168885*sales(fringe,COA,winter,l1,s1,s2) + 0.0363905028168885*sales(g1,COA,winter,l1,s1,s2) + 0.0363905028168885*sales(g2,COA,winter,l1,s1,s2)
     
      + 0.0363905028168885*sales(g3,COA,winter,l1,s1,s2) + 0.0363905028168885*sales(g4,COA,winter,l1,s1,s2) + price(COA,winter,l1,s1,s2) - 0.0363905028168885*arbitrage(East,COA,EOA,winter,l1,s1,s2)
     
      + 0.0363905028168885*arbitrage(East,EOA,COA,winter,l1,s1,s2) - 0.0363905028168885*arbitrage(west,COA,WOA,winter,l1,s1,s2) + 0.0363905028168885*arbitrage(west,WOA,COA,winter,l1,s1,s2) =E= 
     272.209082447272 ; (LHS = 0, INFES = 272.209082447272 ****)
     
Eq1(COA,winter,l1,s2,s1)..  0.03107215278305*sales(fringe,COA,winter,l1,s2,s1) + 0.03107215278305*sales(g1,COA,winter,l1,s2,s1) + 0.03107215278305*sales(g2,COA,winter,l1,s2,s1)
     
      + 0.03107215278305*sales(g3,COA,winter,l1,s2,s1) + 0.03107215278305*sales(g4,COA,winter,l1,s2,s1) + price(COA,winter,l1,s2,s1) - 0.03107215278305*arbitrage(East,COA,EOA,winter,l1,s2,s1)
     
      + 0.03107215278305*arbitrage(East,EOA,COA,winter,l1,s2,s1) - 0.03107215278305*arbitrage(west,COA,WOA,winter,l1,s2,s1) + 0.03107215278305*arbitrage(west,WOA,COA,winter,l1,s2,s1) =E= 
     272.209082447272 ; (LHS = 272.209082446564, INFES = 7.07608194261411E-10 ****)
     
REMAINING 765 ENTRIES SKIPPED


---- Eq2  =E=  Equation (1)

Eq2(COA,winter,l5)..  delta(COA,winter,l5) =E= 40.4789709383651 ; (LHS = 40.4789709383649)
     
Eq2(COA,winter,l6)..  delta(COA,winter,l6) =E= 40.4789709383651 ; (LHS = 40.4789709376597, INFES = 7.05384195498482E-10 ****)
     
Eq2(COA,winter,l7)..  delta(COA,winter,l7) =E= 40.4789709383651 ; (LHS = 40.4789709376597, INFES = 7.05348668361694E-10 ****)
     
REMAINING 33 ENTRIES SKIPPED


---- Eq9_1  =E=  Equation (8.1)

Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)..  - lambda_high(fringe,CCGT,COA,winter,l1,s1,s1) + lambda_low(fringe,CCGT,COA,winter,l1,s1,s1) + price(COA,winter,l1,s1,s1) =E= 8.860975 ;
     
      (LHS = 8.86097499999981)
     
Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)..  - lambda_high(fringe,CCGT,COA,winter,l1,s1,s2) + lambda_low(fringe,CCGT,COA,winter,l1,s1,s2) + price(COA,winter,l1,s1,s2) =E= 8.860975 ;
     
      (LHS = 0, INFES = 8.860975 ****)
     
Eq9_1(fringe,CCGT,COA,winter,l1,s2,s1)..  - lambda_high(fringe,CCGT,COA,winter,l1,s2,s1) + lambda_low(fringe,CCGT,COA,winter,l1,s2,s1) + price(COA,winter,l1,s2,s1) =E= 8.860975 ;
     
      (LHS = 8.86097500000327, INFES = 3.27204929817526E-12 ****)
     
REMAINING 15357 ENTRIES SKIPPED


---- Eq9_2  =E=  Equation (8.2)

Eq9_2(fringe,CCGT,COA)..  0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l1,s1,s1) + 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l1,s1,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l1,s2,s1) + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l1,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l1,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l1,s3,s2) + 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l1,s4,s1) + 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l1,s4,s2)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l2,s1,s1) + 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l2,s1,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l2,s2,s1) + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l2,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l2,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l2,s3,s2) + 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l2,s4,s1) + 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l2,s4,s2)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l3,s1,s1) + 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l3,s1,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l3,s2,s1) + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l3,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l3,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l3,s3,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l3,s4,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l3,s4,s2) + 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l4,s1,s1)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l4,s1,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,COA,winter,l4,s2,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,COA,winter,l4,s2,s2) + 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l4,s3,s1)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l4,s3,s2) + 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l4,s4,s1)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l4,s4,s2) + 0.0521124027220042*lambda_high(fringe,CCGT,COA,winter,l5,s1,s1)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,COA,winter,l5,s1,s2) + 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l5,s2,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l5,s2,s2) + 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l5,s3,s1) + 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l5,s3,s2)
     
      + 0.0521124027220043*lambda_high(fringe,CCGT,COA,winter,l5,s4,s1) + 0.0521124027220043*lambda_high(fringe,CCGT,COA,winter,l5,s4,s2)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l6,s1,s1) + 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l6,s1,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l6,s2,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l6,s2,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l6,s3,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l6,s3,s2)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l6,s4,s1) + 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l6,s4,s2)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l7,s1,s1) + 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l7,s1,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l7,s2,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l7,s2,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l7,s3,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l7,s3,s2)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,COA,winter,l7,s4,s1) + 0.0347416018146695*lambda_high(fringe,CCGT,COA,winter,l7,s4,s2)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,COA,winter,l8,s1,s1) + 0.0521124027220042*lambda_high(fringe,CCGT,COA,winter,l8,s1,s2)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l8,s2,s1) + 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l8,s2,s2) + 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l8,s3,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l8,s3,s2) + 0.0521124027220041*lambda_high(fringe,CCGT,COA,winter,l8,s4,s1)
     
      + 0.0521124027220041*lambda_high(fringe,CCGT,COA,winter,l8,s4,s2) + 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l1,s1,s1)
     
      + 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l1,s1,s2) + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l1,s2,s1)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l1,s2,s2) + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l1,s3,s1) + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l1,s3,s2)
     
      + 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l1,s4,s1) + 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l1,s4,s2)
     
      + 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l2,s1,s1) + 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l2,s1,s2)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l2,s2,s1) + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l2,s2,s2) + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l2,s3,s1)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l2,s3,s2) + 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l2,s4,s1)
     
      + 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l2,s4,s2) + 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l3,s1,s1)
     
      + 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l3,s1,s2) + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l3,s2,s1)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l3,s2,s2) + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l3,s3,s1) + 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l3,s3,s2)
     
      + 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l3,s4,s1) + 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l3,s4,s2)
     
      + 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l4,s1,s1) + 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l4,s1,s2)
     
      + 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l4,s2,s1) + 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l4,s2,s2)
     
      + 0.0865431654133198*lambda_high(fringe,CCGT,COA,summer,l4,s3,s1) + 0.0865431654133198*lambda_high(fringe,CCGT,COA,summer,l4,s3,s2)
     
      + 0.0344568345866802*lambda_high(fringe,CCGT,COA,summer,l4,s4,s1) + 0.0344568345866802*lambda_high(fringe,CCGT,COA,summer,l4,s4,s2)
     
      + 0.0516852518800205*lambda_high(fringe,CCGT,COA,summer,l5,s1,s1) + 0.0516852518800205*lambda_high(fringe,CCGT,COA,summer,l5,s1,s2)
     
      + 0.12981474811998*lambda_high(fringe,CCGT,COA,summer,l5,s2,s1) + 0.12981474811998*lambda_high(fringe,CCGT,COA,summer,l5,s2,s2) + 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l5,s3,s1)
     
      + 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l5,s3,s2) + 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l5,s4,s1)
     
      + 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l5,s4,s2) + 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l6,s1,s1)
     
      + 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l6,s1,s2) + 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l6,s2,s1)
     
      + 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l6,s2,s2) + 0.0865431654133197*lambda_high(fringe,CCGT,COA,summer,l6,s3,s1)
     
      + 0.0865431654133197*lambda_high(fringe,CCGT,COA,summer,l6,s3,s2) + 0.0344568345866803*lambda_high(fringe,CCGT,COA,summer,l6,s4,s1)
     
      + 0.0344568345866803*lambda_high(fringe,CCGT,COA,summer,l6,s4,s2) + 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l7,s1,s1)
     
      + 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l7,s1,s2) + 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l7,s2,s1)
     
      + 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l7,s2,s2) + 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l7,s3,s1)
     
      + 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l7,s3,s2) + 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l7,s4,s1)
     
      + 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l7,s4,s2) + 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l8,s1,s1)
     
      + 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l8,s1,s2) + 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l8,s2,s1)
     
      + 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l8,s2,s2) + 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l8,s3,s1) + 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l8,s3,s2)
     
      + 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l8,s4,s1) + 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l8,s4,s2)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s1) + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s1) + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s1) + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s2)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l1,s4,s1) + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l1,s4,s2)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s1) + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s1) + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s1) + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s2)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l2,s4,s1) + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l2,s4,s2)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s1) + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s1) + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s1) + 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s2)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l3,s4,s1) + 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l3,s4,s2)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s1) + 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s2)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l4,s4,s1) + 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l4,s4,s2)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s1) + 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s2)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s1) + 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s2)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s1) + 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s2)
     
      + 0.0521124027220043*lambda_high(fringe,CCGT,COA,spring-fall,l5,s4,s1) + 0.0521124027220043*lambda_high(fringe,CCGT,COA,spring-fall,l5,s4,s2)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s1) + 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s2)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s1) + 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s2)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l6,s4,s1) + 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l6,s4,s2)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s1) + 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s2)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s1) + 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s2)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s1) + 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s2)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l7,s4,s1) + 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l7,s4,s2)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s1) + 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s2)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s1) + 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s2)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s1) + 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s2)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l8,s4,s1) + 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l8,s4,s2) + 0.366*delta(COA,winter,l5)
     
      + 0.244*delta(COA,winter,l6) + 0.244*delta(COA,winter,l7) + 0.363*delta(COA,summer,l5) + 0.242*delta(COA,summer,l6) + 0.242*delta(COA,summer,l7) + 0.366*delta(COA,spring-fall,l5)
     
      + 0.244*delta(COA,spring-fall,l6) + 0.244*delta(COA,spring-fall,l7) + alpha(fringe,CCGT,COA) =E= 131.653873578002 ; (LHS = 131.653873577991)
     
Eq9_2(fringe,CCGT,EOA)..  0.0694832036293389*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s1) + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s1) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,winter,l1,s4,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,winter,l1,s4,s2) + 0.0694832036293391*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s1)
     
      + 0.0694832036293391*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s1) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s2)
     
      + 0.0694832036293391*lambda_high(fringe,CCGT,EOA,winter,l2,s4,s1) + 0.0694832036293391*lambda_high(fringe,CCGT,EOA,winter,l2,s4,s2)
     
      + 0.069483203629339*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s1) + 0.069483203629339*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s1) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s2)
     
      + 0.069483203629339*lambda_high(fringe,CCGT,EOA,winter,l3,s4,s1) + 0.069483203629339*lambda_high(fringe,CCGT,EOA,winter,l3,s4,s2)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s1) + 0.0347416018146694*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s2)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,EOA,winter,l4,s4,s1) + 0.0347416018146694*lambda_high(fringe,CCGT,EOA,winter,l4,s4,s2)
     
      + 0.0521124027220043*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s1) + 0.0521124027220043*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s2)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s1) + 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s2) + 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s2) + 0.0521124027220043*lambda_high(fringe,CCGT,EOA,winter,l5,s4,s1)
     
      + 0.0521124027220043*lambda_high(fringe,CCGT,EOA,winter,l5,s4,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,winter,l6,s4,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,winter,l6,s4,s2) + 0.0347416018146696*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s1)
     
      + 0.0347416018146696*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s2) + 0.0872583981853304*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s1)
     
      + 0.0872583981853304*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s2) + 0.0872583981853304*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s1)
     
      + 0.0872583981853304*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s2) + 0.0347416018146696*lambda_high(fringe,CCGT,EOA,winter,l7,s4,s1)
     
      + 0.0347416018146696*lambda_high(fringe,CCGT,EOA,winter,l7,s4,s2) + 0.0521124027220042*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s1)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s2) + 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s2) + 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s1) + 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s2)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,EOA,winter,l8,s4,s1) + 0.0521124027220042*lambda_high(fringe,CCGT,EOA,winter,l8,s4,s2)
     
      + 0.0689136691733608*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s1) + 0.0689136691733608*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s2)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s1) + 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s2) + 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s1)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s2) + 0.0689136691733608*lambda_high(fringe,CCGT,EOA,summer,l1,s4,s1)
     
      + 0.0689136691733608*lambda_high(fringe,CCGT,EOA,summer,l1,s4,s2) + 0.0689136691733607*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s1)
     
      + 0.0689136691733607*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s2) + 0.17308633082664*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s1) + 0.17308633082664*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s2)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s1) + 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s2)
     
      + 0.0689136691733605*lambda_high(fringe,CCGT,EOA,summer,l2,s4,s1) + 0.0689136691733605*lambda_high(fringe,CCGT,EOA,summer,l2,s4,s2)
     
      + 0.0689136691733607*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s1) + 0.0689136691733607*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s2)
     
      + 0.17308633082664*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s1) + 0.17308633082664*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s2) + 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s1)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s2) + 0.0689136691733605*lambda_high(fringe,CCGT,EOA,summer,l3,s4,s1)
     
      + 0.0689136691733605*lambda_high(fringe,CCGT,EOA,summer,l3,s4,s2) + 0.0344568345866803*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s1)
     
      + 0.0344568345866803*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s2) + 0.0865431654133196*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s1)
     
      + 0.0865431654133196*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s2) + 0.0865431654133195*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s1)
     
      + 0.0865431654133195*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s2) + 0.0344568345866805*lambda_high(fringe,CCGT,EOA,summer,l4,s4,s1)
     
      + 0.0344568345866805*lambda_high(fringe,CCGT,EOA,summer,l4,s4,s2) + 0.0516852518800205*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s1)
     
      + 0.0516852518800205*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s2) + 0.129814748119979*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s1)
     
      + 0.129814748119979*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s2) + 0.12981474811998*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s1) + 0.12981474811998*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s2)
     
      + 0.0516852518800204*lambda_high(fringe,CCGT,EOA,summer,l5,s4,s1) + 0.0516852518800204*lambda_high(fringe,CCGT,EOA,summer,l5,s4,s2)
     
      + 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s1) + 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s2)
     
      + 0.0865431654133198*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s1) + 0.0865431654133198*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s2)
     
      + 0.0865431654133194*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s1) + 0.0865431654133194*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s2)
     
      + 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l6,s4,s1) + 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l6,s4,s2)
     
      + 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s1) + 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s2)
     
      + 0.0865431654133198*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s1) + 0.0865431654133198*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s2)
     
      + 0.0865431654133194*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s1) + 0.0865431654133194*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s2)
     
      + 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l7,s4,s1) + 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l7,s4,s2)
     
      + 0.0516852518800205*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s1) + 0.0516852518800205*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s2)
     
      + 0.129814748119979*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s1) + 0.129814748119979*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s2) + 0.12981474811998*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s1)
     
      + 0.12981474811998*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s2) + 0.0516852518800206*lambda_high(fringe,CCGT,EOA,summer,l8,s4,s1)
     
      + 0.0516852518800206*lambda_high(fringe,CCGT,EOA,summer,l8,s4,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s4,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s4,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s4,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s4,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s4,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s4,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s2) + 0.0872583981853306*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s1)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s2) + 0.0347416018146694*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s4,s1)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s4,s2) + 0.0521124027220042*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s1)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s2) + 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s2) + 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s2) + 0.0521124027220042*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s4,s1)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s4,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s2) + 0.0872583981853306*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s1)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s2) + 0.0347416018146694*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s4,s1)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s4,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s4,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s4,s2) + 0.0521124027220041*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s1)
     
      + 0.0521124027220041*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s2) + 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s2) + 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s2) + 0.0521124027220043*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s4,s1)
     
      + 0.0521124027220043*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s4,s2) + 0.366*delta(EOA,winter,l5) + 0.244*delta(EOA,winter,l6) + 0.244*delta(EOA,winter,l7) + 0.363*delta(EOA,summer,l5)
     
      + 0.242*delta(EOA,summer,l6) + 0.242*delta(EOA,summer,l7) + 0.366*delta(EOA,spring-fall,l5) + 0.244*delta(EOA,spring-fall,l6) + 0.244*delta(EOA,spring-fall,l7) + alpha(fringe,CCGT,EOA) =E= 
     131.653873578002 ; (LHS = 131.65387357798, INFES = 2.17994511331199E-11 ****)
     
Eq9_2(fringe,CCGT,SOA)..  0.0694832036293389*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s1) + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s1) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,winter,l1,s4,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,winter,l1,s4,s2) + 0.069483203629339*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s1)
     
      + 0.069483203629339*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s2) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s1) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s2)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s1) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s2) + 0.069483203629339*lambda_high(fringe,CCGT,SOA,winter,l2,s4,s1)
     
      + 0.069483203629339*lambda_high(fringe,CCGT,SOA,winter,l2,s4,s2) + 0.0694832036293388*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s1)
     
      + 0.0694832036293388*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s2) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s1) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s2)
     
      + 0.0694832036293388*lambda_high(fringe,CCGT,SOA,winter,l3,s4,s1) + 0.0694832036293388*lambda_high(fringe,CCGT,SOA,winter,l3,s4,s2)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s1) + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s2)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s1) + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s2)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l4,s4,s1) + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l4,s4,s2)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s1) + 0.0521124027220042*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s2)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s1) + 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s2) + 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s2) + 0.0521124027220042*lambda_high(fringe,CCGT,SOA,winter,l5,s4,s1)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,SOA,winter,l5,s4,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,winter,l6,s4,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,winter,l6,s4,s2) + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s1)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s2) + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s1)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s2) + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s1)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s2) + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l7,s4,s1)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l7,s4,s2) + 0.0521124027220043*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s1)
     
      + 0.0521124027220043*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s2) + 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s2) + 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s1) + 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s2)
     
      + 0.0521124027220043*lambda_high(fringe,CCGT,SOA,winter,l8,s4,s1) + 0.0521124027220043*lambda_high(fringe,CCGT,SOA,winter,l8,s4,s2)
     
      + 0.0689136691733607*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s1) + 0.0689136691733607*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s2)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s1) + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s2) + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s1)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s2) + 0.068913669173361*lambda_high(fringe,CCGT,SOA,summer,l1,s4,s1) + 0.068913669173361*lambda_high(fringe,CCGT,SOA,summer,l1,s4,s2)
     
      + 0.0689136691733607*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s1) + 0.0689136691733607*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s2)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s1) + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s2) + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s1)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s2) + 0.068913669173361*lambda_high(fringe,CCGT,SOA,summer,l2,s4,s1) + 0.068913669173361*lambda_high(fringe,CCGT,SOA,summer,l2,s4,s2)
     
      + 0.0689136691733606*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s1) + 0.0689136691733606*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s2)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s1) + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s2) + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s1)
     
      + 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s2) + 0.0689136691733606*lambda_high(fringe,CCGT,SOA,summer,l3,s4,s1)
     
      + 0.0689136691733606*lambda_high(fringe,CCGT,SOA,summer,l3,s4,s2) + 0.0344568345866804*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s1)
     
      + 0.0344568345866804*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s2) + 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s1)
     
      + 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s2) + 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s1)
     
      + 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s2) + 0.0344568345866804*lambda_high(fringe,CCGT,SOA,summer,l4,s4,s1)
     
      + 0.0344568345866804*lambda_high(fringe,CCGT,SOA,summer,l4,s4,s2) + 0.0516852518800205*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s1)
     
      + 0.0516852518800205*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s2) + 0.12981474811998*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s1) + 0.12981474811998*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s2)
     
      + 0.129814748119979*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s1) + 0.129814748119979*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s2)
     
      + 0.0516852518800207*lambda_high(fringe,CCGT,SOA,summer,l5,s4,s1) + 0.0516852518800207*lambda_high(fringe,CCGT,SOA,summer,l5,s4,s2)
     
      + 0.0344568345866803*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s1) + 0.0344568345866803*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s2)
     
      + 0.0865431654133197*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s1) + 0.0865431654133197*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s2)
     
      + 0.0865431654133197*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s1) + 0.0865431654133197*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s2)
     
      + 0.0344568345866803*lambda_high(fringe,CCGT,SOA,summer,l6,s4,s1) + 0.0344568345866803*lambda_high(fringe,CCGT,SOA,summer,l6,s4,s2)
     
      + 0.0344568345866805*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s1) + 0.0344568345866805*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s2)
     
      + 0.0865431654133195*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s1) + 0.0865431654133195*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s2)
     
      + 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s1) + 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s2)
     
      + 0.0344568345866805*lambda_high(fringe,CCGT,SOA,summer,l7,s4,s1) + 0.0344568345866805*lambda_high(fringe,CCGT,SOA,summer,l7,s4,s2)
     
      + 0.0516852518800206*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s1) + 0.0516852518800206*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s2)
     
      + 0.129814748119979*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s1) + 0.129814748119979*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s2) + 0.12981474811998*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s1)
     
      + 0.12981474811998*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s2) + 0.0516852518800204*lambda_high(fringe,CCGT,SOA,summer,l8,s4,s1)
     
      + 0.0516852518800204*lambda_high(fringe,CCGT,SOA,summer,l8,s4,s2) + 0.0694832036293388*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s1)
     
      + 0.0694832036293388*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s2) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s4,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s4,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s2) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s4,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s4,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s2) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s2) + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s1)
     
      + 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s2) + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s4,s1)
     
      + 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s4,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s4,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s4,s2) + 0.0521124027220042*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s1)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s2) + 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s2) + 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s2) + 0.0521124027220043*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s4,s1)
     
      + 0.0521124027220043*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s4,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s2) + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s1)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s2) + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s4,s1)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s4,s2) + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s1)
     
      + 0.0347416018146694*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s2) + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s1)
     
      + 0.0872583981853306*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s2) + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s1)
     
      + 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s2) + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s4,s1)
     
      + 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s4,s2) + 0.0521124027220042*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s1)
     
      + 0.0521124027220042*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s2) + 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s2) + 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s1)
     
      + 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s2) + 0.0521124027220044*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s4,s1)
     
      + 0.0521124027220044*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s4,s2) + 0.366*delta(SOA,winter,l5) + 0.244*delta(SOA,winter,l6) + 0.244*delta(SOA,winter,l7) + 0.363*delta(SOA,summer,l5)
     
      + 0.242*delta(SOA,summer,l6) + 0.242*delta(SOA,summer,l7) + 0.366*delta(SOA,spring-fall,l5) + 0.244*delta(SOA,spring-fall,l6) + 0.244*delta(SOA,spring-fall,l7) + alpha(fringe,CCGT,SOA) =E= 
     131.653873578002 ; (LHS = 131.653873577961, INFES = 4.14956957683899E-11 ****)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_3  =E=  Equation (8.3)

Eq9_3(fringe,CCGT,COA)..  - 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l1,s1,s1) - 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l1,s1,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l1,s2,s1) - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l1,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l1,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l1,s3,s2) - 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l1,s4,s1) - 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l1,s4,s2)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l2,s1,s1) - 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l2,s1,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l2,s2,s1) - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l2,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l2,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l2,s3,s2) - 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l2,s4,s1) - 0.069483203629339*lambda_high(fringe,CCGT,COA,winter,l2,s4,s2)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l3,s1,s1) - 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l3,s1,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l3,s2,s1) - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l3,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l3,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,winter,l3,s3,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l3,s4,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,COA,winter,l3,s4,s2) - 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l4,s1,s1)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l4,s1,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,COA,winter,l4,s2,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,COA,winter,l4,s2,s2) - 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l4,s3,s1)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l4,s3,s2) - 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l4,s4,s1)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l4,s4,s2) - 0.0521124027220042*lambda_high(fringe,CCGT,COA,winter,l5,s1,s1)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,COA,winter,l5,s1,s2) - 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l5,s2,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l5,s2,s2) - 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l5,s3,s1) - 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l5,s3,s2)
     
      - 0.0521124027220043*lambda_high(fringe,CCGT,COA,winter,l5,s4,s1) - 0.0521124027220043*lambda_high(fringe,CCGT,COA,winter,l5,s4,s2)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l6,s1,s1) - 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l6,s1,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l6,s2,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l6,s2,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l6,s3,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l6,s3,s2)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l6,s4,s1) - 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l6,s4,s2)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l7,s1,s1) - 0.0347416018146694*lambda_high(fringe,CCGT,COA,winter,l7,s1,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l7,s2,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l7,s2,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l7,s3,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,COA,winter,l7,s3,s2)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,COA,winter,l7,s4,s1) - 0.0347416018146695*lambda_high(fringe,CCGT,COA,winter,l7,s4,s2)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,COA,winter,l8,s1,s1) - 0.0521124027220042*lambda_high(fringe,CCGT,COA,winter,l8,s1,s2)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l8,s2,s1) - 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l8,s2,s2) - 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l8,s3,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,COA,winter,l8,s3,s2) - 0.0521124027220041*lambda_high(fringe,CCGT,COA,winter,l8,s4,s1)
     
      - 0.0521124027220041*lambda_high(fringe,CCGT,COA,winter,l8,s4,s2) - 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l1,s1,s1)
     
      - 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l1,s1,s2) - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l1,s2,s1)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l1,s2,s2) - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l1,s3,s1) - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l1,s3,s2)
     
      - 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l1,s4,s1) - 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l1,s4,s2)
     
      - 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l2,s1,s1) - 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l2,s1,s2)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l2,s2,s1) - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l2,s2,s2) - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l2,s3,s1)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l2,s3,s2) - 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l2,s4,s1)
     
      - 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l2,s4,s2) - 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l3,s1,s1)
     
      - 0.0689136691733607*lambda_high(fringe,CCGT,COA,summer,l3,s1,s2) - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l3,s2,s1)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l3,s2,s2) - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l3,s3,s1) - 0.173086330826639*lambda_high(fringe,CCGT,COA,summer,l3,s3,s2)
     
      - 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l3,s4,s1) - 0.0689136691733609*lambda_high(fringe,CCGT,COA,summer,l3,s4,s2)
     
      - 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l4,s1,s1) - 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l4,s1,s2)
     
      - 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l4,s2,s1) - 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l4,s2,s2)
     
      - 0.0865431654133198*lambda_high(fringe,CCGT,COA,summer,l4,s3,s1) - 0.0865431654133198*lambda_high(fringe,CCGT,COA,summer,l4,s3,s2)
     
      - 0.0344568345866802*lambda_high(fringe,CCGT,COA,summer,l4,s4,s1) - 0.0344568345866802*lambda_high(fringe,CCGT,COA,summer,l4,s4,s2)
     
      - 0.0516852518800205*lambda_high(fringe,CCGT,COA,summer,l5,s1,s1) - 0.0516852518800205*lambda_high(fringe,CCGT,COA,summer,l5,s1,s2)
     
      - 0.12981474811998*lambda_high(fringe,CCGT,COA,summer,l5,s2,s1) - 0.12981474811998*lambda_high(fringe,CCGT,COA,summer,l5,s2,s2) - 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l5,s3,s1)
     
      - 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l5,s3,s2) - 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l5,s4,s1)
     
      - 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l5,s4,s2) - 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l6,s1,s1)
     
      - 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l6,s1,s2) - 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l6,s2,s1)
     
      - 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l6,s2,s2) - 0.0865431654133197*lambda_high(fringe,CCGT,COA,summer,l6,s3,s1)
     
      - 0.0865431654133197*lambda_high(fringe,CCGT,COA,summer,l6,s3,s2) - 0.0344568345866803*lambda_high(fringe,CCGT,COA,summer,l6,s4,s1)
     
      - 0.0344568345866803*lambda_high(fringe,CCGT,COA,summer,l6,s4,s2) - 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l7,s1,s1)
     
      - 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l7,s1,s2) - 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l7,s2,s1)
     
      - 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l7,s2,s2) - 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l7,s3,s1)
     
      - 0.0865431654133196*lambda_high(fringe,CCGT,COA,summer,l7,s3,s2) - 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l7,s4,s1)
     
      - 0.0344568345866804*lambda_high(fringe,CCGT,COA,summer,l7,s4,s2) - 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l8,s1,s1)
     
      - 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l8,s1,s2) - 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l8,s2,s1)
     
      - 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l8,s2,s2) - 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l8,s3,s1) - 0.129814748119979*lambda_high(fringe,CCGT,COA,summer,l8,s3,s2)
     
      - 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l8,s4,s1) - 0.0516852518800206*lambda_high(fringe,CCGT,COA,summer,l8,s4,s2)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s1) - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s1) - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s1) - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s2)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l1,s4,s1) - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l1,s4,s2)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s1) - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s1) - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s1) - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s2)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l2,s4,s1) - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l2,s4,s2)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s1) - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s1) - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s1) - 0.174516796370661*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s2)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l3,s4,s1) - 0.0694832036293389*lambda_high(fringe,CCGT,COA,spring-fall,l3,s4,s2)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s1) - 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s2)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l4,s4,s1) - 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l4,s4,s2)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s1) - 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s2)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s1) - 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s2)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s1) - 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s2)
     
      - 0.0521124027220043*lambda_high(fringe,CCGT,COA,spring-fall,l5,s4,s1) - 0.0521124027220043*lambda_high(fringe,CCGT,COA,spring-fall,l5,s4,s2)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s1) - 0.0347416018146694*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s2)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s1) - 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s2)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l6,s4,s1) - 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l6,s4,s2)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s1) - 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s2)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s1) - 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s2)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s1) - 0.0872583981853305*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s2)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l7,s4,s1) - 0.0347416018146695*lambda_high(fringe,CCGT,COA,spring-fall,l7,s4,s2)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s1) - 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s2)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s1) - 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s2)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s1) - 0.130887597277996*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s2)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l8,s4,s1) - 0.0521124027220042*lambda_high(fringe,CCGT,COA,spring-fall,l8,s4,s2) - 0.366*delta(COA,winter,l5)
     
      - 0.244*delta(COA,winter,l6) - 0.244*delta(COA,winter,l7) - 0.363*delta(COA,summer,l5) - 0.242*delta(COA,summer,l6) - 0.242*delta(COA,summer,l7) - 0.366*delta(COA,spring-fall,l5)
     
      - 0.244*delta(COA,spring-fall,l6) - 0.244*delta(COA,spring-fall,l7) - eta_high(fringe,CCGT,COA) + eta_low(fringe,CCGT,COA) =E= -0.474612642199789 ; (LHS = -0.474612642199929)
     
Eq9_3(fringe,CCGT,EOA)..  - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s1) - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s1) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,winter,l1,s4,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,winter,l1,s4,s2) - 0.0694832036293391*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s1)
     
      - 0.0694832036293391*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s1) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s2)
     
      - 0.0694832036293391*lambda_high(fringe,CCGT,EOA,winter,l2,s4,s1) - 0.0694832036293391*lambda_high(fringe,CCGT,EOA,winter,l2,s4,s2)
     
      - 0.069483203629339*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s1) - 0.069483203629339*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s1) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s2)
     
      - 0.069483203629339*lambda_high(fringe,CCGT,EOA,winter,l3,s4,s1) - 0.069483203629339*lambda_high(fringe,CCGT,EOA,winter,l3,s4,s2)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s1) - 0.0347416018146694*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s2)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,EOA,winter,l4,s4,s1) - 0.0347416018146694*lambda_high(fringe,CCGT,EOA,winter,l4,s4,s2)
     
      - 0.0521124027220043*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s1) - 0.0521124027220043*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s2)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s1) - 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s2) - 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s2) - 0.0521124027220043*lambda_high(fringe,CCGT,EOA,winter,l5,s4,s1)
     
      - 0.0521124027220043*lambda_high(fringe,CCGT,EOA,winter,l5,s4,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,winter,l6,s4,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,winter,l6,s4,s2) - 0.0347416018146696*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s1)
     
      - 0.0347416018146696*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s2) - 0.0872583981853304*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s1)
     
      - 0.0872583981853304*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s2) - 0.0872583981853304*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s1)
     
      - 0.0872583981853304*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s2) - 0.0347416018146696*lambda_high(fringe,CCGT,EOA,winter,l7,s4,s1)
     
      - 0.0347416018146696*lambda_high(fringe,CCGT,EOA,winter,l7,s4,s2) - 0.0521124027220042*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s1)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s2) - 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s2) - 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s1) - 0.130887597277996*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s2)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,EOA,winter,l8,s4,s1) - 0.0521124027220042*lambda_high(fringe,CCGT,EOA,winter,l8,s4,s2)
     
      - 0.0689136691733608*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s1) - 0.0689136691733608*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s2)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s1) - 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s2) - 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s1)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s2) - 0.0689136691733608*lambda_high(fringe,CCGT,EOA,summer,l1,s4,s1)
     
      - 0.0689136691733608*lambda_high(fringe,CCGT,EOA,summer,l1,s4,s2) - 0.0689136691733607*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s1)
     
      - 0.0689136691733607*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s2) - 0.17308633082664*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s1) - 0.17308633082664*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s2)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s1) - 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s2)
     
      - 0.0689136691733605*lambda_high(fringe,CCGT,EOA,summer,l2,s4,s1) - 0.0689136691733605*lambda_high(fringe,CCGT,EOA,summer,l2,s4,s2)
     
      - 0.0689136691733607*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s1) - 0.0689136691733607*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s2)
     
      - 0.17308633082664*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s1) - 0.17308633082664*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s2) - 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s1)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s2) - 0.0689136691733605*lambda_high(fringe,CCGT,EOA,summer,l3,s4,s1)
     
      - 0.0689136691733605*lambda_high(fringe,CCGT,EOA,summer,l3,s4,s2) - 0.0344568345866803*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s1)
     
      - 0.0344568345866803*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s2) - 0.0865431654133196*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s1)
     
      - 0.0865431654133196*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s2) - 0.0865431654133195*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s1)
     
      - 0.0865431654133195*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s2) - 0.0344568345866805*lambda_high(fringe,CCGT,EOA,summer,l4,s4,s1)
     
      - 0.0344568345866805*lambda_high(fringe,CCGT,EOA,summer,l4,s4,s2) - 0.0516852518800205*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s1)
     
      - 0.0516852518800205*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s2) - 0.129814748119979*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s1)
     
      - 0.129814748119979*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s2) - 0.12981474811998*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s1) - 0.12981474811998*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s2)
     
      - 0.0516852518800204*lambda_high(fringe,CCGT,EOA,summer,l5,s4,s1) - 0.0516852518800204*lambda_high(fringe,CCGT,EOA,summer,l5,s4,s2)
     
      - 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s1) - 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s2)
     
      - 0.0865431654133198*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s1) - 0.0865431654133198*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s2)
     
      - 0.0865431654133194*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s1) - 0.0865431654133194*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s2)
     
      - 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l6,s4,s1) - 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l6,s4,s2)
     
      - 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s1) - 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s2)
     
      - 0.0865431654133198*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s1) - 0.0865431654133198*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s2)
     
      - 0.0865431654133194*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s1) - 0.0865431654133194*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s2)
     
      - 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l7,s4,s1) - 0.0344568345866804*lambda_high(fringe,CCGT,EOA,summer,l7,s4,s2)
     
      - 0.0516852518800205*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s1) - 0.0516852518800205*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s2)
     
      - 0.129814748119979*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s1) - 0.129814748119979*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s2) - 0.12981474811998*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s1)
     
      - 0.12981474811998*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s2) - 0.0516852518800206*lambda_high(fringe,CCGT,EOA,summer,l8,s4,s1)
     
      - 0.0516852518800206*lambda_high(fringe,CCGT,EOA,summer,l8,s4,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s4,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s4,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s4,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s4,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s4,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s4,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s2) - 0.0872583981853306*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s1)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s2) - 0.0347416018146694*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s4,s1)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s4,s2) - 0.0521124027220042*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s1)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s2) - 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s2) - 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s2) - 0.0521124027220042*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s4,s1)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s4,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s2) - 0.0872583981853306*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s1)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s2) - 0.0347416018146694*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s4,s1)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s4,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s4,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s4,s2) - 0.0521124027220041*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s1)
     
      - 0.0521124027220041*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s2) - 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s2) - 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s2) - 0.0521124027220043*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s4,s1)
     
      - 0.0521124027220043*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s4,s2) - 0.366*delta(EOA,winter,l5) - 0.244*delta(EOA,winter,l6) - 0.244*delta(EOA,winter,l7) - 0.363*delta(EOA,summer,l5)
     
      - 0.242*delta(EOA,summer,l6) - 0.242*delta(EOA,summer,l7) - 0.366*delta(EOA,spring-fall,l5) - 0.244*delta(EOA,spring-fall,l6) - 0.244*delta(EOA,spring-fall,l7) - eta_high(fringe,CCGT,EOA)
     
      + eta_low(fringe,CCGT,EOA) =E= -0.474612642199789 ; (LHS = -0.474612642136975, INFES = 6.28137541980323E-11 ****)
     
Eq9_3(fringe,CCGT,SOA)..  - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s1) - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s1) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,winter,l1,s4,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,winter,l1,s4,s2) - 0.069483203629339*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s1)
     
      - 0.069483203629339*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s2) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s1) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s2)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s1) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s2) - 0.069483203629339*lambda_high(fringe,CCGT,SOA,winter,l2,s4,s1)
     
      - 0.069483203629339*lambda_high(fringe,CCGT,SOA,winter,l2,s4,s2) - 0.0694832036293388*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s1)
     
      - 0.0694832036293388*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s2) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s1) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s2)
     
      - 0.0694832036293388*lambda_high(fringe,CCGT,SOA,winter,l3,s4,s1) - 0.0694832036293388*lambda_high(fringe,CCGT,SOA,winter,l3,s4,s2)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s1) - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s2)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s1) - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s2)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l4,s4,s1) - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l4,s4,s2)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s1) - 0.0521124027220042*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s2)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s1) - 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s2) - 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s2) - 0.0521124027220042*lambda_high(fringe,CCGT,SOA,winter,l5,s4,s1)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,SOA,winter,l5,s4,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,winter,l6,s4,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,winter,l6,s4,s2) - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s1)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s2) - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s1)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s2) - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s1)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s2) - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l7,s4,s1)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,winter,l7,s4,s2) - 0.0521124027220043*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s1)
     
      - 0.0521124027220043*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s2) - 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s2) - 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s1) - 0.130887597277996*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s2)
     
      - 0.0521124027220043*lambda_high(fringe,CCGT,SOA,winter,l8,s4,s1) - 0.0521124027220043*lambda_high(fringe,CCGT,SOA,winter,l8,s4,s2)
     
      - 0.0689136691733607*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s1) - 0.0689136691733607*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s2)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s1) - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s2) - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s1)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s2) - 0.068913669173361*lambda_high(fringe,CCGT,SOA,summer,l1,s4,s1) - 0.068913669173361*lambda_high(fringe,CCGT,SOA,summer,l1,s4,s2)
     
      - 0.0689136691733607*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s1) - 0.0689136691733607*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s2)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s1) - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s2) - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s1)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s2) - 0.068913669173361*lambda_high(fringe,CCGT,SOA,summer,l2,s4,s1) - 0.068913669173361*lambda_high(fringe,CCGT,SOA,summer,l2,s4,s2)
     
      - 0.0689136691733606*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s1) - 0.0689136691733606*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s2)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s1) - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s2) - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s1)
     
      - 0.173086330826639*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s2) - 0.0689136691733606*lambda_high(fringe,CCGT,SOA,summer,l3,s4,s1)
     
      - 0.0689136691733606*lambda_high(fringe,CCGT,SOA,summer,l3,s4,s2) - 0.0344568345866804*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s1)
     
      - 0.0344568345866804*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s2) - 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s1)
     
      - 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s2) - 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s1)
     
      - 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s2) - 0.0344568345866804*lambda_high(fringe,CCGT,SOA,summer,l4,s4,s1)
     
      - 0.0344568345866804*lambda_high(fringe,CCGT,SOA,summer,l4,s4,s2) - 0.0516852518800205*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s1)
     
      - 0.0516852518800205*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s2) - 0.12981474811998*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s1) - 0.12981474811998*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s2)
     
      - 0.129814748119979*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s1) - 0.129814748119979*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s2)
     
      - 0.0516852518800207*lambda_high(fringe,CCGT,SOA,summer,l5,s4,s1) - 0.0516852518800207*lambda_high(fringe,CCGT,SOA,summer,l5,s4,s2)
     
      - 0.0344568345866803*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s1) - 0.0344568345866803*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s2)
     
      - 0.0865431654133197*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s1) - 0.0865431654133197*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s2)
     
      - 0.0865431654133197*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s1) - 0.0865431654133197*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s2)
     
      - 0.0344568345866803*lambda_high(fringe,CCGT,SOA,summer,l6,s4,s1) - 0.0344568345866803*lambda_high(fringe,CCGT,SOA,summer,l6,s4,s2)
     
      - 0.0344568345866805*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s1) - 0.0344568345866805*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s2)
     
      - 0.0865431654133195*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s1) - 0.0865431654133195*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s2)
     
      - 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s1) - 0.0865431654133196*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s2)
     
      - 0.0344568345866805*lambda_high(fringe,CCGT,SOA,summer,l7,s4,s1) - 0.0344568345866805*lambda_high(fringe,CCGT,SOA,summer,l7,s4,s2)
     
      - 0.0516852518800206*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s1) - 0.0516852518800206*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s2)
     
      - 0.129814748119979*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s1) - 0.129814748119979*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s2) - 0.12981474811998*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s1)
     
      - 0.12981474811998*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s2) - 0.0516852518800204*lambda_high(fringe,CCGT,SOA,summer,l8,s4,s1)
     
      - 0.0516852518800204*lambda_high(fringe,CCGT,SOA,summer,l8,s4,s2) - 0.0694832036293388*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s1)
     
      - 0.0694832036293388*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s2) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s4,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s4,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s2) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s4,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s4,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s2) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s2) - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s1)
     
      - 0.174516796370661*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s2) - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s4,s1)
     
      - 0.0694832036293389*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s4,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s4,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s4,s2) - 0.0521124027220042*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s1)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s2) - 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s2) - 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s2) - 0.0521124027220043*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s4,s1)
     
      - 0.0521124027220043*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s4,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s2) - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s1)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s2) - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s4,s1)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s4,s2) - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s1)
     
      - 0.0347416018146694*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s2) - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s1)
     
      - 0.0872583981853306*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s2) - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s1)
     
      - 0.0872583981853305*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s2) - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s4,s1)
     
      - 0.0347416018146695*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s4,s2) - 0.0521124027220042*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s1)
     
      - 0.0521124027220042*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s2) - 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s2) - 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s1)
     
      - 0.130887597277996*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s2) - 0.0521124027220044*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s4,s1)
     
      - 0.0521124027220044*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s4,s2) - 0.366*delta(SOA,winter,l5) - 0.244*delta(SOA,winter,l6) - 0.244*delta(SOA,winter,l7) - 0.363*delta(SOA,summer,l5)
     
      - 0.242*delta(SOA,summer,l6) - 0.242*delta(SOA,summer,l7) - 0.366*delta(SOA,spring-fall,l5) - 0.244*delta(SOA,spring-fall,l6) - 0.244*delta(SOA,spring-fall,l7) - eta_high(fringe,CCGT,SOA)
     
      + eta_low(fringe,CCGT,SOA) =E= -0.474612642199789 ; (LHS = -0.474612642126658, INFES = 7.31308347212689E-11 ****)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_4  =E=  Equation (8.4)

                NONE


---- Eq9_5  =G=  

Eq9_5(fringe,CCGT,COA,winter,l1,s1,s1)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s1,s1) =G= 0 ; (LHS = 11845.8954875259)
     
Eq9_5(fringe,CCGT,COA,winter,l1,s1,s2)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s1,s2) =G= 0 ; (LHS = 19082.621750187)
     
Eq9_5(fringe,CCGT,COA,winter,l1,s2,s1)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s2,s1) =G= 0 ; (LHS = 10607.248019719)
     
REMAINING 15357 ENTRIES SKIPPED


---- Eq9_6  =G=  

Eq9_6(fringe,CCGT,COA)..  - ret(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq9_6(fringe,CCGT,EOA)..  - ret(fringe,CCGT,EOA) =G= -2.56737 ; (LHS = -4.64073224293315E-13)
     
Eq9_6(fringe,CCGT,SOA)..  - ret(fringe,CCGT,SOA) =G= 0 ; (LHS = -2.63782100546131E-12, INFES = 2.63782100546131E-12 ****)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_7  =E=  

Eq9_7(fringe,CCGT,COA)..  - inv(fringe,CCGT,COA) + ret(fringe,CCGT,COA) + Cap_avail(fringe,CCGT,COA) =E= 0 ; (LHS = 0)
     
Eq9_7(fringe,CCGT,EOA)..  - inv(fringe,CCGT,EOA) + ret(fringe,CCGT,EOA) + Cap_avail(fringe,CCGT,EOA) =E= 2.56737 ; (LHS = 2.5673700006803, INFES = 6.8030203692615E-10 ****)
     
Eq9_7(fringe,CCGT,SOA)..  - inv(fringe,CCGT,SOA) + ret(fringe,CCGT,SOA) + Cap_avail(fringe,CCGT,SOA) =E= 0 ; (LHS = 1.2732925824821E-11, INFES = 1.2732925824821E-11 ****)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_8  =E=  

Eq9_8(fringe,COA,winter,l1,s1,s1)..  - Q(fringe,CCGT,COA,winter,l1,s1,s1) - Q(fringe,GT,COA,winter,l1,s1,s1) - Q(fringe,ST,COA,winter,l1,s1,s1) - Q(fringe,Nuclear,COA,winter,l1,s1,s1)
     
      + sales(fringe,COA,winter,l1,s1,s1) =E= 0 ; (LHS = 0)
     
Eq9_8(fringe,COA,winter,l1,s1,s2)..  - Q(fringe,CCGT,COA,winter,l1,s1,s2) - Q(fringe,GT,COA,winter,l1,s1,s2) - Q(fringe,ST,COA,winter,l1,s1,s2) - Q(fringe,Nuclear,COA,winter,l1,s1,s2)
     
      + sales(fringe,COA,winter,l1,s1,s2) =E= 0 ; (LHS = 0)
     
Eq9_8(fringe,COA,winter,l1,s2,s1)..  - Q(fringe,CCGT,COA,winter,l1,s2,s1) - Q(fringe,GT,COA,winter,l1,s2,s1) - Q(fringe,ST,COA,winter,l1,s2,s1) - Q(fringe,Nuclear,COA,winter,l1,s2,s1)
     
      + sales(fringe,COA,winter,l1,s2,s1) =E= 0 ; (LHS = 0)
     
REMAINING 3837 ENTRIES SKIPPED


---- Eq10_1  =E=  

Eq10_1(East,COA,EOA,winter,l1,s1,s1)..  - price(COA,winter,l1,s1,s1) + price(EOA,winter,l1,s1,s1) - price_trans(East,winter,l1,s1,s1) + shadows_arbitrage(East,COA,EOA,winter,l1,s1,s1) =E= 0 ;
     
      (LHS = 0)
     
Eq10_1(East,COA,EOA,winter,l1,s1,s2)..  - price(COA,winter,l1,s1,s2) + price(EOA,winter,l1,s1,s2) - price_trans(East,winter,l1,s1,s2) + shadows_arbitrage(East,COA,EOA,winter,l1,s1,s2) =E= 0 ;
     
      (LHS = 0)
     
Eq10_1(East,COA,EOA,winter,l1,s2,s1)..  - price(COA,winter,l1,s2,s1) + price(EOA,winter,l1,s2,s1) - price_trans(East,winter,l1,s2,s1) + shadows_arbitrage(East,COA,EOA,winter,l1,s2,s1) =E= 0 ;
     
      (LHS = 0)
     
REMAINING 1149 ENTRIES SKIPPED


---- Eq11_1  =E=  

Eq11_1(East,winter,l1,s1,s1)..  price_trans_pos(East,winter,l1,s1,s1) - 2.04918032786885*tau(East,winter,l1,s1,s1) =E= 3.78 ; (LHS = 3.78)
     
Eq11_1(East,winter,l1,s1,s2)..  price_trans_pos(East,winter,l1,s1,s2) - 2.04918032786885*tau(East,winter,l1,s1,s2) =E= 3.78 ; (LHS = 0, INFES = 3.78 ****)
     
Eq11_1(East,winter,l1,s2,s1)..  price_trans_pos(East,winter,l1,s2,s1) - 2.04918032786885*tau(East,winter,l1,s2,s1) =E= 3.78 ; (LHS = 3.78)
     
REMAINING 573 ENTRIES SKIPPED


---- Eq11_2  =G=  

Eq11_2(East,winter,l1,s1,s1)..  - arbitrage(East,COA,EOA,winter,l1,s1,s1) - arbitrage(East,EOA,COA,winter,l1,s1,s1) + trans(East,winter,l1,s1,s1) =G= 0 ; (LHS = 0)
     
Eq11_2(East,winter,l1,s1,s2)..  - arbitrage(East,COA,EOA,winter,l1,s1,s2) - arbitrage(East,EOA,COA,winter,l1,s1,s2) + trans(East,winter,l1,s1,s2) =G= 0 ; (LHS = 0)
     
Eq11_2(East,winter,l1,s2,s1)..  - arbitrage(East,COA,EOA,winter,l1,s2,s1) - arbitrage(East,EOA,COA,winter,l1,s2,s1) + trans(East,winter,l1,s2,s1) =G= 0 ; (LHS = 0)
     
REMAINING 573 ENTRIES SKIPPED


---- Eq11_3  =G=  

                NONE


---- Eq11_4  =G=  

Eq11_4(East,winter,l1,s1,s1)..  - trans(East,winter,l1,s1,s1) =G= -5.22 ; (LHS = 0)
     
Eq11_4(East,winter,l1,s1,s2)..  - trans(East,winter,l1,s1,s2) =G= -5.22 ; (LHS = 0)
     
Eq11_4(East,winter,l1,s2,s1)..  - trans(East,winter,l1,s2,s1) =G= -5.22 ; (LHS = 0)
     
REMAINING 573 ENTRIES SKIPPED


---- Eq11_5  =E=  

Eq11_5(East,winter,l1,s1,s1)..  price_trans(East,winter,l1,s1,s1) - price_trans_pos(East,winter,l1,s1,s1) =E= 0 ; (LHS = 0)
     
Eq11_5(East,winter,l1,s1,s2)..  price_trans(East,winter,l1,s1,s2) - price_trans_pos(East,winter,l1,s1,s2) =E= 0 ; (LHS = 0)
     
Eq11_5(East,winter,l1,s2,s1)..  price_trans(East,winter,l1,s2,s1) - price_trans_pos(East,winter,l1,s2,s1) =E= 0 ; (LHS = 0)
     
REMAINING 573 ENTRIES SKIPPED


---- Eq_q  =G=  

Eq_q(fringe,CCGT,COA,winter,l1,s1,s1)..  Q(fringe,CCGT,COA,winter,l1,s1,s1) =G= 0 ; (LHS = 7236.72626266109)
     
Eq_q(fringe,CCGT,COA,winter,l1,s1,s2)..  Q(fringe,CCGT,COA,winter,l1,s1,s2) =G= 0 ; (LHS = 0)
     
Eq_q(fringe,CCGT,COA,winter,l1,s2,s1)..  Q(fringe,CCGT,COA,winter,l1,s2,s1) =G= 0 ; (LHS = 8475.37373046802)
     
REMAINING 15357 ENTRIES SKIPPED


---- Eq_trade  =G=  

                NONE


---- Eq_inv  =G=  

Eq_inv(fringe,CCGT,COA)..  inv(fringe,CCGT,COA) =G= 0 ; (LHS = 19082.621750187)
     
Eq_inv(fringe,CCGT,EOA)..  inv(fringe,CCGT,EOA) =G= 0 ; (LHS = 19626.9950123901)
     
Eq_inv(fringe,CCGT,SOA)..  inv(fringe,CCGT,SOA) =G= 0 ; (LHS = 5307.03034534746)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq_ret  =G=  

Eq_ret(fringe,CCGT,COA)..  ret(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq_ret(fringe,CCGT,EOA)..  ret(fringe,CCGT,EOA) =G= 0 ; (LHS = 4.64071597990057E-13)
     
Eq_ret(fringe,CCGT,SOA)..  ret(fringe,CCGT,SOA) =G= 0 ; (LHS = 2.63782100546131E-12)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq_arb  =G=  

Eq_arb(East,COA,EOA,winter,l1,s1,s1)..  arbitrage(East,COA,EOA,winter,l1,s1,s1) =G= 0 ; (LHS = 0)
     
Eq_arb(East,COA,EOA,winter,l1,s1,s2)..  arbitrage(East,COA,EOA,winter,l1,s1,s2) =G= 0 ; (LHS = 0)
     
Eq_arb(East,COA,EOA,winter,l1,s2,s1)..  arbitrage(East,COA,EOA,winter,l1,s2,s1) =G= 0 ; (LHS = 0)
     
REMAINING 1149 ENTRIES SKIPPED

GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/24/16 10:03:39 Page 4
Dynamic Programming Investment
Column Listing      SOLVE CMO Using MCP From line 696


---- inv  investment by player i in technology h

inv(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 19082.621750187, +INF, 0)
       -1       Eq9_7(fringe,CCGT,COA)
        1       Eq_inv(fringe,CCGT,COA)

inv(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 19626.9950123901, +INF, 0)
       -1       Eq9_7(fringe,CCGT,EOA)
        1       Eq_inv(fringe,CCGT,EOA)

inv(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 5307.03034534746, +INF, 0)
       -1       Eq9_7(fringe,CCGT,SOA)
        1       Eq_inv(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- ret  retirement of technology h in region r by player i

ret(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, -1.1988348681824E-14, +INF, 0)
       -1       Eq9_6(fringe,CCGT,COA)
        1       Eq9_7(fringe,CCGT,COA)
        1       Eq_ret(fringe,CCGT,COA)

ret(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 4.64071597990057E-13, +INF, 0)
       -1       Eq9_6(fringe,CCGT,EOA)
        1       Eq9_7(fringe,CCGT,EOA)
        1       Eq_ret(fringe,CCGT,EOA)

ret(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 2.63782100546131E-12, +INF, 0)
       -1       Eq9_6(fringe,CCGT,SOA)
        1       Eq9_7(fringe,CCGT,SOA)
        1       Eq_ret(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- Cap_avail  available capacity of player i of technolgy h in region r in MW

Cap_avail(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 19082.621750187, +INF, 0)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s4,s2)
        1       Eq9_7(fringe,CCGT,COA)

Cap_avail(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 19629.5623823908, +INF, 0)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s4,s2)
        1       Eq9_7(fringe,CCGT,EOA)

Cap_avail(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 5307.03034534747, +INF, 0)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s4,s2)
        1       Eq9_7(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- Q  generation quantity from a player i at market l in scenario in MW

Q(fringe,CCGT,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 7236.72626266109, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s1)
       -1       Eq9_8(fringe,COA,winter,l1,s1,s1)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s1,s1)

Q(fringe,CCGT,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s2)
       -1       Eq9_8(fringe,COA,winter,l1,s1,s2)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s1,s2)

Q(fringe,CCGT,COA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 8475.37373046802, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s2,s1)
       -1       Eq9_8(fringe,COA,winter,l1,s2,s1)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s2,s1)

REMAINING 15357 ENTRIES SKIPPED

---- sales  sales of firm in region r market l scenario s in MW

sales(fringe,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 7236.72626266109, +INF, 0)
        0.0364  Eq1(COA,winter,l1,s1,s1)
        1       Eq9_8(fringe,COA,winter,l1,s1,s1)

sales(fringe,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        0.0364  Eq1(COA,winter,l1,s1,s2)
        1       Eq9_8(fringe,COA,winter,l1,s1,s2)

sales(fringe,COA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 8475.37373046801, +INF, 0)
        0.0311  Eq1(COA,winter,l1,s2,s1)
        1       Eq9_8(fringe,COA,winter,l1,s2,s1)

REMAINING 3837 ENTRIES SKIPPED

---- lambda_high  shadow prices for the high capacity constraint in USD per  MWh

lambda_high(fringe,CCGT,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 11845.8954875259)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)
        0.0695  Eq9_2(fringe,CCGT,COA)
       -0.0695  Eq9_3(fringe,CCGT,COA)

lambda_high(fringe,CCGT,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)
        0.0695  Eq9_2(fringe,CCGT,COA)
       -0.0695  Eq9_3(fringe,CCGT,COA)

lambda_high(fringe,CCGT,COA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 10607.248019719)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s2,s1)
        0.1745  Eq9_2(fringe,CCGT,COA)
       -0.1745  Eq9_3(fringe,CCGT,COA)

REMAINING 15357 ENTRIES SKIPPED

---- lambda_low  shadows prices for low constraint in USD per  MWh

lambda_low(fringe,CCGT,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 7236.72626266109)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)

lambda_low(fringe,CCGT,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)

lambda_low(fringe,CCGT,COA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 8475.37373046802)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s2,s1)

REMAINING 15357 ENTRIES SKIPPED

---- delta  shadow prices for the capacity market in USD per  MW per hour

delta(COA,winter,l5)
                (.LO, .L, .UP, .M = -INF, 40.4789709383649, +INF, 0)
        1       Eq2(COA,winter,l5)
        0.366   Eq9_2(fringe,CCGT,COA)
        0.366   Eq9_2(fringe,GT,COA)
        0.366   Eq9_2(fringe,ST,COA)
        0.366   Eq9_2(fringe,Nuclear,COA)
        0.366   Eq9_2(g1,CCGT,COA)
        0.366   Eq9_2(g1,GT,COA)
        0.366   Eq9_2(g1,ST,COA)
        0.366   Eq9_2(g1,Nuclear,COA)
        0.366   Eq9_2(g2,CCGT,COA)
        0.366   Eq9_2(g2,GT,COA)
        0.366   Eq9_2(g2,ST,COA)
        0.366   Eq9_2(g2,Nuclear,COA)
        0.366   Eq9_2(g3,CCGT,COA)
        0.366   Eq9_2(g3,GT,COA)
        0.366   Eq9_2(g3,ST,COA)
        0.366   Eq9_2(g3,Nuclear,COA)
        0.366   Eq9_2(g4,CCGT,COA)
        0.366   Eq9_2(g4,GT,COA)
        0.366   Eq9_2(g4,ST,COA)
        0.366   Eq9_2(g4,Nuclear,COA)
       -0.366   Eq9_3(fringe,CCGT,COA)
       -0.366   Eq9_3(fringe,GT,COA)
       -0.366   Eq9_3(fringe,ST,COA)
       -0.366   Eq9_3(fringe,Nuclear,COA)
       -0.366   Eq9_3(g1,CCGT,COA)
       -0.366   Eq9_3(g1,GT,COA)
       -0.366   Eq9_3(g1,ST,COA)
       -0.366   Eq9_3(g1,Nuclear,COA)
       -0.366   Eq9_3(g2,CCGT,COA)
       -0.366   Eq9_3(g2,GT,COA)
       -0.366   Eq9_3(g2,ST,COA)
       -0.366   Eq9_3(g2,Nuclear,COA)
       -0.366   Eq9_3(g3,CCGT,COA)
       -0.366   Eq9_3(g3,GT,COA)
       -0.366   Eq9_3(g3,ST,COA)
       -0.366   Eq9_3(g3,Nuclear,COA)
       -0.366   Eq9_3(g4,CCGT,COA)
       -0.366   Eq9_3(g4,GT,COA)
       -0.366   Eq9_3(g4,ST,COA)
       -0.366   Eq9_3(g4,Nuclear,COA)

delta(COA,winter,l6)
                (.LO, .L, .UP, .M = -INF, 40.4789709376597, +INF, 0)
        1       Eq2(COA,winter,l6)
        0.244   Eq9_2(fringe,CCGT,COA)
        0.244   Eq9_2(fringe,GT,COA)
        0.244   Eq9_2(fringe,ST,COA)
        0.244   Eq9_2(fringe,Nuclear,COA)
        0.244   Eq9_2(g1,CCGT,COA)
        0.244   Eq9_2(g1,GT,COA)
        0.244   Eq9_2(g1,ST,COA)
        0.244   Eq9_2(g1,Nuclear,COA)
        0.244   Eq9_2(g2,CCGT,COA)
        0.244   Eq9_2(g2,GT,COA)
        0.244   Eq9_2(g2,ST,COA)
        0.244   Eq9_2(g2,Nuclear,COA)
        0.244   Eq9_2(g3,CCGT,COA)
        0.244   Eq9_2(g3,GT,COA)
        0.244   Eq9_2(g3,ST,COA)
        0.244   Eq9_2(g3,Nuclear,COA)
        0.244   Eq9_2(g4,CCGT,COA)
        0.244   Eq9_2(g4,GT,COA)
        0.244   Eq9_2(g4,ST,COA)
        0.244   Eq9_2(g4,Nuclear,COA)
       -0.244   Eq9_3(fringe,CCGT,COA)
       -0.244   Eq9_3(fringe,GT,COA)
       -0.244   Eq9_3(fringe,ST,COA)
       -0.244   Eq9_3(fringe,Nuclear,COA)
       -0.244   Eq9_3(g1,CCGT,COA)
       -0.244   Eq9_3(g1,GT,COA)
       -0.244   Eq9_3(g1,ST,COA)
       -0.244   Eq9_3(g1,Nuclear,COA)
       -0.244   Eq9_3(g2,CCGT,COA)
       -0.244   Eq9_3(g2,GT,COA)
       -0.244   Eq9_3(g2,ST,COA)
       -0.244   Eq9_3(g2,Nuclear,COA)
       -0.244   Eq9_3(g3,CCGT,COA)
       -0.244   Eq9_3(g3,GT,COA)
       -0.244   Eq9_3(g3,ST,COA)
       -0.244   Eq9_3(g3,Nuclear,COA)
       -0.244   Eq9_3(g4,CCGT,COA)
       -0.244   Eq9_3(g4,GT,COA)
       -0.244   Eq9_3(g4,ST,COA)
       -0.244   Eq9_3(g4,Nuclear,COA)

delta(COA,winter,l7)
                (.LO, .L, .UP, .M = -INF, 40.4789709376597, +INF, 0)
        1       Eq2(COA,winter,l7)
        0.244   Eq9_2(fringe,CCGT,COA)
        0.244   Eq9_2(fringe,GT,COA)
        0.244   Eq9_2(fringe,ST,COA)
        0.244   Eq9_2(fringe,Nuclear,COA)
        0.244   Eq9_2(g1,CCGT,COA)
        0.244   Eq9_2(g1,GT,COA)
        0.244   Eq9_2(g1,ST,COA)
        0.244   Eq9_2(g1,Nuclear,COA)
        0.244   Eq9_2(g2,CCGT,COA)
        0.244   Eq9_2(g2,GT,COA)
        0.244   Eq9_2(g2,ST,COA)
        0.244   Eq9_2(g2,Nuclear,COA)
        0.244   Eq9_2(g3,CCGT,COA)
        0.244   Eq9_2(g3,GT,COA)
        0.244   Eq9_2(g3,ST,COA)
        0.244   Eq9_2(g3,Nuclear,COA)
        0.244   Eq9_2(g4,CCGT,COA)
        0.244   Eq9_2(g4,GT,COA)
        0.244   Eq9_2(g4,ST,COA)
        0.244   Eq9_2(g4,Nuclear,COA)
       -0.244   Eq9_3(fringe,CCGT,COA)
       -0.244   Eq9_3(fringe,GT,COA)
       -0.244   Eq9_3(fringe,ST,COA)
       -0.244   Eq9_3(fringe,Nuclear,COA)
       -0.244   Eq9_3(g1,CCGT,COA)
       -0.244   Eq9_3(g1,GT,COA)
       -0.244   Eq9_3(g1,ST,COA)
       -0.244   Eq9_3(g1,Nuclear,COA)
       -0.244   Eq9_3(g2,CCGT,COA)
       -0.244   Eq9_3(g2,GT,COA)
       -0.244   Eq9_3(g2,ST,COA)
       -0.244   Eq9_3(g2,Nuclear,COA)
       -0.244   Eq9_3(g3,CCGT,COA)
       -0.244   Eq9_3(g3,GT,COA)
       -0.244   Eq9_3(g3,ST,COA)
       -0.244   Eq9_3(g3,Nuclear,COA)
       -0.244   Eq9_3(g4,CCGT,COA)
       -0.244   Eq9_3(g4,GT,COA)
       -0.244   Eq9_3(g4,ST,COA)
       -0.244   Eq9_3(g4,Nuclear,COA)

REMAINING 33 ENTRIES SKIPPED

---- price  energy price in USD per MWh

price(COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 8.86097499999981, +INF, 0)
        1       Eq1(COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s1,s1)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s1)
        1       Eq10_1(East,EOA,COA,winter,l1,s1,s1)
       -1       Eq10_1(west,COA,WOA,winter,l1,s1,s1)
        1       Eq10_1(west,WOA,COA,winter,l1,s1,s1)

price(COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq1(COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s1,s2)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s2)
        1       Eq10_1(East,EOA,COA,winter,l1,s1,s2)
       -1       Eq10_1(west,COA,WOA,winter,l1,s1,s2)
        1       Eq10_1(west,WOA,COA,winter,l1,s1,s2)

price(COA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 8.86097500000327, +INF, 0)
        1       Eq1(COA,winter,l1,s2,s1)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_1(fringe,GT,COA,winter,l1,s2,s1)
        1       Eq9_1(fringe,ST,COA,winter,l1,s2,s1)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s2,s1)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_1(g1,GT,COA,winter,l1,s2,s1)
        1       Eq9_1(g1,ST,COA,winter,l1,s2,s1)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s2,s1)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_1(g2,GT,COA,winter,l1,s2,s1)
        1       Eq9_1(g2,ST,COA,winter,l1,s2,s1)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s2,s1)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_1(g3,GT,COA,winter,l1,s2,s1)
        1       Eq9_1(g3,ST,COA,winter,l1,s2,s1)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s2,s1)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_1(g4,GT,COA,winter,l1,s2,s1)
        1       Eq9_1(g4,ST,COA,winter,l1,s2,s1)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s2,s1)
       -1       Eq10_1(East,COA,EOA,winter,l1,s2,s1)
        1       Eq10_1(East,EOA,COA,winter,l1,s2,s1)
       -1       Eq10_1(west,COA,WOA,winter,l1,s2,s1)
        1       Eq10_1(west,WOA,COA,winter,l1,s2,s1)

REMAINING 765 ENTRIES SKIPPED

---- price_trans  tranmission price in USD per MWh

price_trans(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s1)
       -1       Eq10_1(East,EOA,COA,winter,l1,s1,s1)
        1       Eq11_5(East,winter,l1,s1,s1)

price_trans(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s2)
       -1       Eq10_1(East,EOA,COA,winter,l1,s1,s2)
        1       Eq11_5(East,winter,l1,s1,s2)

price_trans(East,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
       -1       Eq10_1(East,COA,EOA,winter,l1,s2,s1)
       -1       Eq10_1(East,EOA,COA,winter,l1,s2,s1)
        1       Eq11_5(East,winter,l1,s2,s1)

REMAINING 573 ENTRIES SKIPPED

---- price_trans_pos  tranmission price in USD per MWh

price_trans_pos(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
        1       Eq11_1(East,winter,l1,s1,s1)
       -1       Eq11_5(East,winter,l1,s1,s1)

price_trans_pos(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq11_1(East,winter,l1,s1,s2)
       -1       Eq11_5(East,winter,l1,s1,s2)

price_trans_pos(East,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
        1       Eq11_1(East,winter,l1,s2,s1)
       -1       Eq11_5(East,winter,l1,s2,s1)

REMAINING 573 ENTRIES SKIPPED

---- alpha  shadow prices for the non-negative investment constraints in USD per  MW

alpha(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 19082.621750187)
        1       Eq9_2(fringe,CCGT,COA)

alpha(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 19626.9950123901)
        1       Eq9_2(fringe,CCGT,EOA)

alpha(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5307.03034534746)
        1       Eq9_2(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- eta_high  shadow prices for the capacity retirment constraint in USD per  MW

eta_high(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0.349206431747431, +INF, 0)
       -1       Eq9_3(fringe,CCGT,COA)

eta_high(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 2.56736999999954)
       -1       Eq9_3(fringe,CCGT,EOA)

eta_high(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0.284961295589241, +INF, 0)
       -1       Eq9_3(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- eta_low  

eta_low(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 131.528467367538, +INF, 0)
        1       Eq9_3(fringe,CCGT,COA)

eta_low(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 131.179260935843, +INF, 0)
        1       Eq9_3(fringe,CCGT,EOA)

eta_low(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 131.464222231423, +INF, 0)
        1       Eq9_3(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- arbitrage  TSO outgoing electricity arbitrage from node r on line n

arbitrage(East,COA,EOA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -0.0364  Eq1(COA,winter,l1,s1,s1)
        0.022   Eq1(EOA,winter,l1,s1,s1)
       -1       Eq11_2(East,winter,l1,s1,s1)
        1       Eq_arb(East,COA,EOA,winter,l1,s1,s1)

arbitrage(East,COA,EOA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -0.0364  Eq1(COA,winter,l1,s1,s2)
        0.022   Eq1(EOA,winter,l1,s1,s2)
       -1       Eq11_2(East,winter,l1,s1,s2)
        1       Eq_arb(East,COA,EOA,winter,l1,s1,s2)

arbitrage(East,COA,EOA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -0.0311  Eq1(COA,winter,l1,s2,s1)
        0.0204  Eq1(EOA,winter,l1,s2,s1)
       -1       Eq11_2(East,winter,l1,s2,s1)
        1       Eq_arb(East,COA,EOA,winter,l1,s2,s1)

REMAINING 1149 ENTRIES SKIPPED

---- trans  electricity trans by on line n

trans(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq11_2(East,winter,l1,s1,s1)
       -1       Eq11_4(East,winter,l1,s1,s1)

trans(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq11_2(East,winter,l1,s1,s2)
       -1       Eq11_4(East,winter,l1,s1,s2)

trans(East,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq11_2(East,winter,l1,s2,s1)
       -1       Eq11_4(East,winter,l1,s2,s1)

REMAINING 573 ENTRIES SKIPPED

---- tau  shadow prices for the high capacity constraint in USD per MW

tau(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.22)
       -2.0492  Eq11_1(East,winter,l1,s1,s1)

tau(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -2.0492  Eq11_1(East,winter,l1,s1,s2)

tau(East,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.22)
       -2.0492  Eq11_1(East,winter,l1,s2,s1)

REMAINING 573 ENTRIES SKIPPED

---- shadows_arbitrage  shadow prices for no-negative incoming arbitrage constriant in USD per MW

shadows_arbitrage(East,COA,EOA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 3.84160000000002, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s1,s1)

shadows_arbitrage(East,COA,EOA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s1,s2)

shadows_arbitrage(East,COA,EOA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = 0, 3.84160000000349, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s2,s1)

REMAINING 1149 ENTRIES SKIPPED
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/24/16 10:03:39 Page 5
Dynamic Programming Investment
Model Statistics    SOLVE CMO Using MCP From line 696


MODEL STATISTICS

BLOCKS OF EQUATIONS          21     SINGLE EQUATIONS       55,812
BLOCKS OF VARIABLES          18     SINGLE VARIABLES       55,812
NON ZERO ELEMENTS       173,844     NON LINEAR N-Z              0
DERIVATIVE POOL              10     CONSTANT POOL              16
CODE LENGTH                   0


GENERATION TIME      =        0.235 SECONDS     37 MB  24.1.3 r41464 WEX-WEI


EXECUTION TIME       =        1.094 SECONDS     37 MB  24.1.3 r41464 WEX-WEI
