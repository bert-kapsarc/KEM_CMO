GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/12/16 10:57:32 Page 1
Dynamic Programming Investment
C o m p i l a t i o n


       
   5   
   6  *$INCLUDE ACCESS_HLC.gms
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Macros.gms
   8  ********************************************************************************
   9  *        MACROS for KEM
  10  ********************************************************************************
  11   
  12  *        Time dependant discount factor
  13  $MACRO   discfact(i,t)                   1/(1+i)**(ord(t)-1)
  14   
  15  *        sum of discount factors over lifetime T of capital
  16  $MACRO   sumdiscfact(T,i,n)              sum(n$(ord(n)<=T),discfact(i,n))
  17   
  18  *        Numerator of discounting coefficients
  19  *        Accounts for recursive dynmic solves when size of t greater than tt
  20  *        Consider final time period of tt to be a long term static solution
  21  $MACRO   intdiscfact(i,t,tt) sum(tt$(ord(tt)>=ord(t)),1/(1+i)**(ord(tt)-ord(t)))
  22   
  23  $MACRO   discounting(Time,i,n,t,tt)    intdiscfact(i,t,tt)/sumdiscfact(Time,i,n)
  24   
  25  * Solar position equations used for CSP implementation (Parameters described in power sub-model):
  26  * the parameter table "Dayofyear" in the power sub-model.
  27  * long and lat are specificed in power sub-model for each region;
  28   
  29  $MACRO   earthpos(Dayofyear)            ((Dayofyear-1)*360/365)
  30   
  31  $MACRO   EOT(Dayofyear)                  (229.2*(0.000075+0.001868*COS(earthpos(Dayofyear)*pi/180)-0.032077*SIN(earthpos(Dayofyear)*pi/180)-0.014615*COS(2*(earthpos(Dayofyear)*pi/180))-0.04089*S
      IN(2*(earthpos(Dayofyear)*pi/180))))
  32   
  33  $MACRO   solhr(hr,Dayofyear,long,tzone)       (((1$(frac(hr/24)=0)+frac(hr/24))*24*60-(long-tzone)*4+EOT(Dayofyear)))/60
  34  $MACRO   hourangle(solhour)                   (solhour-12)*360/24
  35   
  36  $MACRO   soldecl(Dayofyear)              (0.3963723-22.9132745*COS(earthpos(Dayofyear)*pi/180)+4.0254304*SIN(earthpos(Dayofyear)*pi/180)-0.387205*COS(2*earthpos(Dayofyear)*pi/180)+0.05196728*SIN
      (2*earthpos(Dayofyear)*pi/180)-0.1545267*COS(3*earthpos(Dayofyear)*pi/180)+0.0847977*SIN(3*earthpos(Dayofyear)*pi/180))
  37  $MACRO   solalt(hrangle,solardeclination,lat)   (arcsin(COS(lat*pi/180)*COS(hrangle*pi/180)*COS(solardeclination*pi/180)+SIN(lat*pi/180)*SIN(solardeclination*pi/180))*180/pi)
  38  $MACRO   solazim(hrangle,solardeclination,lat,solaralt)  (180/pi*arccos((SIN(solardeclination*pi/180)*COS(lat*pi/180)-COS(solardeclination*pi/180)*SIN(lat*pi/180)*COS(hrangle*pi/180))/COS(solara
      lt*pi/180)))
  39  $MACRO   Gamma(solarazimuth,surfaceazimuth)  (ABS(solarazimuth-surfaceazimuth))
  40   
  41   
  42  $MACRO   Incidence(solaralt,gammaa,orientation)    (180/pi*arccos(COS(solaralt*pi/180)*COS(gammaa*pi/180)*SIN(orientation*pi/180)+SIN(solaralt*pi/180)*COS(orientation*pi/180)))
  43  *orientation is the tilt angle of the surface, 0 for horizontal surfaces and 90 degrees for vertical surfaces.
  44   
FUNCLIBIN  stolib stodclib
Function Library stolib
Random deviates, probability density function, cumulative distribution function, inverse cumulative distribution function
GAMS Development Corporation

Mod. Function                          Description
Type

none SetSeed(SEED)                     Define the seed for random number gen
none dUniform(LOW,HIGH)                Uniform distribution
DNLP pdfUniform(x,LOW,HIGH)            Probability density function for uniform distribution
DNLP cdfUniform(x,LOW,HIGH)            Cumulative distribution function for uniform distribution
DNLP icdfUniform(x,LOW,HIGH)           Inverse cumulative distribution function for uniform distribution
none dNormal(MEAN,STD_DEV)             Normal distribution
DNLP pdfNormal(x,MEAN,STD_DEV)         Probability density function for normal distribution
DNLP cdfNormal(x,MEAN,STD_DEV)         Cumulative distribution function for normal distribution
DNLP icdfNormal(x,MEAN,STD_DEV)        Inverse cumulative distribution function for normal distribution
none dInvGaussian(MEAN,SHAPE)          Inverse Gaussian distribution
DNLP pdfInvGaussian(x,MEAN,SHAPE)      Probability density function for inverse Gaussian distribution
DNLP cdfInvGaussian(x,MEAN,SHAPE)      Cumulative distribution function for inverse Gaussian distribution
DNLP icdfInvGaussian(x,MEAN,SHAPE)     Inverse cumulative distribution function for inverse Gaussian distribution
none dRayleigh(SIGMA)                  Rayleigh distribution
DNLP pdfRayleigh(x,SIGMA)              Probability density function for Rayleigh distribution
DNLP cdfRayleigh(x,SIGMA)              Cumulative distribution function for Rayleigh distribution
DNLP icdfRayleigh(x,SIGMA)             Inverse cumulative distribution function for Rayleigh distribution
none dCauchy(LOCATION,SCALE)           Cauchy distribution
DNLP pdfCauchy(x,LOCATION,SCALE)       Probability density function for Cauchy distribution
DNLP cdfCauchy(x,LOCATION,SCALE)       Cumulative distribution function for Cauchy distribution
DNLP icdfCauchy(x,LOCATION,SCALE)      Inverse cumulative distribution function for Cauchy distribution
none dLognormal(MEAN,STD_DEV)          Lognormal distribution
DNLP pdfLognormal(x,MEAN,STD_DEV)      Probability density function for Lognormal distribution
DNLP cdfLognormal(x,MEAN,STD_DEV)      Cumulative distribution function for Lognormal distribution
DNLP icdfLognormal(x,MEAN,STD_DEV)     Inverse cumulative distribution function for Lognormal distribution
none dExponential(LAMBDA)              Exponential distribution
DNLP pdfExponential(x,LAMBDA)          Probability density function for Exponential distribution
DNLP cdfExponential(x,LAMBDA)          Cumulative distribution function for Exponential distribution
DNLP icdfExponential(x,LAMBDA)         Inverse cumulative distribution function for Exponential distribution
none dLogistic(LOCATION,SCALE)         Logistic distribution
DNLP pdfLogistic(x,LOCATION,SCALE)     Probability density function for Logistic distribution
DNLP cdfLogistic(x,LOCATION,SCALE)     Cumulative distribution function for Logistic distribution
DNLP icdfLogistic(x,LOCATION,SCALE)    Inverse cumulative distribution function for Logistic distribution
none dGamma(SHAPE,SCALE)               Gamma distribution
DNLP pdfGamma(x,SHAPE,SCALE)           Probability density function for Gamma distribution
DNLP cdfGamma(x,SHAPE,SCALE)           Cumulative distribution function for Gamma distribution
DNLP icdfGamma(x,SHAPE,SCALE)          Inverse cumulative distribution function for Gamma distribution
none dChiSquare(DF)                    Chi square distribution
none DF(DF_1,DF_2)                     F distribution
DNLP pdfChiSquare(x,DF)                Probability density function for Chi square distribution
DNLP cdfChiSquare(x,DF)                Cumulative distribution function for Chi square distribution
DNLP icdfChiSquare(x,DF)               Inverse cumulative distribution function for Chi square distribution
none dWeibull(SHAPE,SCALE)             Weibull distribution
DNLP pdfWeibull(x,SHAPE,SCALE)         Probability density function for Weibull distribution
DNLP cdfWeibull(x,SHAPE,SCALE)         Cumulative distribution function for Weibull distribution
DNLP icdfWeibull(x,SHAPE,SCALE)        Inverse cumulative distribution function for Weibull distribution
none dBeta(SHAPE_1,SHAPE_2)            Beta distribution
DNLP pdfBeta(x,SHAPE_1,SHAPE_2)        Probability density function for Beta distribution
DNLP cdfBeta(x,SHAPE_1,SHAPE_2)        Cumulative distribution function for Beta distribution
DNLP icdfBeta(x,SHAPE_1,SHAPE_2)       Inverse cumulative distribution function for Beta distribution
DNLP pdfF(x,DF_1,DF_2)                 Probability density function for F distribution
DNLP cdfF(x,DF_1,DF_2)                 Cumulative distribution function for F distribution
DNLP icdfF(x,DF_1,DF_2)                Inverse cumulative distribution function for F distribution
none dStudentT(DF)                     Students T distribution
DNLP pdfStudentT(x,DF)                 Probability density function for Students T distribution
DNLP cdfStudentT(x,DF)                 Cumulative distribution function for Students T distribution
DNLP icdfStudentT(x,DF)                Inverse cumulative distribution function for Students T distribution
none dPareto(SCALE,SHAPE)              Pareto distribution
DNLP pdfPareto(x,SCALE,SHAPE)          Probability density function for Pareto distribution
DNLP cdfPareto(x,SCALE,SHAPE)          Cumulative distribution function for Pareto distribution
DNLP icdfPareto(x,SCALE,SHAPE)         Inverse cumulative distribution function for Pareto distribution
none dGumbel(LOCATION,SCALE)           Gumbel distribution
DNLP pdfGumbel(x,LOCATION,SCALE)       Probability density function for Gumbel distribution
DNLP cdfGumbel(x,LOCATION,SCALE)       Cumulative distribution function for Gumbel distribution
DNLP icdfGumbel(x,LOCATION,SCALE)      Inverse cumulative distribution function for Gumbel distribution
none dLaplace(MEAN,SCALE)              Laplace distribution
DNLP pdfLaplace(x,MEAN,SCALE)          Probability density function for Laplace distribution
DNLP cdfLaplace(x,MEAN,SCALE)          Cumulative distribution function for Laplace distribution
DNLP icdfLaplace(x,MEAN,SCALE)         Inverse cumulative distribution function for Laplace distribution
none dTriangular(LOW,MID,HIGH)         Triangular distribution
DNLP pdfTriangular(x,LOW,MID,HIGH)     Probability density function for Triangular distribution
DNLP cdfTriangular(x,LOW,MID,HIGH)     Cumulative distribution function for Triangular distribution
DNLP icdfTriangular(x,LOW,MID,HIGH)    Inverse cumulative distribution function for Triangular distribution
none dUniformInt(LOW,HIGH)             Uniform integer distribution
none pdfUniformInt(x,LOW,HIGH)         Probability density function for Uniform integer distribution
none cdfUniformInt(x,LOW,HIGH)         Cumulative distribution function for Uniform integer distribution
none icdfUniformInt(x,LOW,HIGH)        Inverse cumulative distribution function for Uniform integer distribution
none dBinomial(N,P)                    Binomial distribution
none pdfBinomial(x,N,P)                Probability density function for Binomial distribution
none cdfBinomial(x,N,P)                Cumulative distribution function for Binomial distribution
none icdfBinomial(x,N,P)               Inverse cumulative distribution function for Binomial distribution
none dNegBinomial(FAILURES,P)          Negative Binomial distribution
none pdfNegBinomial(x,FAILURES,P)      Probability density function for Negative Binomial distribution
none cdfNegBinomial(x,FAILURES,P)      Cumulative distribution function for Negative Binomial distribution
none icdfNegBinomial(x,FAILURES,P)     Inverse cumulative distribution function for Negative Binomial distribution
none dGeometric(P)                     Geometric distribution
none pdfGeometric(x,P)                 Probability density function for Geometric distribution
none cdfGeometric(x,P)                 Cumulative distribution function for Geometric distribution
none icdfGeometric(x,P)                Inverse cumulative distribution function for Geometric distribution
none dHyperGeo(TOTAL,GOOD,TRIALS)      HyperGeometric distribution
none pdfHyperGeo(x,TOTAL,GOOD,TRIALS)  Probability density function for HyperGeometric distribution
none cdfHyperGeo(x,TOTAL,GOOD,TRIALS)  Cumulative distribution function for HyperGeometric distribution
none icdfHyperGeo(x,TOTAL,GOOD,TRIALS) Inverse cumulative distribution function for HyperGeometric distribution
none dLogarithmic(P-FACTOR)            Logarithmic distribution
none pdfLogarithmic(x,P-FACTOR)        Probability density function for Logarithmic distribution
none cdfLogarithmic(x,P-FACTOR)        Cumulative distribution function for Logarithmic distribution
none icdfLogarithmic(x,P-FACTOR)       Inverse cumulative distribution function for Logarithmic distribution
none dPoisson(LAMBDA)                  Poisson distribution
none pdfPoisson(x,LAMBDA)              Probability density function for Poisson distribution
none cdfPoisson(x,LAMBDA)              Cumulative distribution function for Poisson distribution
none icdfPoisson(x,LAMBDA)             Inverse cumulative distribution function for Poisson distribution

  46  function cdfnorm     /stolib.cdfnormal/;
  47   
  48  scalar trading set to 1 to allow trading between regions by firms /1/;
  49   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\SetsAndVariables.gms
  51  Sets i generators       /fringe, g1*g4/
  52       h technology       /CCGT, GT, ST, Nuclear/
  53       l market segment   /l1*l8/
  54       seasons  /winter,summer,spring-fall/
  55  *     e(seasons) seasons for running the model /summer/
  56       e(seasons) seasons for running the model /winter,summer,spring-fall/
  57       winter(seasons) /winter/
  58       spring(seasons) /spring-fall/
  59       summer(seasons) /summer/
  60       fall(seasons) /spring-fall/
  61   
  62       m(l) capacity market /l5,l6,l7/
  63       s scenarios        /s1*s5/
  64       r regions          /COA,EOA,SOA,WOA/
  65       n power_lines      /East,South,west/
  66                                           ;
  67   
  68  *     m(l) = no;
  69   
  70   
  71  Alias (h,hh), (i,j), (m,mm), (r,rr);
  72   
  73  alias (l,ll), (i,ii), (s,ss), (h,hh), (r,rr,rrr), (e,ee);
  74   
  75  variables
  76           inv(i,h,r)  investment by player i in technology h
  77           ret(i,h,r)  retirement of technology h in region r by player i
  78   
  79           Cap_avail(i,h,r) available capacity of player i of technolgy h in region r in MW
  80           Q(i,h,r,seasons,l,s)  generation quantity from a player i at market l in scenario in MW
  81           sales(i,r,seasons,l,s) sales of firm in region r market l scenario s in MW
  82           lambda_high(i,h,r,seasons,l,s) shadow prices for the high capacity constraint in USD per  MWh
  83           lambda_low(i,h,r,seasons,l,s)  shadows prices for low constraint in USD per  MWh
  84           delta(r,seasons,l)   shadow prices for the capacity market in USD per  MW per hour
  85           price(r,seasons,l,s) energy price in USD per MWh
  86           price_trans(n,seasons,l,s) tranmission price in USD per MWh
  87           price_trans_pos(n,r,seasons,l,s) tranmission price in USD per MWh
  88           price_trans_neg(n,r,seasons,l,s) tranmission price in USD per MWh
  89           alpha(i,h,r) shadow prices for the non-negative investment constraints in USD per  MW
  90           eta_high(i,h,r) shadow prices for the capacity retirment constraint in USD per  MW
  91           eta_low(i,h,r)
  92   
  93           arbitrage(n,r,rr,seasons,l,s) TSO outgoing electricity arbitrage from node r on line n
  94           trade(i,n,r,rr,seasons,l,s) outgoing electricity trade by firm i from node r on line n
  95           trans(n,seasons,l,s) electricity trans by on line n
  96   
  97           tau(n,seasons,l,s) shadow prices for the high capacity constraint in USD per MW
  98           zeta(i,n,r,rr,seasons,l,s) shadow prices for the outgoing no-negative trade constraint in USD per MW
  99           shadows_arbitrage(n,r,rr,seasons,l,s) shadow prices for no-negative incoming arbitrage constriant in USD per MW
 100           shadows_trans(n,seasons,l,s) shadow prices for the positive transmission constriant in USD per MW
 101            ;
 102   
 103  positive variables lambda_high, lambda_low,  alpha,
 104                     eta_high,eta_low, psi
 105                     tau,zeta,shadows_arbitrage,shadows_trans
 106                     ;
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Demand.gms
 108  *$INCLUDE ACCESS_HLC.gms
 110   
 111  set hrs            hours in the load curve data set /1*8760/
 112  parameter HLC(r,hrs) hourly load curves for represenative day in each month in MW
 113  parameter ELlcgw(r,seasons,l) power demand load blocks
 114   
 115  ;
GDXIN   D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\db\load.gdx
--- LOAD  HLC = 1:HLC
 119   
 120   
 121   
 122  parameter day(hrs)    day for each hour in a year
 123            hour(hrs) represents each hour in the hourly demand data year from 0 to 23
 124  ;
 125   
 126   
 127            day(hrs) = floor(ord(hrs)/24)+1;
 128            day('8760') = 1;
 129   
 130   
 131            hour(hrs)=ord(hrs)-(day(hrs)-1)*24
 132   
 133  table duration(seasons,l) duration of segemt l in region r and season e
 134   
 135  * these are the hour blocks used to average the actual hourly demand patterns
 136  * must sum to 24
 137  *$ontext
 138                                   l1  l2  l3  l4  l5  l6  l7  l8
 139  (winter,spring-fall,summer)       4   4   4   2   3   2   2   3
 140  *$offtext
 141   
 142  *                                 l1  l2
 143  *(winter,spring-fall,summer)      12  12
 144   ;
 145   
 146   parameter block_start(seasons,l) start hour for hour in load block l
 147             block_end(seasons,l);
 148   
 149   block_start(seasons,l) = sum(ll$(ord(ll)<ord(l)),duration(seasons,ll));
 150   block_end(seasons,l) = sum(ll$(ord(ll)<=ord(l)),duration(seasons,ll));
 151   
 152  parameter start_day(seasons) first day to sample hourly data from for season e
 153   
 154  /
 155  winter 304
 156  spring-fall 61
 157  summer 122
 158  /
 159            end_day(seasons) last day to sample hourlyy data for season e
 160   
 161   
 162  number_of_days(seasons)
 163         ;
 164  scalar
 165           start_day_fall first day to sample hourly data from for fall season /243/
 166           end_day_fall first day to sample hourly data from
 167   
 168   
 169   
 170   
 171  ;
 172  end_day('winter') = start_day('spring-fall')-1;
 173  end_day('spring-fall') = start_day('summer')-1;
 174  end_day('summer') = start_day_fall-1;
 175  end_day_fall = start_day('winter')-1;
 176   
 177  number_of_days(seasons)$(not winter(seasons)) = end_day(seasons)-start_day(seasons)+1;
 178  number_of_days('spring-fall') = number_of_days('spring-fall')+end_day_fall-start_day_fall+1;
 179  number_of_days('winter') = smax(hrs,day(hrs))-sum(seasons,number_of_days(seasons));
 180   
 181   
 182     duration(seasons,l)=duration(seasons,l)*number_of_days(seasons);
 183   
 184  ELlcgw(r,e,l) =
 185  sum(hrs$(
 186                  (        (day(hrs)>=start_day(e) and
 187                            day(hrs)<=end_day(e) and (spring(e) or summer(e)) ) or
 188   
 189                           (day(hrs)>=start_day_fall and
 190                            day(hrs)<=end_day_fall and fall(e)) or
 191   
 192                           ((day(hrs)>=start_day(e) or day(hrs)<=end_day(e)) and
 193                                   winter(e))
 194   
 195                  )and
 196                  hour(hrs)>=block_start(e,l) and
 197                  hour(hrs)<block_end(e,l)
 198           ), HLC(r,hrs))/(duration(e,l))
 199  ;
 200   
 201   
 202  if(card(e)=1 ,
 203  duration(e,l)$(card(e)=1)=duration(e,l)*365/number_of_days(e);
 204   
 205  );
 206   
 207   
 208   
 209   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\parameters_2.gms
 211  Parameters
 212             v(i)   CONJECTURAL VARIANTION for production by player /g1 0, g2 0, g3 0, g4 0, fringe -1/
 213             z(i)   CONJECTURAL VARIANTION for capacity by player /g1 0, g2 0, g3 0, g4 0, fringe -1/
 214   
 215   
 216             capital_cost(h) Capital cost in USD per GW /CCGT 1740, GT 1485, ST 2120, Nuclear 4896/
 217             ic(h)  investment cost USD per GW
 218             om(h) Fixed O&M cost USD per GW  /GT 11.2, CCGT 12.4, ST 11.2, Nuclear 68.8/
 219             K0(h,r) existent capacity of technology h in region r before liberalization
 220             kind0(i,h,r) initial capacity by technology and firm in each region in GW
 221             K(r,l) minimum installed capacity available to sell in region r and market segment l
 222             EL_demand(r,e,l,s) Electricity Demand GW
 223             d(e,l) duration of segemt l in region r (deterministic)
 224             prob(s) probability off each scenario
 225   
 226  *Design operating life for steam, GT, and CC from KFUPM generation report.
 227             lifetime(h) plant lifetime /CCGT 30, GT 25, ST 35, Nuclear 60/
 228             discrate discount rate used for power plant investments /0.06/
 229   
 230   
 231   
 232  ;
 233   
 234           prob(s) = 1/card(s);
 235           parameter discoef;
 236           set t dummy time set /2020/
 237           set index /1*1000/
 238               tt(t) /2020/
 239           ;
 240   
 241  *        Discounting plant capital costs over lifetime
 242           discoef(h,t) = sum(tt$(ord(tt)>=ord(t)),1/(1+discrate)**(ord(tt)-ord(t)))/sum(index$(ord(index)<=lifetime(h)),1/(1+discrate)**(ord(index)-1));
 243   
 244           ic(h)=capital_cost(h)*discoef(h,'2020');
 245   
 246   
 247  Parameters ici(h)  investment cost
 248             icr(h)  retirement capacity cost;
 249   
 250  ici(h) = ic(h)
 251  ;
 252  icr(h) = ic(h)*0.1;
 253  *icr(h) = 0;
 254   
 255   
 256   
 257  parameter mc(h,r,s) marginal cost in USD per MWh  ;
 258   
 259  mc('CCGT',r,s)  = 1.2449 ;
 260  mc('CCGT','EOA',s)  = 1.1833 ;
 261  mc('GT',r,s) =  1.6840;
 262  mc('ST',r,s) =  1.2261;
 263  mc('Nuclear',r,s) = 6.9;
 264  *mc('ULtrsc',r,s)  = 1.2449
 265   
 266   
 267  * Uranium-235 use is in g/GWh
 268  parameter heat_rate(h) fueal burn rate in mmbtu and KG per MWH
 269  /
 270  CCGT               6.09286
 271  GT                 12.818
 272  ST                 8.949
 273  Nuclear            0.120
 274  *Ultrsc              1.217
 275  /
 276  ;
 277   
 278   
 279  parameter fuel_price(h) price of fuels in USD per mmbtu and KG U235
 280  /
 281  CCGT               1.25
 282  GT                 1.25
 283  ST                 1.25
 284  Nuclear            113
 285  *Ultrsc             50
 286  /
 287  ;
 288   
 289  loop(s,
 290  mc(h,r,s) = mc(h,r,s)+heat_rate(h)*fuel_price(h)*1;
 291  *uniform(1,1)
 292  );
 293  ;
 294   
 295   
 296  parameter  beta(h,r,l) available capacity in market l
 297  ;
 298  beta(h,r,l)=1;
 299   
 300  Parameters  a(r,e,l,s) intercept of energy demand curve,
 301              b(r,e,l,s) slope of energy demand curve
 302              theta(r,e,l) intercept of capacity demand curve,
 303              xi(r,e,l) slope of capacity demand curve;
 304   
      Table K0(h,r)
            COA        EOA          SOA          WOA
      CCGT  1360.6     6496.37      0            9144.97
      GT    14185.3    9540.3       4113.14      9150.26
      ST    706        13252.8      1020         16399.2
      ;
       
      Table K0(h,r)
            COA   EOA   SOA   WOA
      CCGT  0     0     0     0
      GT    0     0     0     0
      ST    0     0     0     0
      ;
 320   
 321   
 322  table kind0(i,h,r) firms existing generation capacity in GW
 323   
 324                   COA             EOA             SOA             WOA
 325   
 326  g1.CCGT          1.3606          0               0               0
 327  g1.GT            13.0693         0               0               0
 328  g1.ST            0               0               0               0
 329   
 330  g2.CCGT          0               3.929           0               0
 331  g2.GT            0               5.8315          0               0
 332  g2.ST            0               6.756           0               0
 333   
 334  g3.CCGT          0               0               0               0
 335  g3.GT            0               0               4.11314         0
 336  g3.ST            0               0               0               0
 337   
 338  g4.CCGT          0               0               0               1.288
 339  g4.GT            0               0               0               8.5497
 340  g4.ST            0               0               0               9.8884
 341   
 342  fringe.CCGT      0               2.56737         0               0
 343  fringe.GT        1.116           3.7085          0               6.0056
 344  fringe.ST        0.706           6.4968          1.020           7.12936
 345  ;
 346   
 347  parameter kind_trans0(n) transmission capacity in GW
 348   /
 349           East    5.22
 350           South   1.5
 351           West    1.2
 352   /
 353        ;
 354  *WOA   0     1.16
 355   
 356  *Data for 2014 inter-regional transmission capacities were obtained from ECRA correspondence.
 357           parameter phi(n)  oper. and maint. cost of transmission in USD per MWH
 358           /
 359            West   3.71
 360            South  3.73
 361            East   3.78
 362           /
                      WOA   SOA     COA     EOA
               WOA   3.49   3.73    3.71    4.33
               SOA   3.73   3.49    4.10    4.50
               COA   3.71   4.1     3.49    3.78
               EOA   4.33   4.5     3.78    3.49
 370  ;
 371   
 372  Parameter capfactor(h) capacity factors for dispatchable plants
 373  /ST      0.885
 374   GT      0.923
 375   CCGT    0.885
 376   Nuclear 0.860
 377  /
 378   
 379   
 380   
 381  parameter  x(i,r,rr)   CONJECTURAL VARIANTION for electricity by player between region r and rr
 382  ;
 383  x(i,r,rr)=v(i);
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\equations.gms
 385  set trans_node(n,r),trans_node_end(n,r);
 386   
 387  trans_node('WEST','WOA')=yes;
 388  trans_node_end('WEST','COA')=yes;
 389   
 390  trans_node('South','SOA')=yes;
 391  trans_node_end('South','WOA')=yes;
 392   
 393  trans_node('East','EOA')=yes;
 394  trans_node_end('East','COA')=yes;
 395   
 396   
 397  set r_trans(n,r,rr), r_trade(n,r,rr);
 398   
 399  r_trans(n,r,rr)$(trans_node(n,r) and trans_node_end(n,rr) and ord(r)<>ord(rr))=yes;
 400  r_trade(n,r,rr)$(r_trans(n,r,rr))=yes;
 401  r_trade(n,rr,r)$(r_trans(n,r,rr))=yes;
 402   
 403   
 404           trade.fx(i,n,r,rr,e,l,s)$(trading<>1)=0;
 405  *         arbitrage.fx(r,rr,l,s)=0;
 406   
 407  *        Fix capacity price
 408  *         delta.l(r,m) = 0;
 409   
 410  Equations
 411           Eq1(r,e,l,s)              Equation (1)
 412           Eq2(r,e,l)                Equation (1)
 413           Eq9_1(i,h,r,e,l,s)        Equation (8.1)
 414           Eq9_2(i,h,r)              Equation (8.2)
 415           Eq9_3(i,h,r)              Equation (8.3)
 416           Eq9_4(i,n,r,rr,e,l,s)       Equation (8.4)
 417           Eq9_5(i,h,r,e,l,s)
 418           Eq9_6(i,h,r)
 419           Eq9_7(i,h,r)
 420           Eq9_8(i,r,e,l,s)
 421   
 422           Eq10_1(n,r,rr,e,l,s)
 423   
 424           Eq11_1(n,e,l,s)
 425           Eq11_2(n,e,l,s)
 426           Eq11_3(n,e,l,s)
 427   
 428           Eq_q(i,h,r,e,l,s)
 429           Eq_inv(i,h,r)
 430           Eq_ret(i,h,r)
 431           Eq_trade(i,n,r,rr,e,l,s)
 432           Eq_arb(n,r,rr,e,l,s)
 433   
 434  ;
 435  Eq1(r,e,l,s)..    price(r,e,l,s)=e=
 436                       a(r,e,l,s)-b(r,e,l,s)*sum(j,sales(j,r,e,l,s))
 437                       +b(r,e,l,s)*(
 438                            sum((n,rr)$r_trade(n,r,rr),arbitrage(n,r,rr,e,l,s))
 439                            -sum((n,rr)$r_trade(n,rr,r),arbitrage(n,rr,r,e,l,s))
 440                       );
 441   
 442  Eq2(r,e,m) ..        delta(r,e,m)=e=theta(r,e,m)-xi(r,e,m)*sum((j,hh),beta(hh,r,m)*Cap_avail(j,hh,r));
 443   
 444  Eq9_1(i,h,r,e,l,s) ..  price(r,e,l,s)-mc(h,r,s)-b(r,e,l,s)*(1+v(i))*sales(i,r,e,l,s)-lambda_high(i,h,r,e,l,s)+lambda_low(i,h,r,e,l,s)=e= 0 ;
 445  *
 446  Eq9_2(i,h,r)..       sum((e,m),d(e,m)*delta(r,e,m)*beta(h,r,m))
 447                      -sum((e,m),d(e,m)*xi(r,e,m)*(beta(h,r,m)+z(i))*sum(hh,beta(hh,r,m)*Cap_avail(i,hh,r)))
 448                       +sum((e,l,s),prob(s)*d(e,l)*lambda_high(i,h,r,e,l,s)) +alpha(i,h,r) =e=ici(h)+om(h);
 449  *
 450   
 451  Eq9_3(i,h,r)..      -sum((e,m),d(e,m)*delta(r,e,m)*beta(h,r,m))
 452                      +sum((e,m),d(e,m)*xi(r,e,m)*(beta(h,r,m)+z(i))*sum(hh,beta(hh,r,m)*Cap_avail(i,hh,r)))
 453                      -sum((e,l,s),prob(s)*d(e,l)*lambda_high(i,h,r,e,l,s))-eta_high(i,h,r)
 454                       +eta_low(i,h,r) =e= icr(h)-om(h);
 455  *
 456   
 457  Eq9_4(i,n,r,rr,e,l,s)$(trading=1 and r_trade(n,r,rr))..
 458           price(rr,e,l,s)-price(r,e,l,s)+zeta(i,n,r,rr,e,l,s)
 459           -price_trans(n,e,l,s)
 460          +b(r,e,l,s)*sales(i,r,e,l,s)*(1+x(i,r,rr))
 461          -b(rr,e,l,s)*sales(i,rr,e,l,s)*(1+x(i,rr,r))
 462                   =e=0;
 463   
 464   
 465  Eq9_5(i,h,r,e,l,s) ..  Cap_avail(i,h,r)-Q(i,h,r,e,l,s)=g=0;
 466  Eq9_6(i,h,r)..         kind0(i,h,r) - ret(i,h,r)=g=0 ;
 467  Eq9_7(i,h,r)..         Cap_avail(i,h,r) =e= kind0(i,h,r)+inv(i,h,r)-ret(i,h,r);
 468   
 469  Eq9_8(i,r,e,l,s)..     sales(i,r,e,l,s)=e=
 470                           sum(h,Q(i,h,r,e,l,s))
 471                         -sum((n,rr)$(r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s))$(trading=1)
 472                         +sum((n,rr)$(r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s))$(trading=1) ;
 473   
 474  Eq10_1(n,r,rr,e,l,s)$r_trade(n,r,rr)..
 475           price(rr,e,l,s)-price(r,e,l,s)
 476           -price_trans(n,e,l,s)
 477           +shadows_arbitrage(n,r,rr,e,l,s)
 478                                   =e=0        ;
 479   
 480  Eq11_1(n,e,l,s).. price_trans(n,e,l,s)
 481                           -phi(n)-tau(n,e,l,s)/d(e,l)
 482                           =e= 0;
 483   
 484  Eq11_2(n,e,l,s)..   kind_trans0(n)-trans(n,e,l,s)=g=0;
 485   
 486  Eq11_3(n,e,l,s)..
 487   
 488           trans(n,e,l,s)=g=
 489                      abs(
 490                   sum((i,r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s))
 491                   -sum((i,r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s))
 492                   +sum((r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s))
 493                   -sum((r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),arbitrage(n,rr,r,e,l,s))
 494             )$(trading=1)
 495             +sum((r,rr)$(r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s))$(trading<>1)
 496           ;
 497   
 498  Eq_q(i,h,r,e,l,s)        .. Q(i,h,r,e,l,s) =g= 0;
 499  Eq_inv(i,h,r)            .. inv(i,h,r) =g= 0;
 500  Eq_ret(i,h,r)            .. ret(i,h,r)=g=0;
 501   
 502   
 503  Eq_trade(i,n,r,rr,e,l,s)$(trading=1 and r_trade(n,r,rr))..
 504           trade(i,n,r,rr,e,l,s)=g=0;
 505   
 506  Eq_arb(n,r,rr,e,l,s)$r_trade(n,r,rr)   .. arbitrage(n,r,rr,e,l,s)=g=0;
 507   
 508  model CMO   /
 509              Eq1,
 510              Eq2,
 511              Eq9_1,
 512              Eq9_2,
 513              Eq9_3,
 514              Eq9_4,
 515              Eq9_5.lambda_high,
 516              Eq9_6.eta_high,
 517              Eq9_7,
 518              Eq9_8,
 519   
 520              Eq10_1,
 521              Eq11_1,
 522              Eq11_2.tau,
 523              Eq11_3.price_trans
 524   
 525              Eq_q.lambda_low,
 526              Eq_trade.zeta,
 527              Eq_inv.alpha,
 528              Eq_ret.eta_low,
 529              Eq_arb.shadows_arbitrage,
 530  /;
 531           option MCP=path;
 532          CMO.scaleopt =1;
 533  *        tau.scale(n,e,l,s)=1e4;
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\demand_calib.gms
 535   
 536  parameter EL_demgro(r)  projected percentage growth in electricity demand from 2015 to 2020 by region
 537  /
 538  WOA      1.183
 539  EOA      1.368
 540  SOA      1.329
 541  COA      1.217
 542  /
 543  ;
 544   
 545  *        apply growth equally to all demand segments
 546  *        Rescale demand to GW
 547  *        Rescale duration such taht energy is in units of TWH
 548  *        Marginal costs should be in units of MMUSD/TWH
 549   
 550           EL_Demand(r,e,l,s) = ELlcgw(r,e,l)*EL_demgro(r)*1e-3;
 551           d(e,l) = duration(e,l)*1e-3;
 552           ;
 553   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\solar.gms
 555  *Solar DNI curves.
 556  *Saudi Arabia obtained from NREL/KACST. The cities used for each region
 557  *are: West-Jeddah, South-Abha,Central-Solar Village,East-AlQusaimah. The values
 558  *represent average DNI levels for each segment over the seasonal period for each
 559  *region. The data from the year 2002 are used.
 560  *KWT = 'east' until data can be obtained
 561  Table ELsolcurve(l,seasons,r) regional and seasonal solar DNI profiles in W per sq. m
 562                   WOA         SOA        COA         EOA
 563  L1.summer        0.00        0.00       0.00        0.00
 564  L2.summer        110.09      259.83     308.17      301.34
 565  L3.summer        295.82      530.41     701.85      682.11
 566  L4.summer        364.87      436.38     759.63      741.60
 567  L5.summer        286.14      249.75     537.49      556.56
 568  L6.summer        107.01      83.94      171.54      195.74
 569  L7.summer        0.00        0.00       0.00        0.00
 570  L8.summer        0.00        0.00       0.00        0.00
 571   
 572  L1.winter        0.00        0.00       0.00        0.00
 573  L2.winter        118.65      240.74     208.64      147.02
 574  L3.winter        366.36      580.38     544.80      370.83
 575  L4.winter        501.84      646.97     658.06      426.94
 576  L5.winter        385.92      447.85     421.11      253.03
 577  L6.winter        131.80      140.52     99.21       49.90
 578  L7.winter        0.00        0.00       0.00        0.00
 579  L8.winter        0.00        0.00       0.00        0.00
 580   
 581  L1.spring-fall    0.00        0.00       0.00        0.00
 582  L2.spring-fall    133.59      321.61     268.68      185.34
 583  L3.spring-fall    366.00      717.74     631.74      453.89
 584  L4.spring-fall    446.01      725.93     683.32      500.01
 585  L5.spring-fall    326.06      464.02     401.39      292.48
 586  L6.spring-fall    112.45      134.21     81.12       61.02
 587  L7.spring-fall    0.00        0.00       0.00        0.00
 588  L8.spring-fall    0.00        0.00       0.00        0.00
 589  ;
 590  *We let the hourly operation of solar without storage to be proportional to the DNI.
 591  *In actuality, the output from solar plants is equal to some efficiency times the
 592  *irradiance (heat input). For thermal plants, it's the first law thermal efficiency.
 593  *While CSP plants only utilize direct irradiation (DI), the DI is linearly
 594  *proportional to the DNI. From this, we set the solar plant electricity output equal to its
 595  *peak nominal output (i.e. the plant's output capacity) multiplied by the solar irradiance
 596  *normalized by the maximum irradiance value throughout the year.
 597  Parameter ELsolcurvenorm(l,seasons,r) normalized DNI profiles from ELsolcurve;
 598  Elsolcurvenorm(l,e,r)=ELsolcurve(l,e,r)/smax((ll,ee),ELsolcurve(ll,ee,r));
 599   
 600   
 601  parameter solar_cap(r) regional solar capcitity installation in GW
 602  /
 603  COA      3
 604  EOA      2
 605  SOA      5
 606  WOA      1
 607  /
 608   
 609  ;
 610  scalar random, mean, stddev;
 611  mean = 1;
 612  stddev =0.3;
 613  set sumi /1*100/;
 614  scalar CDF_lo, CDF_hi, CDF_alpha,CDF_beta,Z_cdf,X_cdf;
 615   
 616  parameter CDF_x(s) cumulative distribution functions for each scenario s;
 617  CDF_alpha = cdfnorm(0,mean,stddev);
 618  CDF_beta =  cdfnorm(1,mean,stddev);
 619  Z_cdf=CDF_beta-CDF_alpha;
 620  prob(s)=0;
 621  CDF_x(s)=0;
 622  loop(s,
 623   
 624           X_cdf=ord(s)/card(s);
 625           CDF_x(s)= (cdfnorm(X_cdf,mean,stddev)-CDF_alpha)/Z_cdf;
 626           prob(s) = CDF_x(s) - CDF_x(s-1);
 627           EL_Demand(r,e,l,s)= EL_Demand(r,e,l,s)-solar_cap(r)*Elsolcurvenorm(l,e,r)*X_cdf;
 628  );
 629   
 630   
 631  parameter elasticity(r) demand elasticity for eletricity ???;
 632   
 633  parameter  LRMC(r,e,l,s) long run marginal cost in each load segment USD per MWH;
 634   
 635  * long run maringal cost. rescale capacity payment to USD/MW
 636  LRMC(r,e,l,s) =
 637   
 638  smin(h,mc(h,r,s)+(ic(h)+om(h))/sum((ll)$(EL_Demand(r,e,ll,s)>=EL_Demand(r,e,l,s)),d(e,ll)) )
 639  ;
 640   
 641  elasticity(r) = 0.3;
 642   
 643  * Energy Price calibration                                                     *
 644              a(r,e,l,s) = LRMC(r,e,l,s)*(1+1/elasticity(r));
 645              b(r,e,l,s) = LRMC(r,e,l,s)/EL_demand(r,e,l,s)/elasticity(r) ;
 646   
 647   
 648  * Capacity Price calibration                                                   *
 649   
 650   
 651  * assume a flat inverse demand curve for capacity
 652  * price is set to the maximum fixed cost of all generators operating in the market
 653  * soread of the total number of demand hours
 654   
 655  theta(r,e,m) =  0
 656                   +smax(h,(ic(h)+om(h)))/sum((ee,l),d(ee,l))
 657  *                 sum((s),prob(s)*d(e,m))    ;
 658  *                 sum((s,ll)$(EL_Demand(r,e,ll,s)>=EL_Demand(r,e,m,s)),prob(s)*d(e,ll));
 659  ;
 660                   xi(r,e,m) =0;
 661   
 662   
 663   
               a(r,'l1',s) = 1200 +uniform(0,100);
               a(r,'l2',s) = 600 +uniform(0,50);
               a(r,'l3',s) = 300 +uniform(0,10);
       
               b(r,'l1',s) = 0.005 +uniform(0,0.0005);
               b(r,'l2',s) = 0.01 +uniform(0,0.0005);
               b(r,'l3',s) = 0.01 +uniform(0,0.0005);
       
       
      theta(r,e,'l1') = 5000 +uniform(0,200);
      theta(r,e,'l2') = 3000 +uniform(0,100);
      theta(r,e,'l3') = 2000 +uniform(0,50);
       
      xi(r,e,'l1') = 0.00001 ;
      xi(r,e,'l2') = 0.00002 ;
      xi(r,e,'l3') = 0.00003 ;
 682   
 683   
 684   
 685  *Option Savepoint=1;
 686  CMO.optfile = 1 ;
 687   
 688  Execute_Loadpoint 'CMO_no_trade_5.gdx';
 689   
 690  *trade.l(i,n,r,rr,e,l,s)$(not r_trans(n,r,rr))=0;
 691  *arbitrage.l(n,r,rr,e,l,s)$(not r_trans(n,r,rr))=0;
 692  *trans.lo(n,e,l,s)=0;
 693  solve CMO using mcp;
 694   
 695   
 696  *$ontext
 697  Parameters
 698           profit(i)           profit per player
 699           roi(i)              return on investment
 700           cus(i)              capacity usage
 701           rop(i)              return on production
 702           roc(i)              return on capacity
 703   
 704   
 705           error_demand(r,e,l)
 706           reserve_capacity(r)
 707           ;
 708   
 709  *$ontext
 710           error_demand(r,e,l) =
 711           -sum(s,prob(s)*
 712             (EL_demand(r,e,l,s)-
 713                   (sum((j),sales.l(j,r,e,l,s))-sum((n,rr)$r_trade(n,r,rr),arbitrage.l(n,r,rr,e,l,s))+sum((n,rr)$r_trade(n,rr,r),arbitrage.l(n,rr,r,e,l,s)) )
 714             )
 715           )/sum(s,EL_demand(r,e,l,s));
 716   
 717           reserve_capacity(r) = sum((i,h),Cap_avail.l(i,h,r))/smax((e,l),sum(s,EL_demand(r,e,l,s)*prob(s)))-1;
 718  ;
 719   
 720   
 721   
 722  profit(i)=sum((h,r,e,l,s),prob(s)*(price.l(r,e,l,s)-mc(h,r,s))*q.l(i,h,r,e,l,s)*d(e,l))-sum((h,r),ici(h)*Cap_avail.l(i,h,r))-sum((h,r),icr(h)*ret.l(i,h,r))+sum((r,e,m,h),delta.l(r,e,m)*beta(h,r,
      m)*Cap_avail.l(i,h,r));
 723   
 724   
 725   
 726   
 727  *********compute other indicators
 728   
 729  ***return on investment
 730  roi(i)=profit(i)/(sum((h,r),Cap_avail.l(i,h,r)*ici(h)));
 731   
 732  ****capacity usage
 733  cus(i)=sum((r,e,l,h,s),prob(s)*d(e,l)*q.l(i,h,r,e,l,s))/sum((l,h,r,e,s),prob(s)*d(e,l)*Cap_avail.l(i,h,r));
 734   
 735  ****return on production
 736  rop(i)=profit(i)/sum((r,e,l,h,s),prob(s)*d(e,l)*q.l(i,h,r,e,l,s));
 737   
 738  ****return on capacity
 739  roc(i)=profit(i)/(sum((r,e,l,h),d(e,l)*Cap_avail.l(i,h,r)));
 740   
 741   
 742  display q.l, price.l, delta.l,inv.l, Cap_avail.l, ret.l,kind0,profit;
 743   
 744   
 745  display roi,cus,rop,roc;
 746   
 747  display lambda_high.l,eta_high.l;
 748   
 749   
 750   
 751  file results /C:Users\c-olivef\AXEL Investment Gams\RESULTS.txt/;
 752   
 753  put results;
 754  put 'Investment model: the value of perfect rationality'//
 755      'Marginal Costs per generator'//;
 756   
 757  loop((h,r,s),put h.tl,@12,s.tl,@24,mc(h,r,s):6:1//);
 758   
 759  put 'Investment Costs per generator'//;
 760   
 761  loop(h,put h.tl,@12,ic(h):6:1//);
 762   
 763   
 764  put 'Investment per generator'//;
 765   
 766  loop((i,h,r),put i.tl,@12,h.tl,@24,inv.l(i,h,r):6:1//);
 767   
 768   
 769  put 'Generation per generator'//;
 770   
 771  loop((i,h,r,e,l,s),put i.tl,@12,h.tl,@24,l.tl,@32,s.tl,@44,q.l(i,h,r,e,l,s):6:1//);
 772   
 773   
 774  put 'Equilibrium Prices '//;
 775   
 776  loop((r,e,l,s),put s.tl,@12,l.tl,@24,price(r,e,l,s)//);
 777   
 778  put 'Total Profit per generator'//;
 779   
 780  loop(i,put i.tl,@12,profit(i):8:2//);
 781   
 782  put 'Generator, Return on Investment, Capacity usage, Return on production, Return on Capacity'//;
 783   
 784  loop(i,put i.tl,@12,roi(i),@30,cus(i),@50,rop(i),@70,roc(i):10:2//);
 785   
 786   
 787  *$offtext

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME psi OF TYPE VAR  
**** STRAY NAME CDF_hi OF TYPE PARAM
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/12/16 10:57:32 Page 2
Dynamic Programming Investment
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\run_model.gms
     2        7 INCLUDE        1       7  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Macros.gms
     3       45 FUNCLIBIN      1       9  stodclib
     4       50 INCLUDE        1      14  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\SetsAndVariables.gms
     5      107 INCLUDE        1      15  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Demand.gms
     6      116 GDXIN          5       9  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\db\load.gdx
     7      210 INCLUDE        1      16  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\parameters_2.gms
     8      384 INCLUDE        1      17  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\equations.gms
     9      534 INCLUDE        1      18  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\demand_calib.gms
    10      554 INCLUDE        9      20  ..D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\solar.gms


COMPILATION TIME     =        0.015 SECONDS      5 MB  24.1.3 r41464 WEX-WEI
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/12/16 10:57:32 Page 3
Dynamic Programming Investment
Equation Listing    SOLVE CMO Using MCP From line 693


---- Eq1  =E=  Equation (1)

Eq1(COA,winter,l1,s1)..  28.9023393050623*sales(fringe,COA,winter,l1,s1) + 28.9023393050623*sales(g1,COA,winter,l1,s1) + 28.9023393050623*sales(g2,COA,winter,l1,s1)
     
      + 28.9023393050623*sales(g3,COA,winter,l1,s1) + 28.9023393050623*sales(g4,COA,winter,l1,s1) + price(COA,winter,l1,s1) - 28.9023393050623*arbitrage(East,COA,EOA,winter,l1,s1)
     
      + 28.9023393050623*arbitrage(East,EOA,COA,winter,l1,s1) - 28.9023393050623*arbitrage(west,COA,WOA,winter,l1,s1) + 28.9023393050623*arbitrage(west,WOA,COA,winter,l1,s1) =E= 330.661963475756 ;
     
      (LHS = 330.661963475756)
     
Eq1(COA,winter,l1,s2)..  32.5517827752916*sales(fringe,COA,winter,l1,s2) + 32.5517827752916*sales(g1,COA,winter,l1,s2) + 32.5517827752916*sales(g2,COA,winter,l1,s2)
     
      + 32.5517827752916*sales(g3,COA,winter,l1,s2) + 32.5517827752916*sales(g4,COA,winter,l1,s2) + price(COA,winter,l1,s2) - 32.5517827752916*arbitrage(East,COA,EOA,winter,l1,s2)
     
      + 32.5517827752916*arbitrage(East,EOA,COA,winter,l1,s2) - 32.5517827752916*arbitrage(west,COA,WOA,winter,l1,s2) + 32.5517827752916*arbitrage(west,WOA,COA,winter,l1,s2) =E= 372.414021353245 ;
     
      (LHS = 372.414021353245)
     
Eq1(COA,winter,l1,s3)..  32.5517827752916*sales(fringe,COA,winter,l1,s3) + 32.5517827752916*sales(g1,COA,winter,l1,s3) + 32.5517827752916*sales(g2,COA,winter,l1,s3)
     
      + 32.5517827752916*sales(g3,COA,winter,l1,s3) + 32.5517827752916*sales(g4,COA,winter,l1,s3) + price(COA,winter,l1,s3) - 32.5517827752916*arbitrage(East,COA,EOA,winter,l1,s3)
     
      + 32.5517827752916*arbitrage(East,EOA,COA,winter,l1,s3) - 32.5517827752916*arbitrage(west,COA,WOA,winter,l1,s3) + 32.5517827752916*arbitrage(west,WOA,COA,winter,l1,s3) =E= 372.414021353245 ;
     
      (LHS = 372.414021353245)
     
REMAINING 477 ENTRIES SKIPPED


---- Eq2  =E=  Equation (1)

Eq2(COA,winter,l5)..  delta(COA,winter,l5) =E= 40.4789709383651 ; (LHS = 40.4789709383651)
     
Eq2(COA,winter,l6)..  delta(COA,winter,l6) =E= 40.4789709383651 ; (LHS = 40.4789709383651)
     
Eq2(COA,winter,l7)..  delta(COA,winter,l7) =E= 40.4789709383651 ; (LHS = 40.4789709383651)
     
REMAINING 33 ENTRIES SKIPPED


---- Eq9_1  =E=  Equation (8.1)

Eq9_1(fringe,CCGT,COA,winter,l1,s1)..  - lambda_high(fringe,CCGT,COA,winter,l1,s1) + lambda_low(fringe,CCGT,COA,winter,l1,s1) + price(COA,winter,l1,s1) =E= 8.860975 ; (LHS = 8.860975)
     
Eq9_1(fringe,CCGT,COA,winter,l1,s2)..  - lambda_high(fringe,CCGT,COA,winter,l1,s2) + lambda_low(fringe,CCGT,COA,winter,l1,s2) + price(COA,winter,l1,s2) =E= 8.860975 ; (LHS = 8.860975)
     
Eq9_1(fringe,CCGT,COA,winter,l1,s3)..  - lambda_high(fringe,CCGT,COA,winter,l1,s3) + lambda_low(fringe,CCGT,COA,winter,l1,s3) + price(COA,winter,l1,s3) =E= 8.860975 ; (LHS = 8.860975)
     
REMAINING 9597 ENTRIES SKIPPED


---- Eq9_2  =E=  Equation (8.2)

Eq9_2(fringe,CCGT,COA)..  0.00332253968873928*lambda_high(fringe,CCGT,COA,winter,l1,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,COA,winter,l1,s2)
     
      + 0.0668754088414244*lambda_high(fringe,CCGT,COA,winter,l1,s3) + 0.15754575946545*lambda_high(fringe,CCGT,COA,winter,l1,s4) + 0.241774755268311*lambda_high(fringe,CCGT,COA,winter,l1,s5)
     
      + 0.00332253968873928*lambda_high(fringe,CCGT,COA,winter,l2,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,COA,winter,l2,s2) + 0.0668754088414244*lambda_high(fringe,CCGT,COA,winter,l2,s3)
     
      + 0.15754575946545*lambda_high(fringe,CCGT,COA,winter,l2,s4) + 0.241774755268311*lambda_high(fringe,CCGT,COA,winter,l2,s5) + 0.00332253968873928*lambda_high(fringe,CCGT,COA,winter,l3,s1)
     
      + 0.0184815367360753*lambda_high(fringe,CCGT,COA,winter,l3,s2) + 0.0668754088414244*lambda_high(fringe,CCGT,COA,winter,l3,s3) + 0.15754575946545*lambda_high(fringe,CCGT,COA,winter,l3,s4)
     
      + 0.241774755268311*lambda_high(fringe,CCGT,COA,winter,l3,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,COA,winter,l4,s1) + 0.00924076836803763*lambda_high(fringe,CCGT,COA,winter,l4,s2)
     
      + 0.0334377044207122*lambda_high(fringe,CCGT,COA,winter,l4,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,COA,winter,l4,s4) + 0.120887377634156*lambda_high(fringe,CCGT,COA,winter,l4,s5)
     
      + 0.00249190476655446*lambda_high(fringe,CCGT,COA,winter,l5,s1) + 0.0138611525520564*lambda_high(fringe,CCGT,COA,winter,l5,s2) + 0.0501565566310683*lambda_high(fringe,CCGT,COA,winter,l5,s3)
     
      + 0.118159319599087*lambda_high(fringe,CCGT,COA,winter,l5,s4) + 0.181331066451233*lambda_high(fringe,CCGT,COA,winter,l5,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,COA,winter,l6,s1)
     
      + 0.00924076836803763*lambda_high(fringe,CCGT,COA,winter,l6,s2) + 0.0334377044207122*lambda_high(fringe,CCGT,COA,winter,l6,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,COA,winter,l6,s4)
     
      + 0.120887377634156*lambda_high(fringe,CCGT,COA,winter,l6,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,COA,winter,l7,s1) + 0.00924076836803763*lambda_high(fringe,CCGT,COA,winter,l7,s2)
     
      + 0.0334377044207122*lambda_high(fringe,CCGT,COA,winter,l7,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,COA,winter,l7,s4) + 0.120887377634156*lambda_high(fringe,CCGT,COA,winter,l7,s5)
     
      + 0.00249190476655446*lambda_high(fringe,CCGT,COA,winter,l8,s1) + 0.0138611525520564*lambda_high(fringe,CCGT,COA,winter,l8,s2) + 0.0501565566310683*lambda_high(fringe,CCGT,COA,winter,l8,s3)
     
      + 0.118159319599087*lambda_high(fringe,CCGT,COA,winter,l8,s4) + 0.181331066451233*lambda_high(fringe,CCGT,COA,winter,l8,s5) + 0.00329530575686437*lambda_high(fringe,CCGT,COA,summer,l1,s1)
     
      + 0.0183300487300419*lambda_high(fringe,CCGT,COA,summer,l1,s2) + 0.0663272497525603*lambda_high(fringe,CCGT,COA,summer,l1,s3) + 0.156254400781307*lambda_high(fringe,CCGT,COA,summer,l1,s4)
     
      + 0.239792994979227*lambda_high(fringe,CCGT,COA,summer,l1,s5) + 0.00329530575686437*lambda_high(fringe,CCGT,COA,summer,l2,s1) + 0.0183300487300419*lambda_high(fringe,CCGT,COA,summer,l2,s2)
     
      + 0.0663272497525603*lambda_high(fringe,CCGT,COA,summer,l2,s3) + 0.156254400781307*lambda_high(fringe,CCGT,COA,summer,l2,s4) + 0.239792994979227*lambda_high(fringe,CCGT,COA,summer,l2,s5)
     
      + 0.00329530575686437*lambda_high(fringe,CCGT,COA,summer,l3,s1) + 0.0183300487300419*lambda_high(fringe,CCGT,COA,summer,l3,s2) + 0.0663272497525603*lambda_high(fringe,CCGT,COA,summer,l3,s3)
     
      + 0.156254400781307*lambda_high(fringe,CCGT,COA,summer,l3,s4) + 0.239792994979227*lambda_high(fringe,CCGT,COA,summer,l3,s5) + 0.00164765287843218*lambda_high(fringe,CCGT,COA,summer,l4,s1)
     
      + 0.00916502436502093*lambda_high(fringe,CCGT,COA,summer,l4,s2) + 0.0331636248762802*lambda_high(fringe,CCGT,COA,summer,l4,s3) + 0.0781272003906534*lambda_high(fringe,CCGT,COA,summer,l4,s4)
     
      + 0.119896497489613*lambda_high(fringe,CCGT,COA,summer,l4,s5) + 0.00247147931764828*lambda_high(fringe,CCGT,COA,summer,l5,s1) + 0.0137475365475314*lambda_high(fringe,CCGT,COA,summer,l5,s2)
     
      + 0.0497454373144202*lambda_high(fringe,CCGT,COA,summer,l5,s3) + 0.11719080058598*lambda_high(fringe,CCGT,COA,summer,l5,s4) + 0.17984474623442*lambda_high(fringe,CCGT,COA,summer,l5,s5)
     
      + 0.00164765287843218*lambda_high(fringe,CCGT,COA,summer,l6,s1) + 0.00916502436502093*lambda_high(fringe,CCGT,COA,summer,l6,s2) + 0.0331636248762802*lambda_high(fringe,CCGT,COA,summer,l6,s3)
     
      + 0.0781272003906534*lambda_high(fringe,CCGT,COA,summer,l6,s4) + 0.119896497489613*lambda_high(fringe,CCGT,COA,summer,l6,s5) + 0.00164765287843218*lambda_high(fringe,CCGT,COA,summer,l7,s1)
     
      + 0.00916502436502093*lambda_high(fringe,CCGT,COA,summer,l7,s2) + 0.0331636248762802*lambda_high(fringe,CCGT,COA,summer,l7,s3) + 0.0781272003906534*lambda_high(fringe,CCGT,COA,summer,l7,s4)
     
      + 0.119896497489613*lambda_high(fringe,CCGT,COA,summer,l7,s5) + 0.00247147931764828*lambda_high(fringe,CCGT,COA,summer,l8,s1) + 0.0137475365475314*lambda_high(fringe,CCGT,COA,summer,l8,s2)
     
      + 0.0497454373144202*lambda_high(fringe,CCGT,COA,summer,l8,s3) + 0.11719080058598*lambda_high(fringe,CCGT,COA,summer,l8,s4) + 0.17984474623442*lambda_high(fringe,CCGT,COA,summer,l8,s5)
     
      + 0.00332253968873928*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2)
     
      + 0.0668754088414244*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3) + 0.15754575946545*lambda_high(fringe,CCGT,COA,spring-fall,l1,s4)
     
      + 0.241774755268311*lambda_high(fringe,CCGT,COA,spring-fall,l1,s5) + 0.00332253968873928*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1)
     
      + 0.0184815367360753*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2) + 0.0668754088414244*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3)
     
      + 0.15754575946545*lambda_high(fringe,CCGT,COA,spring-fall,l2,s4) + 0.241774755268311*lambda_high(fringe,CCGT,COA,spring-fall,l2,s5)
     
      + 0.00332253968873928*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2)
     
      + 0.0668754088414244*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3) + 0.15754575946545*lambda_high(fringe,CCGT,COA,spring-fall,l3,s4)
     
      + 0.241774755268311*lambda_high(fringe,CCGT,COA,spring-fall,l3,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1)
     
      + 0.00924076836803763*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2) + 0.0334377044207122*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3)
     
      + 0.0787728797327249*lambda_high(fringe,CCGT,COA,spring-fall,l4,s4) + 0.120887377634156*lambda_high(fringe,CCGT,COA,spring-fall,l4,s5)
     
      + 0.00249190476655446*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1) + 0.0138611525520564*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2)
     
      + 0.0501565566310683*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3) + 0.118159319599087*lambda_high(fringe,CCGT,COA,spring-fall,l5,s4)
     
      + 0.181331066451233*lambda_high(fringe,CCGT,COA,spring-fall,l5,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1)
     
      + 0.00924076836803763*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2) + 0.0334377044207122*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3)
     
      + 0.0787728797327249*lambda_high(fringe,CCGT,COA,spring-fall,l6,s4) + 0.120887377634156*lambda_high(fringe,CCGT,COA,spring-fall,l6,s5)
     
      + 0.00166126984436964*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1) + 0.00924076836803763*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2)
     
      + 0.0334377044207122*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,COA,spring-fall,l7,s4)
     
      + 0.120887377634156*lambda_high(fringe,CCGT,COA,spring-fall,l7,s5) + 0.00249190476655446*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1)
     
      + 0.0138611525520564*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2) + 0.0501565566310683*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3)
     
      + 0.118159319599087*lambda_high(fringe,CCGT,COA,spring-fall,l8,s4) + 0.181331066451233*lambda_high(fringe,CCGT,COA,spring-fall,l8,s5) + 0.366*delta(COA,winter,l5) + 0.244*delta(COA,winter,l6)
     
      + 0.244*delta(COA,winter,l7) + 0.363*delta(COA,summer,l5) + 0.242*delta(COA,summer,l6) + 0.242*delta(COA,summer,l7) + 0.366*delta(COA,spring-fall,l5) + 0.244*delta(COA,spring-fall,l6)
     
      + 0.244*delta(COA,spring-fall,l7) + alpha(fringe,CCGT,COA) =E= 131.653873578002 ; (LHS = 131.653873578002)
     
Eq9_2(fringe,CCGT,EOA)..  0.00332253968873928*lambda_high(fringe,CCGT,EOA,winter,l1,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,EOA,winter,l1,s2)
     
      + 0.0668754088414244*lambda_high(fringe,CCGT,EOA,winter,l1,s3) + 0.15754575946545*lambda_high(fringe,CCGT,EOA,winter,l1,s4) + 0.241774755268311*lambda_high(fringe,CCGT,EOA,winter,l1,s5)
     
      + 0.00332253968873928*lambda_high(fringe,CCGT,EOA,winter,l2,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,EOA,winter,l2,s2) + 0.0668754088414244*lambda_high(fringe,CCGT,EOA,winter,l2,s3)
     
      + 0.15754575946545*lambda_high(fringe,CCGT,EOA,winter,l2,s4) + 0.241774755268311*lambda_high(fringe,CCGT,EOA,winter,l2,s5) + 0.00332253968873928*lambda_high(fringe,CCGT,EOA,winter,l3,s1)
     
      + 0.0184815367360753*lambda_high(fringe,CCGT,EOA,winter,l3,s2) + 0.0668754088414244*lambda_high(fringe,CCGT,EOA,winter,l3,s3) + 0.15754575946545*lambda_high(fringe,CCGT,EOA,winter,l3,s4)
     
      + 0.241774755268311*lambda_high(fringe,CCGT,EOA,winter,l3,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,EOA,winter,l4,s1) + 0.00924076836803763*lambda_high(fringe,CCGT,EOA,winter,l4,s2)
     
      + 0.0334377044207122*lambda_high(fringe,CCGT,EOA,winter,l4,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,EOA,winter,l4,s4) + 0.120887377634156*lambda_high(fringe,CCGT,EOA,winter,l4,s5)
     
      + 0.00249190476655446*lambda_high(fringe,CCGT,EOA,winter,l5,s1) + 0.0138611525520564*lambda_high(fringe,CCGT,EOA,winter,l5,s2) + 0.0501565566310683*lambda_high(fringe,CCGT,EOA,winter,l5,s3)
     
      + 0.118159319599087*lambda_high(fringe,CCGT,EOA,winter,l5,s4) + 0.181331066451233*lambda_high(fringe,CCGT,EOA,winter,l5,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,EOA,winter,l6,s1)
     
      + 0.00924076836803763*lambda_high(fringe,CCGT,EOA,winter,l6,s2) + 0.0334377044207122*lambda_high(fringe,CCGT,EOA,winter,l6,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,EOA,winter,l6,s4)
     
      + 0.120887377634156*lambda_high(fringe,CCGT,EOA,winter,l6,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,EOA,winter,l7,s1) + 0.00924076836803763*lambda_high(fringe,CCGT,EOA,winter,l7,s2)
     
      + 0.0334377044207122*lambda_high(fringe,CCGT,EOA,winter,l7,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,EOA,winter,l7,s4) + 0.120887377634156*lambda_high(fringe,CCGT,EOA,winter,l7,s5)
     
      + 0.00249190476655446*lambda_high(fringe,CCGT,EOA,winter,l8,s1) + 0.0138611525520564*lambda_high(fringe,CCGT,EOA,winter,l8,s2) + 0.0501565566310683*lambda_high(fringe,CCGT,EOA,winter,l8,s3)
     
      + 0.118159319599087*lambda_high(fringe,CCGT,EOA,winter,l8,s4) + 0.181331066451233*lambda_high(fringe,CCGT,EOA,winter,l8,s5) + 0.00329530575686437*lambda_high(fringe,CCGT,EOA,summer,l1,s1)
     
      + 0.0183300487300419*lambda_high(fringe,CCGT,EOA,summer,l1,s2) + 0.0663272497525603*lambda_high(fringe,CCGT,EOA,summer,l1,s3) + 0.156254400781307*lambda_high(fringe,CCGT,EOA,summer,l1,s4)
     
      + 0.239792994979227*lambda_high(fringe,CCGT,EOA,summer,l1,s5) + 0.00329530575686437*lambda_high(fringe,CCGT,EOA,summer,l2,s1) + 0.0183300487300419*lambda_high(fringe,CCGT,EOA,summer,l2,s2)
     
      + 0.0663272497525603*lambda_high(fringe,CCGT,EOA,summer,l2,s3) + 0.156254400781307*lambda_high(fringe,CCGT,EOA,summer,l2,s4) + 0.239792994979227*lambda_high(fringe,CCGT,EOA,summer,l2,s5)
     
      + 0.00329530575686437*lambda_high(fringe,CCGT,EOA,summer,l3,s1) + 0.0183300487300419*lambda_high(fringe,CCGT,EOA,summer,l3,s2) + 0.0663272497525603*lambda_high(fringe,CCGT,EOA,summer,l3,s3)
     
      + 0.156254400781307*lambda_high(fringe,CCGT,EOA,summer,l3,s4) + 0.239792994979227*lambda_high(fringe,CCGT,EOA,summer,l3,s5) + 0.00164765287843218*lambda_high(fringe,CCGT,EOA,summer,l4,s1)
     
      + 0.00916502436502093*lambda_high(fringe,CCGT,EOA,summer,l4,s2) + 0.0331636248762802*lambda_high(fringe,CCGT,EOA,summer,l4,s3) + 0.0781272003906534*lambda_high(fringe,CCGT,EOA,summer,l4,s4)
     
      + 0.119896497489613*lambda_high(fringe,CCGT,EOA,summer,l4,s5) + 0.00247147931764828*lambda_high(fringe,CCGT,EOA,summer,l5,s1) + 0.0137475365475314*lambda_high(fringe,CCGT,EOA,summer,l5,s2)
     
      + 0.0497454373144202*lambda_high(fringe,CCGT,EOA,summer,l5,s3) + 0.11719080058598*lambda_high(fringe,CCGT,EOA,summer,l5,s4) + 0.17984474623442*lambda_high(fringe,CCGT,EOA,summer,l5,s5)
     
      + 0.00164765287843218*lambda_high(fringe,CCGT,EOA,summer,l6,s1) + 0.00916502436502093*lambda_high(fringe,CCGT,EOA,summer,l6,s2) + 0.0331636248762802*lambda_high(fringe,CCGT,EOA,summer,l6,s3)
     
      + 0.0781272003906534*lambda_high(fringe,CCGT,EOA,summer,l6,s4) + 0.119896497489613*lambda_high(fringe,CCGT,EOA,summer,l6,s5) + 0.00164765287843218*lambda_high(fringe,CCGT,EOA,summer,l7,s1)
     
      + 0.00916502436502093*lambda_high(fringe,CCGT,EOA,summer,l7,s2) + 0.0331636248762802*lambda_high(fringe,CCGT,EOA,summer,l7,s3) + 0.0781272003906534*lambda_high(fringe,CCGT,EOA,summer,l7,s4)
     
      + 0.119896497489613*lambda_high(fringe,CCGT,EOA,summer,l7,s5) + 0.00247147931764828*lambda_high(fringe,CCGT,EOA,summer,l8,s1) + 0.0137475365475314*lambda_high(fringe,CCGT,EOA,summer,l8,s2)
     
      + 0.0497454373144202*lambda_high(fringe,CCGT,EOA,summer,l8,s3) + 0.11719080058598*lambda_high(fringe,CCGT,EOA,summer,l8,s4) + 0.17984474623442*lambda_high(fringe,CCGT,EOA,summer,l8,s5)
     
      + 0.00332253968873928*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2)
     
      + 0.0668754088414244*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3) + 0.15754575946545*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s4)
     
      + 0.241774755268311*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s5) + 0.00332253968873928*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1)
     
      + 0.0184815367360753*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2) + 0.0668754088414244*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3)
     
      + 0.15754575946545*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s4) + 0.241774755268311*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s5)
     
      + 0.00332253968873928*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2)
     
      + 0.0668754088414244*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3) + 0.15754575946545*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s4)
     
      + 0.241774755268311*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1)
     
      + 0.00924076836803763*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2) + 0.0334377044207122*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3)
     
      + 0.0787728797327249*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s4) + 0.120887377634156*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s5)
     
      + 0.00249190476655446*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1) + 0.0138611525520564*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2)
     
      + 0.0501565566310683*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3) + 0.118159319599087*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s4)
     
      + 0.181331066451233*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1)
     
      + 0.00924076836803763*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2) + 0.0334377044207122*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3)
     
      + 0.0787728797327249*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s4) + 0.120887377634156*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s5)
     
      + 0.00166126984436964*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1) + 0.00924076836803763*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2)
     
      + 0.0334377044207122*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s4)
     
      + 0.120887377634156*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s5) + 0.00249190476655446*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1)
     
      + 0.0138611525520564*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2) + 0.0501565566310683*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3)
     
      + 0.118159319599087*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s4) + 0.181331066451233*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s5) + 0.366*delta(EOA,winter,l5) + 0.244*delta(EOA,winter,l6)
     
      + 0.244*delta(EOA,winter,l7) + 0.363*delta(EOA,summer,l5) + 0.242*delta(EOA,summer,l6) + 0.242*delta(EOA,summer,l7) + 0.366*delta(EOA,spring-fall,l5) + 0.244*delta(EOA,spring-fall,l6)
     
      + 0.244*delta(EOA,spring-fall,l7) + alpha(fringe,CCGT,EOA) =E= 131.653873578002 ; (LHS = 131.653873578002)
     
Eq9_2(fringe,CCGT,SOA)..  0.00332253968873928*lambda_high(fringe,CCGT,SOA,winter,l1,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,SOA,winter,l1,s2)
     
      + 0.0668754088414244*lambda_high(fringe,CCGT,SOA,winter,l1,s3) + 0.15754575946545*lambda_high(fringe,CCGT,SOA,winter,l1,s4) + 0.241774755268311*lambda_high(fringe,CCGT,SOA,winter,l1,s5)
     
      + 0.00332253968873928*lambda_high(fringe,CCGT,SOA,winter,l2,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,SOA,winter,l2,s2) + 0.0668754088414244*lambda_high(fringe,CCGT,SOA,winter,l2,s3)
     
      + 0.15754575946545*lambda_high(fringe,CCGT,SOA,winter,l2,s4) + 0.241774755268311*lambda_high(fringe,CCGT,SOA,winter,l2,s5) + 0.00332253968873928*lambda_high(fringe,CCGT,SOA,winter,l3,s1)
     
      + 0.0184815367360753*lambda_high(fringe,CCGT,SOA,winter,l3,s2) + 0.0668754088414244*lambda_high(fringe,CCGT,SOA,winter,l3,s3) + 0.15754575946545*lambda_high(fringe,CCGT,SOA,winter,l3,s4)
     
      + 0.241774755268311*lambda_high(fringe,CCGT,SOA,winter,l3,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,SOA,winter,l4,s1) + 0.00924076836803763*lambda_high(fringe,CCGT,SOA,winter,l4,s2)
     
      + 0.0334377044207122*lambda_high(fringe,CCGT,SOA,winter,l4,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,SOA,winter,l4,s4) + 0.120887377634156*lambda_high(fringe,CCGT,SOA,winter,l4,s5)
     
      + 0.00249190476655446*lambda_high(fringe,CCGT,SOA,winter,l5,s1) + 0.0138611525520564*lambda_high(fringe,CCGT,SOA,winter,l5,s2) + 0.0501565566310683*lambda_high(fringe,CCGT,SOA,winter,l5,s3)
     
      + 0.118159319599087*lambda_high(fringe,CCGT,SOA,winter,l5,s4) + 0.181331066451233*lambda_high(fringe,CCGT,SOA,winter,l5,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,SOA,winter,l6,s1)
     
      + 0.00924076836803763*lambda_high(fringe,CCGT,SOA,winter,l6,s2) + 0.0334377044207122*lambda_high(fringe,CCGT,SOA,winter,l6,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,SOA,winter,l6,s4)
     
      + 0.120887377634156*lambda_high(fringe,CCGT,SOA,winter,l6,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,SOA,winter,l7,s1) + 0.00924076836803763*lambda_high(fringe,CCGT,SOA,winter,l7,s2)
     
      + 0.0334377044207122*lambda_high(fringe,CCGT,SOA,winter,l7,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,SOA,winter,l7,s4) + 0.120887377634156*lambda_high(fringe,CCGT,SOA,winter,l7,s5)
     
      + 0.00249190476655446*lambda_high(fringe,CCGT,SOA,winter,l8,s1) + 0.0138611525520564*lambda_high(fringe,CCGT,SOA,winter,l8,s2) + 0.0501565566310683*lambda_high(fringe,CCGT,SOA,winter,l8,s3)
     
      + 0.118159319599087*lambda_high(fringe,CCGT,SOA,winter,l8,s4) + 0.181331066451233*lambda_high(fringe,CCGT,SOA,winter,l8,s5) + 0.00329530575686437*lambda_high(fringe,CCGT,SOA,summer,l1,s1)
     
      + 0.0183300487300419*lambda_high(fringe,CCGT,SOA,summer,l1,s2) + 0.0663272497525603*lambda_high(fringe,CCGT,SOA,summer,l1,s3) + 0.156254400781307*lambda_high(fringe,CCGT,SOA,summer,l1,s4)
     
      + 0.239792994979227*lambda_high(fringe,CCGT,SOA,summer,l1,s5) + 0.00329530575686437*lambda_high(fringe,CCGT,SOA,summer,l2,s1) + 0.0183300487300419*lambda_high(fringe,CCGT,SOA,summer,l2,s2)
     
      + 0.0663272497525603*lambda_high(fringe,CCGT,SOA,summer,l2,s3) + 0.156254400781307*lambda_high(fringe,CCGT,SOA,summer,l2,s4) + 0.239792994979227*lambda_high(fringe,CCGT,SOA,summer,l2,s5)
     
      + 0.00329530575686437*lambda_high(fringe,CCGT,SOA,summer,l3,s1) + 0.0183300487300419*lambda_high(fringe,CCGT,SOA,summer,l3,s2) + 0.0663272497525603*lambda_high(fringe,CCGT,SOA,summer,l3,s3)
     
      + 0.156254400781307*lambda_high(fringe,CCGT,SOA,summer,l3,s4) + 0.239792994979227*lambda_high(fringe,CCGT,SOA,summer,l3,s5) + 0.00164765287843218*lambda_high(fringe,CCGT,SOA,summer,l4,s1)
     
      + 0.00916502436502093*lambda_high(fringe,CCGT,SOA,summer,l4,s2) + 0.0331636248762802*lambda_high(fringe,CCGT,SOA,summer,l4,s3) + 0.0781272003906534*lambda_high(fringe,CCGT,SOA,summer,l4,s4)
     
      + 0.119896497489613*lambda_high(fringe,CCGT,SOA,summer,l4,s5) + 0.00247147931764828*lambda_high(fringe,CCGT,SOA,summer,l5,s1) + 0.0137475365475314*lambda_high(fringe,CCGT,SOA,summer,l5,s2)
     
      + 0.0497454373144202*lambda_high(fringe,CCGT,SOA,summer,l5,s3) + 0.11719080058598*lambda_high(fringe,CCGT,SOA,summer,l5,s4) + 0.17984474623442*lambda_high(fringe,CCGT,SOA,summer,l5,s5)
     
      + 0.00164765287843218*lambda_high(fringe,CCGT,SOA,summer,l6,s1) + 0.00916502436502093*lambda_high(fringe,CCGT,SOA,summer,l6,s2) + 0.0331636248762802*lambda_high(fringe,CCGT,SOA,summer,l6,s3)
     
      + 0.0781272003906534*lambda_high(fringe,CCGT,SOA,summer,l6,s4) + 0.119896497489613*lambda_high(fringe,CCGT,SOA,summer,l6,s5) + 0.00164765287843218*lambda_high(fringe,CCGT,SOA,summer,l7,s1)
     
      + 0.00916502436502093*lambda_high(fringe,CCGT,SOA,summer,l7,s2) + 0.0331636248762802*lambda_high(fringe,CCGT,SOA,summer,l7,s3) + 0.0781272003906534*lambda_high(fringe,CCGT,SOA,summer,l7,s4)
     
      + 0.119896497489613*lambda_high(fringe,CCGT,SOA,summer,l7,s5) + 0.00247147931764828*lambda_high(fringe,CCGT,SOA,summer,l8,s1) + 0.0137475365475314*lambda_high(fringe,CCGT,SOA,summer,l8,s2)
     
      + 0.0497454373144202*lambda_high(fringe,CCGT,SOA,summer,l8,s3) + 0.11719080058598*lambda_high(fringe,CCGT,SOA,summer,l8,s4) + 0.17984474623442*lambda_high(fringe,CCGT,SOA,summer,l8,s5)
     
      + 0.00332253968873928*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2)
     
      + 0.0668754088414244*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3) + 0.15754575946545*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s4)
     
      + 0.241774755268311*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s5) + 0.00332253968873928*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1)
     
      + 0.0184815367360753*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2) + 0.0668754088414244*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3)
     
      + 0.15754575946545*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s4) + 0.241774755268311*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s5)
     
      + 0.00332253968873928*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1) + 0.0184815367360753*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2)
     
      + 0.0668754088414244*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3) + 0.15754575946545*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s4)
     
      + 0.241774755268311*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1)
     
      + 0.00924076836803763*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2) + 0.0334377044207122*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3)
     
      + 0.0787728797327249*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s4) + 0.120887377634156*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s5)
     
      + 0.00249190476655446*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1) + 0.0138611525520564*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2)
     
      + 0.0501565566310683*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3) + 0.118159319599087*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s4)
     
      + 0.181331066451233*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s5) + 0.00166126984436964*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1)
     
      + 0.00924076836803763*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2) + 0.0334377044207122*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3)
     
      + 0.0787728797327249*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s4) + 0.120887377634156*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s5)
     
      + 0.00166126984436964*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1) + 0.00924076836803763*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2)
     
      + 0.0334377044207122*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3) + 0.0787728797327249*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s4)
     
      + 0.120887377634156*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s5) + 0.00249190476655446*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1)
     
      + 0.0138611525520564*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2) + 0.0501565566310683*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3)
     
      + 0.118159319599087*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s4) + 0.181331066451233*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s5) + 0.366*delta(SOA,winter,l5) + 0.244*delta(SOA,winter,l6)
     
      + 0.244*delta(SOA,winter,l7) + 0.363*delta(SOA,summer,l5) + 0.242*delta(SOA,summer,l6) + 0.242*delta(SOA,summer,l7) + 0.366*delta(SOA,spring-fall,l5) + 0.244*delta(SOA,spring-fall,l6)
     
      + 0.244*delta(SOA,spring-fall,l7) + alpha(fringe,CCGT,SOA) =E= 131.653873578002 ; (LHS = 131.653873578002)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_3  =E=  Equation (8.3)

Eq9_3(fringe,CCGT,COA)..  - 0.00332253968873928*lambda_high(fringe,CCGT,COA,winter,l1,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,COA,winter,l1,s2)
     
      - 0.0668754088414244*lambda_high(fringe,CCGT,COA,winter,l1,s3) - 0.15754575946545*lambda_high(fringe,CCGT,COA,winter,l1,s4) - 0.241774755268311*lambda_high(fringe,CCGT,COA,winter,l1,s5)
     
      - 0.00332253968873928*lambda_high(fringe,CCGT,COA,winter,l2,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,COA,winter,l2,s2) - 0.0668754088414244*lambda_high(fringe,CCGT,COA,winter,l2,s3)
     
      - 0.15754575946545*lambda_high(fringe,CCGT,COA,winter,l2,s4) - 0.241774755268311*lambda_high(fringe,CCGT,COA,winter,l2,s5) - 0.00332253968873928*lambda_high(fringe,CCGT,COA,winter,l3,s1)
     
      - 0.0184815367360753*lambda_high(fringe,CCGT,COA,winter,l3,s2) - 0.0668754088414244*lambda_high(fringe,CCGT,COA,winter,l3,s3) - 0.15754575946545*lambda_high(fringe,CCGT,COA,winter,l3,s4)
     
      - 0.241774755268311*lambda_high(fringe,CCGT,COA,winter,l3,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,COA,winter,l4,s1) - 0.00924076836803763*lambda_high(fringe,CCGT,COA,winter,l4,s2)
     
      - 0.0334377044207122*lambda_high(fringe,CCGT,COA,winter,l4,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,COA,winter,l4,s4) - 0.120887377634156*lambda_high(fringe,CCGT,COA,winter,l4,s5)
     
      - 0.00249190476655446*lambda_high(fringe,CCGT,COA,winter,l5,s1) - 0.0138611525520564*lambda_high(fringe,CCGT,COA,winter,l5,s2) - 0.0501565566310683*lambda_high(fringe,CCGT,COA,winter,l5,s3)
     
      - 0.118159319599087*lambda_high(fringe,CCGT,COA,winter,l5,s4) - 0.181331066451233*lambda_high(fringe,CCGT,COA,winter,l5,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,COA,winter,l6,s1)
     
      - 0.00924076836803763*lambda_high(fringe,CCGT,COA,winter,l6,s2) - 0.0334377044207122*lambda_high(fringe,CCGT,COA,winter,l6,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,COA,winter,l6,s4)
     
      - 0.120887377634156*lambda_high(fringe,CCGT,COA,winter,l6,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,COA,winter,l7,s1) - 0.00924076836803763*lambda_high(fringe,CCGT,COA,winter,l7,s2)
     
      - 0.0334377044207122*lambda_high(fringe,CCGT,COA,winter,l7,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,COA,winter,l7,s4) - 0.120887377634156*lambda_high(fringe,CCGT,COA,winter,l7,s5)
     
      - 0.00249190476655446*lambda_high(fringe,CCGT,COA,winter,l8,s1) - 0.0138611525520564*lambda_high(fringe,CCGT,COA,winter,l8,s2) - 0.0501565566310683*lambda_high(fringe,CCGT,COA,winter,l8,s3)
     
      - 0.118159319599087*lambda_high(fringe,CCGT,COA,winter,l8,s4) - 0.181331066451233*lambda_high(fringe,CCGT,COA,winter,l8,s5) - 0.00329530575686437*lambda_high(fringe,CCGT,COA,summer,l1,s1)
     
      - 0.0183300487300419*lambda_high(fringe,CCGT,COA,summer,l1,s2) - 0.0663272497525603*lambda_high(fringe,CCGT,COA,summer,l1,s3) - 0.156254400781307*lambda_high(fringe,CCGT,COA,summer,l1,s4)
     
      - 0.239792994979227*lambda_high(fringe,CCGT,COA,summer,l1,s5) - 0.00329530575686437*lambda_high(fringe,CCGT,COA,summer,l2,s1) - 0.0183300487300419*lambda_high(fringe,CCGT,COA,summer,l2,s2)
     
      - 0.0663272497525603*lambda_high(fringe,CCGT,COA,summer,l2,s3) - 0.156254400781307*lambda_high(fringe,CCGT,COA,summer,l2,s4) - 0.239792994979227*lambda_high(fringe,CCGT,COA,summer,l2,s5)
     
      - 0.00329530575686437*lambda_high(fringe,CCGT,COA,summer,l3,s1) - 0.0183300487300419*lambda_high(fringe,CCGT,COA,summer,l3,s2) - 0.0663272497525603*lambda_high(fringe,CCGT,COA,summer,l3,s3)
     
      - 0.156254400781307*lambda_high(fringe,CCGT,COA,summer,l3,s4) - 0.239792994979227*lambda_high(fringe,CCGT,COA,summer,l3,s5) - 0.00164765287843218*lambda_high(fringe,CCGT,COA,summer,l4,s1)
     
      - 0.00916502436502093*lambda_high(fringe,CCGT,COA,summer,l4,s2) - 0.0331636248762802*lambda_high(fringe,CCGT,COA,summer,l4,s3) - 0.0781272003906534*lambda_high(fringe,CCGT,COA,summer,l4,s4)
     
      - 0.119896497489613*lambda_high(fringe,CCGT,COA,summer,l4,s5) - 0.00247147931764828*lambda_high(fringe,CCGT,COA,summer,l5,s1) - 0.0137475365475314*lambda_high(fringe,CCGT,COA,summer,l5,s2)
     
      - 0.0497454373144202*lambda_high(fringe,CCGT,COA,summer,l5,s3) - 0.11719080058598*lambda_high(fringe,CCGT,COA,summer,l5,s4) - 0.17984474623442*lambda_high(fringe,CCGT,COA,summer,l5,s5)
     
      - 0.00164765287843218*lambda_high(fringe,CCGT,COA,summer,l6,s1) - 0.00916502436502093*lambda_high(fringe,CCGT,COA,summer,l6,s2) - 0.0331636248762802*lambda_high(fringe,CCGT,COA,summer,l6,s3)
     
      - 0.0781272003906534*lambda_high(fringe,CCGT,COA,summer,l6,s4) - 0.119896497489613*lambda_high(fringe,CCGT,COA,summer,l6,s5) - 0.00164765287843218*lambda_high(fringe,CCGT,COA,summer,l7,s1)
     
      - 0.00916502436502093*lambda_high(fringe,CCGT,COA,summer,l7,s2) - 0.0331636248762802*lambda_high(fringe,CCGT,COA,summer,l7,s3) - 0.0781272003906534*lambda_high(fringe,CCGT,COA,summer,l7,s4)
     
      - 0.119896497489613*lambda_high(fringe,CCGT,COA,summer,l7,s5) - 0.00247147931764828*lambda_high(fringe,CCGT,COA,summer,l8,s1) - 0.0137475365475314*lambda_high(fringe,CCGT,COA,summer,l8,s2)
     
      - 0.0497454373144202*lambda_high(fringe,CCGT,COA,summer,l8,s3) - 0.11719080058598*lambda_high(fringe,CCGT,COA,summer,l8,s4) - 0.17984474623442*lambda_high(fringe,CCGT,COA,summer,l8,s5)
     
      - 0.00332253968873928*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2)
     
      - 0.0668754088414244*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3) - 0.15754575946545*lambda_high(fringe,CCGT,COA,spring-fall,l1,s4)
     
      - 0.241774755268311*lambda_high(fringe,CCGT,COA,spring-fall,l1,s5) - 0.00332253968873928*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1)
     
      - 0.0184815367360753*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2) - 0.0668754088414244*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3)
     
      - 0.15754575946545*lambda_high(fringe,CCGT,COA,spring-fall,l2,s4) - 0.241774755268311*lambda_high(fringe,CCGT,COA,spring-fall,l2,s5)
     
      - 0.00332253968873928*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2)
     
      - 0.0668754088414244*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3) - 0.15754575946545*lambda_high(fringe,CCGT,COA,spring-fall,l3,s4)
     
      - 0.241774755268311*lambda_high(fringe,CCGT,COA,spring-fall,l3,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1)
     
      - 0.00924076836803763*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2) - 0.0334377044207122*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3)
     
      - 0.0787728797327249*lambda_high(fringe,CCGT,COA,spring-fall,l4,s4) - 0.120887377634156*lambda_high(fringe,CCGT,COA,spring-fall,l4,s5)
     
      - 0.00249190476655446*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1) - 0.0138611525520564*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2)
     
      - 0.0501565566310683*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3) - 0.118159319599087*lambda_high(fringe,CCGT,COA,spring-fall,l5,s4)
     
      - 0.181331066451233*lambda_high(fringe,CCGT,COA,spring-fall,l5,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1)
     
      - 0.00924076836803763*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2) - 0.0334377044207122*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3)
     
      - 0.0787728797327249*lambda_high(fringe,CCGT,COA,spring-fall,l6,s4) - 0.120887377634156*lambda_high(fringe,CCGT,COA,spring-fall,l6,s5)
     
      - 0.00166126984436964*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1) - 0.00924076836803763*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2)
     
      - 0.0334377044207122*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,COA,spring-fall,l7,s4)
     
      - 0.120887377634156*lambda_high(fringe,CCGT,COA,spring-fall,l7,s5) - 0.00249190476655446*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1)
     
      - 0.0138611525520564*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2) - 0.0501565566310683*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3)
     
      - 0.118159319599087*lambda_high(fringe,CCGT,COA,spring-fall,l8,s4) - 0.181331066451233*lambda_high(fringe,CCGT,COA,spring-fall,l8,s5) - 0.366*delta(COA,winter,l5) - 0.244*delta(COA,winter,l6)
     
      - 0.244*delta(COA,winter,l7) - 0.363*delta(COA,summer,l5) - 0.242*delta(COA,summer,l6) - 0.242*delta(COA,summer,l7) - 0.366*delta(COA,spring-fall,l5) - 0.244*delta(COA,spring-fall,l6)
     
      - 0.244*delta(COA,spring-fall,l7) - eta_high(fringe,CCGT,COA) + eta_low(fringe,CCGT,COA) =E= -0.474612642199789 ; (LHS = -0.474612642199844)
     
Eq9_3(fringe,CCGT,EOA)..  - 0.00332253968873928*lambda_high(fringe,CCGT,EOA,winter,l1,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,EOA,winter,l1,s2)
     
      - 0.0668754088414244*lambda_high(fringe,CCGT,EOA,winter,l1,s3) - 0.15754575946545*lambda_high(fringe,CCGT,EOA,winter,l1,s4) - 0.241774755268311*lambda_high(fringe,CCGT,EOA,winter,l1,s5)
     
      - 0.00332253968873928*lambda_high(fringe,CCGT,EOA,winter,l2,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,EOA,winter,l2,s2) - 0.0668754088414244*lambda_high(fringe,CCGT,EOA,winter,l2,s3)
     
      - 0.15754575946545*lambda_high(fringe,CCGT,EOA,winter,l2,s4) - 0.241774755268311*lambda_high(fringe,CCGT,EOA,winter,l2,s5) - 0.00332253968873928*lambda_high(fringe,CCGT,EOA,winter,l3,s1)
     
      - 0.0184815367360753*lambda_high(fringe,CCGT,EOA,winter,l3,s2) - 0.0668754088414244*lambda_high(fringe,CCGT,EOA,winter,l3,s3) - 0.15754575946545*lambda_high(fringe,CCGT,EOA,winter,l3,s4)
     
      - 0.241774755268311*lambda_high(fringe,CCGT,EOA,winter,l3,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,EOA,winter,l4,s1) - 0.00924076836803763*lambda_high(fringe,CCGT,EOA,winter,l4,s2)
     
      - 0.0334377044207122*lambda_high(fringe,CCGT,EOA,winter,l4,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,EOA,winter,l4,s4) - 0.120887377634156*lambda_high(fringe,CCGT,EOA,winter,l4,s5)
     
      - 0.00249190476655446*lambda_high(fringe,CCGT,EOA,winter,l5,s1) - 0.0138611525520564*lambda_high(fringe,CCGT,EOA,winter,l5,s2) - 0.0501565566310683*lambda_high(fringe,CCGT,EOA,winter,l5,s3)
     
      - 0.118159319599087*lambda_high(fringe,CCGT,EOA,winter,l5,s4) - 0.181331066451233*lambda_high(fringe,CCGT,EOA,winter,l5,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,EOA,winter,l6,s1)
     
      - 0.00924076836803763*lambda_high(fringe,CCGT,EOA,winter,l6,s2) - 0.0334377044207122*lambda_high(fringe,CCGT,EOA,winter,l6,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,EOA,winter,l6,s4)
     
      - 0.120887377634156*lambda_high(fringe,CCGT,EOA,winter,l6,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,EOA,winter,l7,s1) - 0.00924076836803763*lambda_high(fringe,CCGT,EOA,winter,l7,s2)
     
      - 0.0334377044207122*lambda_high(fringe,CCGT,EOA,winter,l7,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,EOA,winter,l7,s4) - 0.120887377634156*lambda_high(fringe,CCGT,EOA,winter,l7,s5)
     
      - 0.00249190476655446*lambda_high(fringe,CCGT,EOA,winter,l8,s1) - 0.0138611525520564*lambda_high(fringe,CCGT,EOA,winter,l8,s2) - 0.0501565566310683*lambda_high(fringe,CCGT,EOA,winter,l8,s3)
     
      - 0.118159319599087*lambda_high(fringe,CCGT,EOA,winter,l8,s4) - 0.181331066451233*lambda_high(fringe,CCGT,EOA,winter,l8,s5) - 0.00329530575686437*lambda_high(fringe,CCGT,EOA,summer,l1,s1)
     
      - 0.0183300487300419*lambda_high(fringe,CCGT,EOA,summer,l1,s2) - 0.0663272497525603*lambda_high(fringe,CCGT,EOA,summer,l1,s3) - 0.156254400781307*lambda_high(fringe,CCGT,EOA,summer,l1,s4)
     
      - 0.239792994979227*lambda_high(fringe,CCGT,EOA,summer,l1,s5) - 0.00329530575686437*lambda_high(fringe,CCGT,EOA,summer,l2,s1) - 0.0183300487300419*lambda_high(fringe,CCGT,EOA,summer,l2,s2)
     
      - 0.0663272497525603*lambda_high(fringe,CCGT,EOA,summer,l2,s3) - 0.156254400781307*lambda_high(fringe,CCGT,EOA,summer,l2,s4) - 0.239792994979227*lambda_high(fringe,CCGT,EOA,summer,l2,s5)
     
      - 0.00329530575686437*lambda_high(fringe,CCGT,EOA,summer,l3,s1) - 0.0183300487300419*lambda_high(fringe,CCGT,EOA,summer,l3,s2) - 0.0663272497525603*lambda_high(fringe,CCGT,EOA,summer,l3,s3)
     
      - 0.156254400781307*lambda_high(fringe,CCGT,EOA,summer,l3,s4) - 0.239792994979227*lambda_high(fringe,CCGT,EOA,summer,l3,s5) - 0.00164765287843218*lambda_high(fringe,CCGT,EOA,summer,l4,s1)
     
      - 0.00916502436502093*lambda_high(fringe,CCGT,EOA,summer,l4,s2) - 0.0331636248762802*lambda_high(fringe,CCGT,EOA,summer,l4,s3) - 0.0781272003906534*lambda_high(fringe,CCGT,EOA,summer,l4,s4)
     
      - 0.119896497489613*lambda_high(fringe,CCGT,EOA,summer,l4,s5) - 0.00247147931764828*lambda_high(fringe,CCGT,EOA,summer,l5,s1) - 0.0137475365475314*lambda_high(fringe,CCGT,EOA,summer,l5,s2)
     
      - 0.0497454373144202*lambda_high(fringe,CCGT,EOA,summer,l5,s3) - 0.11719080058598*lambda_high(fringe,CCGT,EOA,summer,l5,s4) - 0.17984474623442*lambda_high(fringe,CCGT,EOA,summer,l5,s5)
     
      - 0.00164765287843218*lambda_high(fringe,CCGT,EOA,summer,l6,s1) - 0.00916502436502093*lambda_high(fringe,CCGT,EOA,summer,l6,s2) - 0.0331636248762802*lambda_high(fringe,CCGT,EOA,summer,l6,s3)
     
      - 0.0781272003906534*lambda_high(fringe,CCGT,EOA,summer,l6,s4) - 0.119896497489613*lambda_high(fringe,CCGT,EOA,summer,l6,s5) - 0.00164765287843218*lambda_high(fringe,CCGT,EOA,summer,l7,s1)
     
      - 0.00916502436502093*lambda_high(fringe,CCGT,EOA,summer,l7,s2) - 0.0331636248762802*lambda_high(fringe,CCGT,EOA,summer,l7,s3) - 0.0781272003906534*lambda_high(fringe,CCGT,EOA,summer,l7,s4)
     
      - 0.119896497489613*lambda_high(fringe,CCGT,EOA,summer,l7,s5) - 0.00247147931764828*lambda_high(fringe,CCGT,EOA,summer,l8,s1) - 0.0137475365475314*lambda_high(fringe,CCGT,EOA,summer,l8,s2)
     
      - 0.0497454373144202*lambda_high(fringe,CCGT,EOA,summer,l8,s3) - 0.11719080058598*lambda_high(fringe,CCGT,EOA,summer,l8,s4) - 0.17984474623442*lambda_high(fringe,CCGT,EOA,summer,l8,s5)
     
      - 0.00332253968873928*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2)
     
      - 0.0668754088414244*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3) - 0.15754575946545*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s4)
     
      - 0.241774755268311*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s5) - 0.00332253968873928*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1)
     
      - 0.0184815367360753*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2) - 0.0668754088414244*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3)
     
      - 0.15754575946545*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s4) - 0.241774755268311*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s5)
     
      - 0.00332253968873928*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2)
     
      - 0.0668754088414244*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3) - 0.15754575946545*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s4)
     
      - 0.241774755268311*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1)
     
      - 0.00924076836803763*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2) - 0.0334377044207122*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3)
     
      - 0.0787728797327249*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s4) - 0.120887377634156*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s5)
     
      - 0.00249190476655446*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1) - 0.0138611525520564*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2)
     
      - 0.0501565566310683*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3) - 0.118159319599087*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s4)
     
      - 0.181331066451233*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1)
     
      - 0.00924076836803763*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2) - 0.0334377044207122*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3)
     
      - 0.0787728797327249*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s4) - 0.120887377634156*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s5)
     
      - 0.00166126984436964*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1) - 0.00924076836803763*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2)
     
      - 0.0334377044207122*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s4)
     
      - 0.120887377634156*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s5) - 0.00249190476655446*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1)
     
      - 0.0138611525520564*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2) - 0.0501565566310683*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3)
     
      - 0.118159319599087*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s4) - 0.181331066451233*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s5) - 0.366*delta(EOA,winter,l5) - 0.244*delta(EOA,winter,l6)
     
      - 0.244*delta(EOA,winter,l7) - 0.363*delta(EOA,summer,l5) - 0.242*delta(EOA,summer,l6) - 0.242*delta(EOA,summer,l7) - 0.366*delta(EOA,spring-fall,l5) - 0.244*delta(EOA,spring-fall,l6)
     
      - 0.244*delta(EOA,spring-fall,l7) - eta_high(fringe,CCGT,EOA) + eta_low(fringe,CCGT,EOA) =E= -0.474612642199789 ; (LHS = -0.474612642199816)
     
Eq9_3(fringe,CCGT,SOA)..  - 0.00332253968873928*lambda_high(fringe,CCGT,SOA,winter,l1,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,SOA,winter,l1,s2)
     
      - 0.0668754088414244*lambda_high(fringe,CCGT,SOA,winter,l1,s3) - 0.15754575946545*lambda_high(fringe,CCGT,SOA,winter,l1,s4) - 0.241774755268311*lambda_high(fringe,CCGT,SOA,winter,l1,s5)
     
      - 0.00332253968873928*lambda_high(fringe,CCGT,SOA,winter,l2,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,SOA,winter,l2,s2) - 0.0668754088414244*lambda_high(fringe,CCGT,SOA,winter,l2,s3)
     
      - 0.15754575946545*lambda_high(fringe,CCGT,SOA,winter,l2,s4) - 0.241774755268311*lambda_high(fringe,CCGT,SOA,winter,l2,s5) - 0.00332253968873928*lambda_high(fringe,CCGT,SOA,winter,l3,s1)
     
      - 0.0184815367360753*lambda_high(fringe,CCGT,SOA,winter,l3,s2) - 0.0668754088414244*lambda_high(fringe,CCGT,SOA,winter,l3,s3) - 0.15754575946545*lambda_high(fringe,CCGT,SOA,winter,l3,s4)
     
      - 0.241774755268311*lambda_high(fringe,CCGT,SOA,winter,l3,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,SOA,winter,l4,s1) - 0.00924076836803763*lambda_high(fringe,CCGT,SOA,winter,l4,s2)
     
      - 0.0334377044207122*lambda_high(fringe,CCGT,SOA,winter,l4,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,SOA,winter,l4,s4) - 0.120887377634156*lambda_high(fringe,CCGT,SOA,winter,l4,s5)
     
      - 0.00249190476655446*lambda_high(fringe,CCGT,SOA,winter,l5,s1) - 0.0138611525520564*lambda_high(fringe,CCGT,SOA,winter,l5,s2) - 0.0501565566310683*lambda_high(fringe,CCGT,SOA,winter,l5,s3)
     
      - 0.118159319599087*lambda_high(fringe,CCGT,SOA,winter,l5,s4) - 0.181331066451233*lambda_high(fringe,CCGT,SOA,winter,l5,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,SOA,winter,l6,s1)
     
      - 0.00924076836803763*lambda_high(fringe,CCGT,SOA,winter,l6,s2) - 0.0334377044207122*lambda_high(fringe,CCGT,SOA,winter,l6,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,SOA,winter,l6,s4)
     
      - 0.120887377634156*lambda_high(fringe,CCGT,SOA,winter,l6,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,SOA,winter,l7,s1) - 0.00924076836803763*lambda_high(fringe,CCGT,SOA,winter,l7,s2)
     
      - 0.0334377044207122*lambda_high(fringe,CCGT,SOA,winter,l7,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,SOA,winter,l7,s4) - 0.120887377634156*lambda_high(fringe,CCGT,SOA,winter,l7,s5)
     
      - 0.00249190476655446*lambda_high(fringe,CCGT,SOA,winter,l8,s1) - 0.0138611525520564*lambda_high(fringe,CCGT,SOA,winter,l8,s2) - 0.0501565566310683*lambda_high(fringe,CCGT,SOA,winter,l8,s3)
     
      - 0.118159319599087*lambda_high(fringe,CCGT,SOA,winter,l8,s4) - 0.181331066451233*lambda_high(fringe,CCGT,SOA,winter,l8,s5) - 0.00329530575686437*lambda_high(fringe,CCGT,SOA,summer,l1,s1)
     
      - 0.0183300487300419*lambda_high(fringe,CCGT,SOA,summer,l1,s2) - 0.0663272497525603*lambda_high(fringe,CCGT,SOA,summer,l1,s3) - 0.156254400781307*lambda_high(fringe,CCGT,SOA,summer,l1,s4)
     
      - 0.239792994979227*lambda_high(fringe,CCGT,SOA,summer,l1,s5) - 0.00329530575686437*lambda_high(fringe,CCGT,SOA,summer,l2,s1) - 0.0183300487300419*lambda_high(fringe,CCGT,SOA,summer,l2,s2)
     
      - 0.0663272497525603*lambda_high(fringe,CCGT,SOA,summer,l2,s3) - 0.156254400781307*lambda_high(fringe,CCGT,SOA,summer,l2,s4) - 0.239792994979227*lambda_high(fringe,CCGT,SOA,summer,l2,s5)
     
      - 0.00329530575686437*lambda_high(fringe,CCGT,SOA,summer,l3,s1) - 0.0183300487300419*lambda_high(fringe,CCGT,SOA,summer,l3,s2) - 0.0663272497525603*lambda_high(fringe,CCGT,SOA,summer,l3,s3)
     
      - 0.156254400781307*lambda_high(fringe,CCGT,SOA,summer,l3,s4) - 0.239792994979227*lambda_high(fringe,CCGT,SOA,summer,l3,s5) - 0.00164765287843218*lambda_high(fringe,CCGT,SOA,summer,l4,s1)
     
      - 0.00916502436502093*lambda_high(fringe,CCGT,SOA,summer,l4,s2) - 0.0331636248762802*lambda_high(fringe,CCGT,SOA,summer,l4,s3) - 0.0781272003906534*lambda_high(fringe,CCGT,SOA,summer,l4,s4)
     
      - 0.119896497489613*lambda_high(fringe,CCGT,SOA,summer,l4,s5) - 0.00247147931764828*lambda_high(fringe,CCGT,SOA,summer,l5,s1) - 0.0137475365475314*lambda_high(fringe,CCGT,SOA,summer,l5,s2)
     
      - 0.0497454373144202*lambda_high(fringe,CCGT,SOA,summer,l5,s3) - 0.11719080058598*lambda_high(fringe,CCGT,SOA,summer,l5,s4) - 0.17984474623442*lambda_high(fringe,CCGT,SOA,summer,l5,s5)
     
      - 0.00164765287843218*lambda_high(fringe,CCGT,SOA,summer,l6,s1) - 0.00916502436502093*lambda_high(fringe,CCGT,SOA,summer,l6,s2) - 0.0331636248762802*lambda_high(fringe,CCGT,SOA,summer,l6,s3)
     
      - 0.0781272003906534*lambda_high(fringe,CCGT,SOA,summer,l6,s4) - 0.119896497489613*lambda_high(fringe,CCGT,SOA,summer,l6,s5) - 0.00164765287843218*lambda_high(fringe,CCGT,SOA,summer,l7,s1)
     
      - 0.00916502436502093*lambda_high(fringe,CCGT,SOA,summer,l7,s2) - 0.0331636248762802*lambda_high(fringe,CCGT,SOA,summer,l7,s3) - 0.0781272003906534*lambda_high(fringe,CCGT,SOA,summer,l7,s4)
     
      - 0.119896497489613*lambda_high(fringe,CCGT,SOA,summer,l7,s5) - 0.00247147931764828*lambda_high(fringe,CCGT,SOA,summer,l8,s1) - 0.0137475365475314*lambda_high(fringe,CCGT,SOA,summer,l8,s2)
     
      - 0.0497454373144202*lambda_high(fringe,CCGT,SOA,summer,l8,s3) - 0.11719080058598*lambda_high(fringe,CCGT,SOA,summer,l8,s4) - 0.17984474623442*lambda_high(fringe,CCGT,SOA,summer,l8,s5)
     
      - 0.00332253968873928*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2)
     
      - 0.0668754088414244*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3) - 0.15754575946545*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s4)
     
      - 0.241774755268311*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s5) - 0.00332253968873928*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1)
     
      - 0.0184815367360753*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2) - 0.0668754088414244*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3)
     
      - 0.15754575946545*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s4) - 0.241774755268311*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s5)
     
      - 0.00332253968873928*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1) - 0.0184815367360753*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2)
     
      - 0.0668754088414244*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3) - 0.15754575946545*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s4)
     
      - 0.241774755268311*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1)
     
      - 0.00924076836803763*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2) - 0.0334377044207122*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3)
     
      - 0.0787728797327249*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s4) - 0.120887377634156*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s5)
     
      - 0.00249190476655446*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1) - 0.0138611525520564*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2)
     
      - 0.0501565566310683*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3) - 0.118159319599087*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s4)
     
      - 0.181331066451233*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s5) - 0.00166126984436964*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1)
     
      - 0.00924076836803763*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2) - 0.0334377044207122*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3)
     
      - 0.0787728797327249*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s4) - 0.120887377634156*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s5)
     
      - 0.00166126984436964*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1) - 0.00924076836803763*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2)
     
      - 0.0334377044207122*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3) - 0.0787728797327249*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s4)
     
      - 0.120887377634156*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s5) - 0.00249190476655446*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1)
     
      - 0.0138611525520564*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2) - 0.0501565566310683*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3)
     
      - 0.118159319599087*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s4) - 0.181331066451233*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s5) - 0.366*delta(SOA,winter,l5) - 0.244*delta(SOA,winter,l6)
     
      - 0.244*delta(SOA,winter,l7) - 0.363*delta(SOA,summer,l5) - 0.242*delta(SOA,summer,l6) - 0.242*delta(SOA,summer,l7) - 0.366*delta(SOA,spring-fall,l5) - 0.244*delta(SOA,spring-fall,l6)
     
      - 0.244*delta(SOA,spring-fall,l7) - eta_high(fringe,CCGT,SOA) + eta_low(fringe,CCGT,SOA) =E= -0.474612642199789 ; (LHS = -0.474612642199787)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_4  =E=  Equation (8.4)

Eq9_4(fringe,East,COA,EOA,winter,l1,s1)..  - price(COA,winter,l1,s1) + price(EOA,winter,l1,s1) - price_trans(East,winter,l1,s1) + zeta(fringe,East,COA,EOA,winter,l1,s1) =E= 0 ;
     
      (LHS = -3.8416, INFES = 3.8416 ****)
     
Eq9_4(fringe,East,COA,EOA,winter,l1,s2)..  - price(COA,winter,l1,s2) + price(EOA,winter,l1,s2) - price_trans(East,winter,l1,s2) + zeta(fringe,East,COA,EOA,winter,l1,s2) =E= 0 ;
     
      (LHS = -3.8416, INFES = 3.8416 ****)
     
Eq9_4(fringe,East,COA,EOA,winter,l1,s3)..  - price(COA,winter,l1,s3) + price(EOA,winter,l1,s3) - price_trans(East,winter,l1,s3) + zeta(fringe,East,COA,EOA,winter,l1,s3) =E= 0 ;
     
      (LHS = -3.8416, INFES = 3.8416 ****)
     
REMAINING 3597 ENTRIES SKIPPED


---- Eq9_5  =G=  

Eq9_5(fringe,CCGT,COA,winter,l1,s1)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s1) =G= 0 ; (LHS = 7.79530589218436)
     
Eq9_5(fringe,CCGT,COA,winter,l1,s2)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s2) =G= 0 ; (LHS = 7.76093424239447)
     
Eq9_5(fringe,CCGT,COA,winter,l1,s3)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s3) =G= 0 ; (LHS = 7.76093424239447)
     
REMAINING 9597 ENTRIES SKIPPED


---- Eq9_6  =G=  

Eq9_6(fringe,CCGT,COA)..  - ret(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq9_6(fringe,CCGT,EOA)..  - ret(fringe,CCGT,EOA) =G= -2.56737 ; (LHS = 0)
     
Eq9_6(fringe,CCGT,SOA)..  - ret(fringe,CCGT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_7  =E=  

Eq9_7(fringe,CCGT,COA)..  - inv(fringe,CCGT,COA) + ret(fringe,CCGT,COA) + Cap_avail(fringe,CCGT,COA) =E= 0 ; (LHS = 0)
     
Eq9_7(fringe,CCGT,EOA)..  - inv(fringe,CCGT,EOA) + ret(fringe,CCGT,EOA) + Cap_avail(fringe,CCGT,EOA) =E= 2.56737 ; (LHS = 2.56737)
     
Eq9_7(fringe,CCGT,SOA)..  - inv(fringe,CCGT,SOA) + ret(fringe,CCGT,SOA) + Cap_avail(fringe,CCGT,SOA) =E= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_8  =E=  

Eq9_8(fringe,COA,winter,l1,s1)..  - Q(fringe,CCGT,COA,winter,l1,s1) - Q(fringe,GT,COA,winter,l1,s1) - Q(fringe,ST,COA,winter,l1,s1) - Q(fringe,Nuclear,COA,winter,l1,s1)
     
      + sales(fringe,COA,winter,l1,s1) + trade(fringe,East,COA,EOA,winter,l1,s1) - trade(fringe,East,EOA,COA,winter,l1,s1) + trade(fringe,west,COA,WOA,winter,l1,s1)
     
      - trade(fringe,west,WOA,COA,winter,l1,s1) =E= 0 ; (LHS = 0)
     
Eq9_8(fringe,COA,winter,l1,s2)..  - Q(fringe,CCGT,COA,winter,l1,s2) - Q(fringe,GT,COA,winter,l1,s2) - Q(fringe,ST,COA,winter,l1,s2) - Q(fringe,Nuclear,COA,winter,l1,s2)
     
      + sales(fringe,COA,winter,l1,s2) + trade(fringe,East,COA,EOA,winter,l1,s2) - trade(fringe,East,EOA,COA,winter,l1,s2) + trade(fringe,west,COA,WOA,winter,l1,s2)
     
      - trade(fringe,west,WOA,COA,winter,l1,s2) =E= 0 ; (LHS = 0)
     
Eq9_8(fringe,COA,winter,l1,s3)..  - Q(fringe,CCGT,COA,winter,l1,s3) - Q(fringe,GT,COA,winter,l1,s3) - Q(fringe,ST,COA,winter,l1,s3) - Q(fringe,Nuclear,COA,winter,l1,s3)
     
      + sales(fringe,COA,winter,l1,s3) + trade(fringe,East,COA,EOA,winter,l1,s3) - trade(fringe,East,EOA,COA,winter,l1,s3) + trade(fringe,west,COA,WOA,winter,l1,s3)
     
      - trade(fringe,west,WOA,COA,winter,l1,s3) =E= 0 ; (LHS = 0)
     
REMAINING 2397 ENTRIES SKIPPED


---- Eq10_1  =E=  

Eq10_1(East,COA,EOA,winter,l1,s1)..  - price(COA,winter,l1,s1) + price(EOA,winter,l1,s1) - price_trans(East,winter,l1,s1) + shadows_arbitrage(East,COA,EOA,winter,l1,s1) =E= 0 ; (LHS = 0)
     
Eq10_1(East,COA,EOA,winter,l1,s2)..  - price(COA,winter,l1,s2) + price(EOA,winter,l1,s2) - price_trans(East,winter,l1,s2) + shadows_arbitrage(East,COA,EOA,winter,l1,s2) =E= 0 ; (LHS = 0)
     
Eq10_1(East,COA,EOA,winter,l1,s3)..  - price(COA,winter,l1,s3) + price(EOA,winter,l1,s3) - price_trans(East,winter,l1,s3) + shadows_arbitrage(East,COA,EOA,winter,l1,s3) =E= 0 ; (LHS = 0)
     
REMAINING 717 ENTRIES SKIPPED


---- Eq11_1  =E=  

Eq11_1(East,winter,l1,s1)..  price_trans(East,winter,l1,s1) - 2.04918032786885*tau(East,winter,l1,s1) =E= 3.78 ; (LHS = 3.78)
     
Eq11_1(East,winter,l1,s2)..  price_trans(East,winter,l1,s2) - 2.04918032786885*tau(East,winter,l1,s2) =E= 3.78 ; (LHS = 3.78)
     
Eq11_1(East,winter,l1,s3)..  price_trans(East,winter,l1,s3) - 2.04918032786885*tau(East,winter,l1,s3) =E= 3.78 ; (LHS = 3.78)
     
REMAINING 357 ENTRIES SKIPPED


---- Eq11_2  =G=  

Eq11_2(East,winter,l1,s1)..  - trans(East,winter,l1,s1) =G= -5.22 ; (LHS = 0)
     
Eq11_2(East,winter,l1,s2)..  - trans(East,winter,l1,s2) =G= -5.22 ; (LHS = 0)
     
Eq11_2(East,winter,l1,s3)..  - trans(East,winter,l1,s3) =G= -5.22 ; (LHS = 0)
     
REMAINING 357 ENTRIES SKIPPED


---- Eq11_3  =G=  

Eq11_3(East,winter,l1,s1)..  (1)*arbitrage(East,COA,EOA,winter,l1,s1) - (1)*arbitrage(East,EOA,COA,winter,l1,s1) + (1)*trade(fringe,East,COA,EOA,winter,l1,s1)
     
      - (1)*trade(fringe,East,EOA,COA,winter,l1,s1) + (1)*trade(g1,East,COA,EOA,winter,l1,s1) - (1)*trade(g1,East,EOA,COA,winter,l1,s1) + (1)*trade(g2,East,COA,EOA,winter,l1,s1)
     
      - (1)*trade(g2,East,EOA,COA,winter,l1,s1) + (1)*trade(g3,East,COA,EOA,winter,l1,s1) - (1)*trade(g3,East,EOA,COA,winter,l1,s1) + (1)*trade(g4,East,COA,EOA,winter,l1,s1)
     
      - (1)*trade(g4,East,EOA,COA,winter,l1,s1) + trans(East,winter,l1,s1) =G= 0 ; (LHS = 0)
     
Eq11_3(East,winter,l1,s2)..  (1)*arbitrage(East,COA,EOA,winter,l1,s2) - (1)*arbitrage(East,EOA,COA,winter,l1,s2) + (1)*trade(fringe,East,COA,EOA,winter,l1,s2)
     
      - (1)*trade(fringe,East,EOA,COA,winter,l1,s2) + (1)*trade(g1,East,COA,EOA,winter,l1,s2) - (1)*trade(g1,East,EOA,COA,winter,l1,s2) + (1)*trade(g2,East,COA,EOA,winter,l1,s2)
     
      - (1)*trade(g2,East,EOA,COA,winter,l1,s2) + (1)*trade(g3,East,COA,EOA,winter,l1,s2) - (1)*trade(g3,East,EOA,COA,winter,l1,s2) + (1)*trade(g4,East,COA,EOA,winter,l1,s2)
     
      - (1)*trade(g4,East,EOA,COA,winter,l1,s2) + trans(East,winter,l1,s2) =G= 0 ; (LHS = 0)
     
Eq11_3(East,winter,l1,s3)..  (1)*arbitrage(East,COA,EOA,winter,l1,s3) - (1)*arbitrage(East,EOA,COA,winter,l1,s3) + (1)*trade(fringe,East,COA,EOA,winter,l1,s3)
     
      - (1)*trade(fringe,East,EOA,COA,winter,l1,s3) + (1)*trade(g1,East,COA,EOA,winter,l1,s3) - (1)*trade(g1,East,EOA,COA,winter,l1,s3) + (1)*trade(g2,East,COA,EOA,winter,l1,s3)
     
      - (1)*trade(g2,East,EOA,COA,winter,l1,s3) + (1)*trade(g3,East,COA,EOA,winter,l1,s3) - (1)*trade(g3,East,EOA,COA,winter,l1,s3) + (1)*trade(g4,East,COA,EOA,winter,l1,s3)
     
      - (1)*trade(g4,East,EOA,COA,winter,l1,s3) + trans(East,winter,l1,s3) =G= 0 ; (LHS = 0)
     
REMAINING 357 ENTRIES SKIPPED


---- Eq_q  =G=  

Eq_q(fringe,CCGT,COA,winter,l1,s1)..  Q(fringe,CCGT,COA,winter,l1,s1) =G= 0 ; (LHS = 11.1340810541032)
     
Eq_q(fringe,CCGT,COA,winter,l1,s2)..  Q(fringe,CCGT,COA,winter,l1,s2) =G= 0 ; (LHS = 11.1684527038931)
     
Eq_q(fringe,CCGT,COA,winter,l1,s3)..  Q(fringe,CCGT,COA,winter,l1,s3) =G= 0 ; (LHS = 11.1684527038931)
     
REMAINING 9597 ENTRIES SKIPPED


---- Eq_trade  =G=  

Eq_trade(fringe,East,COA,EOA,winter,l1,s1)..  trade(fringe,East,COA,EOA,winter,l1,s1) =G= 0 ; (LHS = 0)
     
Eq_trade(fringe,East,COA,EOA,winter,l1,s2)..  trade(fringe,East,COA,EOA,winter,l1,s2) =G= 0 ; (LHS = 0)
     
Eq_trade(fringe,East,COA,EOA,winter,l1,s3)..  trade(fringe,East,COA,EOA,winter,l1,s3) =G= 0 ; (LHS = 0)
     
REMAINING 3597 ENTRIES SKIPPED


---- Eq_inv  =G=  

Eq_inv(fringe,CCGT,COA)..  inv(fringe,CCGT,COA) =G= 0 ; (LHS = 18.9293869462875)
     
Eq_inv(fringe,CCGT,EOA)..  inv(fringe,CCGT,EOA) =G= 0 ; (LHS = 18.5522707396489)
     
Eq_inv(fringe,CCGT,SOA)..  inv(fringe,CCGT,SOA) =G= 0 ; (LHS = 5.11144100072829)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq_ret  =G=  

Eq_ret(fringe,CCGT,COA)..  ret(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq_ret(fringe,CCGT,EOA)..  ret(fringe,CCGT,EOA) =G= 0 ; (LHS = 0)
     
Eq_ret(fringe,CCGT,SOA)..  ret(fringe,CCGT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq_arb  =G=  

Eq_arb(East,COA,EOA,winter,l1,s1)..  arbitrage(East,COA,EOA,winter,l1,s1) =G= 0 ; (LHS = 0)
     
Eq_arb(East,COA,EOA,winter,l1,s2)..  arbitrage(East,COA,EOA,winter,l1,s2) =G= 0 ; (LHS = 0)
     
Eq_arb(East,COA,EOA,winter,l1,s3)..  arbitrage(East,COA,EOA,winter,l1,s3) =G= 0 ; (LHS = 0)
     
REMAINING 717 ENTRIES SKIPPED

GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/12/16 10:57:32 Page 4
Dynamic Programming Investment
Column Listing      SOLVE CMO Using MCP From line 693


---- inv  investment by player i in technology h

inv(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 18.9293869462875, +INF, 0)
       -1       Eq9_7(fringe,CCGT,COA)
        1       Eq_inv(fringe,CCGT,COA)

inv(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 18.5522707396489, +INF, 0)
       -1       Eq9_7(fringe,CCGT,EOA)
        1       Eq_inv(fringe,CCGT,EOA)

inv(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 5.11144100072829, +INF, 0)
       -1       Eq9_7(fringe,CCGT,SOA)
        1       Eq_inv(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- ret  retirement of technology h in region r by player i

ret(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,COA)
        1       Eq9_7(fringe,CCGT,COA)
        1       Eq_ret(fringe,CCGT,COA)

ret(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,EOA)
        1       Eq9_7(fringe,CCGT,EOA)
        1       Eq_ret(fringe,CCGT,EOA)

ret(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,SOA)
        1       Eq9_7(fringe,CCGT,SOA)
        1       Eq_ret(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- Cap_avail  available capacity of player i of technolgy h in region r in MW

Cap_avail(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 18.9293869462875, +INF, 0)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s4)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s5)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s4)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s5)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s4)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s5)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s4)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s5)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s4)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s5)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s4)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s5)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s4)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s5)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s3)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s4)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s5)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s4)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s5)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s4)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s5)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s4)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s5)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s4)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s5)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s4)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s5)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s4)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s5)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s4)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s5)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s3)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s4)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s5)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s4)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s5)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s4)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s5)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s4)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s5)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s4)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s5)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s4)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s5)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s4)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s5)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s4)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s5)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s3)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s4)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s5)
        1       Eq9_7(fringe,CCGT,COA)

Cap_avail(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 21.1196407396489, +INF, 0)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s4)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s5)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s4)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s5)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s4)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s5)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s4)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s5)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s4)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s5)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s4)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s5)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s4)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s5)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s3)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s4)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s5)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s4)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s5)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s4)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s5)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s4)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s5)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s4)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s5)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s4)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s5)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s4)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s5)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s4)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s5)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s3)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s4)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s5)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s4)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s5)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s4)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s5)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s4)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s5)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s4)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s5)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s4)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s5)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s4)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s5)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s4)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s5)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s3)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s4)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s5)
        1       Eq9_7(fringe,CCGT,EOA)

Cap_avail(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 5.11144100072829, +INF, 0)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s4)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s5)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s4)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s5)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s4)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s5)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s4)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s5)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s4)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s5)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s4)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s5)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s4)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s5)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s3)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s4)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s5)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s4)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s5)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s4)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s5)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s4)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s5)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s4)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s5)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s4)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s5)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s4)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s5)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s4)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s5)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s3)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s4)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s5)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s4)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s5)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s4)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s5)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s4)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s5)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s4)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s5)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s4)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s5)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s4)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s5)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s4)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s5)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s3)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s4)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s5)
        1       Eq9_7(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- Q  generation quantity from a player i at market l in scenario in MW

Q(fringe,CCGT,COA,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 11.1340810541032, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s1)
       -1       Eq9_8(fringe,COA,winter,l1,s1)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s1)

Q(fringe,CCGT,COA,winter,l1,s2)
                (.LO, .L, .UP, .M = -INF, 11.1684527038931, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s2)
       -1       Eq9_8(fringe,COA,winter,l1,s2)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s2)

Q(fringe,CCGT,COA,winter,l1,s3)
                (.LO, .L, .UP, .M = -INF, 11.1684527038931, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s3)
       -1       Eq9_8(fringe,COA,winter,l1,s3)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s3)

REMAINING 9597 ENTRIES SKIPPED

---- sales  sales of firm in region r market l scenario s in MW

sales(fringe,COA,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 11.1340810541032, +INF, 0)
       28.9023  Eq1(COA,winter,l1,s1)
        1       Eq9_8(fringe,COA,winter,l1,s1)

sales(fringe,COA,winter,l1,s2)
                (.LO, .L, .UP, .M = -INF, 11.1684527038931, +INF, 0)
       32.5518  Eq1(COA,winter,l1,s2)
        1       Eq9_8(fringe,COA,winter,l1,s2)

sales(fringe,COA,winter,l1,s3)
                (.LO, .L, .UP, .M = -INF, 11.1684527038931, +INF, 0)
       32.5518  Eq1(COA,winter,l1,s3)
        1       Eq9_8(fringe,COA,winter,l1,s3)

REMAINING 2397 ENTRIES SKIPPED

---- lambda_high  shadow prices for the high capacity constraint in USD per  MWh

lambda_high(fringe,CCGT,COA,winter,l1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 7.79530589218436)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s1)
        0.0033  Eq9_2(fringe,CCGT,COA)
       -0.0033  Eq9_3(fringe,CCGT,COA)

lambda_high(fringe,CCGT,COA,winter,l1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 7.76093424239447)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s2)
        0.0185  Eq9_2(fringe,CCGT,COA)
       -0.0185  Eq9_3(fringe,CCGT,COA)

lambda_high(fringe,CCGT,COA,winter,l1,s3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 7.76093424239447)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s3)
        0.0669  Eq9_2(fringe,CCGT,COA)
       -0.0669  Eq9_3(fringe,CCGT,COA)

REMAINING 9597 ENTRIES SKIPPED

---- lambda_low  shadows prices for low constraint in USD per  MWh

lambda_low(fringe,CCGT,COA,winter,l1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 11.1340810541032)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1)

lambda_low(fringe,CCGT,COA,winter,l1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 11.1684527038931)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s2)

lambda_low(fringe,CCGT,COA,winter,l1,s3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 11.1684527038931)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s3)

REMAINING 9597 ENTRIES SKIPPED

---- delta  shadow prices for the capacity market in USD per  MW per hour

delta(COA,winter,l5)
                (.LO, .L, .UP, .M = -INF, 40.4789709383651, +INF, 0)
        1       Eq2(COA,winter,l5)
        0.366   Eq9_2(fringe,CCGT,COA)
        0.366   Eq9_2(fringe,GT,COA)
        0.366   Eq9_2(fringe,ST,COA)
        0.366   Eq9_2(fringe,Nuclear,COA)
        0.366   Eq9_2(g1,CCGT,COA)
        0.366   Eq9_2(g1,GT,COA)
        0.366   Eq9_2(g1,ST,COA)
        0.366   Eq9_2(g1,Nuclear,COA)
        0.366   Eq9_2(g2,CCGT,COA)
        0.366   Eq9_2(g2,GT,COA)
        0.366   Eq9_2(g2,ST,COA)
        0.366   Eq9_2(g2,Nuclear,COA)
        0.366   Eq9_2(g3,CCGT,COA)
        0.366   Eq9_2(g3,GT,COA)
        0.366   Eq9_2(g3,ST,COA)
        0.366   Eq9_2(g3,Nuclear,COA)
        0.366   Eq9_2(g4,CCGT,COA)
        0.366   Eq9_2(g4,GT,COA)
        0.366   Eq9_2(g4,ST,COA)
        0.366   Eq9_2(g4,Nuclear,COA)
       -0.366   Eq9_3(fringe,CCGT,COA)
       -0.366   Eq9_3(fringe,GT,COA)
       -0.366   Eq9_3(fringe,ST,COA)
       -0.366   Eq9_3(fringe,Nuclear,COA)
       -0.366   Eq9_3(g1,CCGT,COA)
       -0.366   Eq9_3(g1,GT,COA)
       -0.366   Eq9_3(g1,ST,COA)
       -0.366   Eq9_3(g1,Nuclear,COA)
       -0.366   Eq9_3(g2,CCGT,COA)
       -0.366   Eq9_3(g2,GT,COA)
       -0.366   Eq9_3(g2,ST,COA)
       -0.366   Eq9_3(g2,Nuclear,COA)
       -0.366   Eq9_3(g3,CCGT,COA)
       -0.366   Eq9_3(g3,GT,COA)
       -0.366   Eq9_3(g3,ST,COA)
       -0.366   Eq9_3(g3,Nuclear,COA)
       -0.366   Eq9_3(g4,CCGT,COA)
       -0.366   Eq9_3(g4,GT,COA)
       -0.366   Eq9_3(g4,ST,COA)
       -0.366   Eq9_3(g4,Nuclear,COA)

delta(COA,winter,l6)
                (.LO, .L, .UP, .M = -INF, 40.4789709383651, +INF, 0)
        1       Eq2(COA,winter,l6)
        0.244   Eq9_2(fringe,CCGT,COA)
        0.244   Eq9_2(fringe,GT,COA)
        0.244   Eq9_2(fringe,ST,COA)
        0.244   Eq9_2(fringe,Nuclear,COA)
        0.244   Eq9_2(g1,CCGT,COA)
        0.244   Eq9_2(g1,GT,COA)
        0.244   Eq9_2(g1,ST,COA)
        0.244   Eq9_2(g1,Nuclear,COA)
        0.244   Eq9_2(g2,CCGT,COA)
        0.244   Eq9_2(g2,GT,COA)
        0.244   Eq9_2(g2,ST,COA)
        0.244   Eq9_2(g2,Nuclear,COA)
        0.244   Eq9_2(g3,CCGT,COA)
        0.244   Eq9_2(g3,GT,COA)
        0.244   Eq9_2(g3,ST,COA)
        0.244   Eq9_2(g3,Nuclear,COA)
        0.244   Eq9_2(g4,CCGT,COA)
        0.244   Eq9_2(g4,GT,COA)
        0.244   Eq9_2(g4,ST,COA)
        0.244   Eq9_2(g4,Nuclear,COA)
       -0.244   Eq9_3(fringe,CCGT,COA)
       -0.244   Eq9_3(fringe,GT,COA)
       -0.244   Eq9_3(fringe,ST,COA)
       -0.244   Eq9_3(fringe,Nuclear,COA)
       -0.244   Eq9_3(g1,CCGT,COA)
       -0.244   Eq9_3(g1,GT,COA)
       -0.244   Eq9_3(g1,ST,COA)
       -0.244   Eq9_3(g1,Nuclear,COA)
       -0.244   Eq9_3(g2,CCGT,COA)
       -0.244   Eq9_3(g2,GT,COA)
       -0.244   Eq9_3(g2,ST,COA)
       -0.244   Eq9_3(g2,Nuclear,COA)
       -0.244   Eq9_3(g3,CCGT,COA)
       -0.244   Eq9_3(g3,GT,COA)
       -0.244   Eq9_3(g3,ST,COA)
       -0.244   Eq9_3(g3,Nuclear,COA)
       -0.244   Eq9_3(g4,CCGT,COA)
       -0.244   Eq9_3(g4,GT,COA)
       -0.244   Eq9_3(g4,ST,COA)
       -0.244   Eq9_3(g4,Nuclear,COA)

delta(COA,winter,l7)
                (.LO, .L, .UP, .M = -INF, 40.4789709383651, +INF, 0)
        1       Eq2(COA,winter,l7)
        0.244   Eq9_2(fringe,CCGT,COA)
        0.244   Eq9_2(fringe,GT,COA)
        0.244   Eq9_2(fringe,ST,COA)
        0.244   Eq9_2(fringe,Nuclear,COA)
        0.244   Eq9_2(g1,CCGT,COA)
        0.244   Eq9_2(g1,GT,COA)
        0.244   Eq9_2(g1,ST,COA)
        0.244   Eq9_2(g1,Nuclear,COA)
        0.244   Eq9_2(g2,CCGT,COA)
        0.244   Eq9_2(g2,GT,COA)
        0.244   Eq9_2(g2,ST,COA)
        0.244   Eq9_2(g2,Nuclear,COA)
        0.244   Eq9_2(g3,CCGT,COA)
        0.244   Eq9_2(g3,GT,COA)
        0.244   Eq9_2(g3,ST,COA)
        0.244   Eq9_2(g3,Nuclear,COA)
        0.244   Eq9_2(g4,CCGT,COA)
        0.244   Eq9_2(g4,GT,COA)
        0.244   Eq9_2(g4,ST,COA)
        0.244   Eq9_2(g4,Nuclear,COA)
       -0.244   Eq9_3(fringe,CCGT,COA)
       -0.244   Eq9_3(fringe,GT,COA)
       -0.244   Eq9_3(fringe,ST,COA)
       -0.244   Eq9_3(fringe,Nuclear,COA)
       -0.244   Eq9_3(g1,CCGT,COA)
       -0.244   Eq9_3(g1,GT,COA)
       -0.244   Eq9_3(g1,ST,COA)
       -0.244   Eq9_3(g1,Nuclear,COA)
       -0.244   Eq9_3(g2,CCGT,COA)
       -0.244   Eq9_3(g2,GT,COA)
       -0.244   Eq9_3(g2,ST,COA)
       -0.244   Eq9_3(g2,Nuclear,COA)
       -0.244   Eq9_3(g3,CCGT,COA)
       -0.244   Eq9_3(g3,GT,COA)
       -0.244   Eq9_3(g3,ST,COA)
       -0.244   Eq9_3(g3,Nuclear,COA)
       -0.244   Eq9_3(g4,CCGT,COA)
       -0.244   Eq9_3(g4,GT,COA)
       -0.244   Eq9_3(g4,ST,COA)
       -0.244   Eq9_3(g4,Nuclear,COA)

REMAINING 33 ENTRIES SKIPPED

---- price  energy price in USD per MWh

price(COA,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 8.860975, +INF, 0)
        1       Eq1(COA,winter,l1,s1)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1)
        1       Eq9_1(fringe,GT,COA,winter,l1,s1)
        1       Eq9_1(fringe,ST,COA,winter,l1,s1)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s1)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s1)
        1       Eq9_1(g1,GT,COA,winter,l1,s1)
        1       Eq9_1(g1,ST,COA,winter,l1,s1)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s1)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s1)
        1       Eq9_1(g2,GT,COA,winter,l1,s1)
        1       Eq9_1(g2,ST,COA,winter,l1,s1)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s1)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s1)
        1       Eq9_1(g3,GT,COA,winter,l1,s1)
        1       Eq9_1(g3,ST,COA,winter,l1,s1)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s1)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s1)
        1       Eq9_1(g4,GT,COA,winter,l1,s1)
        1       Eq9_1(g4,ST,COA,winter,l1,s1)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s1)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1)
        1       Eq9_4(fringe,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(fringe,west,COA,WOA,winter,l1,s1)
        1       Eq9_4(fringe,west,WOA,COA,winter,l1,s1)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s1)
        1       Eq9_4(g1,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g1,west,COA,WOA,winter,l1,s1)
        1       Eq9_4(g1,west,WOA,COA,winter,l1,s1)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s1)
        1       Eq9_4(g2,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g2,west,COA,WOA,winter,l1,s1)
        1       Eq9_4(g2,west,WOA,COA,winter,l1,s1)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s1)
        1       Eq9_4(g3,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g3,west,COA,WOA,winter,l1,s1)
        1       Eq9_4(g3,west,WOA,COA,winter,l1,s1)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s1)
        1       Eq9_4(g4,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g4,west,COA,WOA,winter,l1,s1)
        1       Eq9_4(g4,west,WOA,COA,winter,l1,s1)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1)
        1       Eq10_1(East,EOA,COA,winter,l1,s1)
       -1       Eq10_1(west,COA,WOA,winter,l1,s1)
        1       Eq10_1(west,WOA,COA,winter,l1,s1)

price(COA,winter,l1,s2)
                (.LO, .L, .UP, .M = -INF, 8.860975, +INF, 0)
        1       Eq1(COA,winter,l1,s2)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s2)
        1       Eq9_1(fringe,GT,COA,winter,l1,s2)
        1       Eq9_1(fringe,ST,COA,winter,l1,s2)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s2)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s2)
        1       Eq9_1(g1,GT,COA,winter,l1,s2)
        1       Eq9_1(g1,ST,COA,winter,l1,s2)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s2)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s2)
        1       Eq9_1(g2,GT,COA,winter,l1,s2)
        1       Eq9_1(g2,ST,COA,winter,l1,s2)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s2)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s2)
        1       Eq9_1(g3,GT,COA,winter,l1,s2)
        1       Eq9_1(g3,ST,COA,winter,l1,s2)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s2)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s2)
        1       Eq9_1(g4,GT,COA,winter,l1,s2)
        1       Eq9_1(g4,ST,COA,winter,l1,s2)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s2)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s2)
        1       Eq9_4(fringe,East,EOA,COA,winter,l1,s2)
       -1       Eq9_4(fringe,west,COA,WOA,winter,l1,s2)
        1       Eq9_4(fringe,west,WOA,COA,winter,l1,s2)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s2)
        1       Eq9_4(g1,East,EOA,COA,winter,l1,s2)
       -1       Eq9_4(g1,west,COA,WOA,winter,l1,s2)
        1       Eq9_4(g1,west,WOA,COA,winter,l1,s2)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s2)
        1       Eq9_4(g2,East,EOA,COA,winter,l1,s2)
       -1       Eq9_4(g2,west,COA,WOA,winter,l1,s2)
        1       Eq9_4(g2,west,WOA,COA,winter,l1,s2)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s2)
        1       Eq9_4(g3,East,EOA,COA,winter,l1,s2)
       -1       Eq9_4(g3,west,COA,WOA,winter,l1,s2)
        1       Eq9_4(g3,west,WOA,COA,winter,l1,s2)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s2)
        1       Eq9_4(g4,East,EOA,COA,winter,l1,s2)
       -1       Eq9_4(g4,west,COA,WOA,winter,l1,s2)
        1       Eq9_4(g4,west,WOA,COA,winter,l1,s2)
       -1       Eq10_1(East,COA,EOA,winter,l1,s2)
        1       Eq10_1(East,EOA,COA,winter,l1,s2)
       -1       Eq10_1(west,COA,WOA,winter,l1,s2)
        1       Eq10_1(west,WOA,COA,winter,l1,s2)

price(COA,winter,l1,s3)
                (.LO, .L, .UP, .M = -INF, 8.860975, +INF, 0)
        1       Eq1(COA,winter,l1,s3)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s3)
        1       Eq9_1(fringe,GT,COA,winter,l1,s3)
        1       Eq9_1(fringe,ST,COA,winter,l1,s3)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s3)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s3)
        1       Eq9_1(g1,GT,COA,winter,l1,s3)
        1       Eq9_1(g1,ST,COA,winter,l1,s3)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s3)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s3)
        1       Eq9_1(g2,GT,COA,winter,l1,s3)
        1       Eq9_1(g2,ST,COA,winter,l1,s3)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s3)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s3)
        1       Eq9_1(g3,GT,COA,winter,l1,s3)
        1       Eq9_1(g3,ST,COA,winter,l1,s3)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s3)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s3)
        1       Eq9_1(g4,GT,COA,winter,l1,s3)
        1       Eq9_1(g4,ST,COA,winter,l1,s3)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s3)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s3)
        1       Eq9_4(fringe,East,EOA,COA,winter,l1,s3)
       -1       Eq9_4(fringe,west,COA,WOA,winter,l1,s3)
        1       Eq9_4(fringe,west,WOA,COA,winter,l1,s3)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s3)
        1       Eq9_4(g1,East,EOA,COA,winter,l1,s3)
       -1       Eq9_4(g1,west,COA,WOA,winter,l1,s3)
        1       Eq9_4(g1,west,WOA,COA,winter,l1,s3)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s3)
        1       Eq9_4(g2,East,EOA,COA,winter,l1,s3)
       -1       Eq9_4(g2,west,COA,WOA,winter,l1,s3)
        1       Eq9_4(g2,west,WOA,COA,winter,l1,s3)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s3)
        1       Eq9_4(g3,East,EOA,COA,winter,l1,s3)
       -1       Eq9_4(g3,west,COA,WOA,winter,l1,s3)
        1       Eq9_4(g3,west,WOA,COA,winter,l1,s3)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s3)
        1       Eq9_4(g4,East,EOA,COA,winter,l1,s3)
       -1       Eq9_4(g4,west,COA,WOA,winter,l1,s3)
        1       Eq9_4(g4,west,WOA,COA,winter,l1,s3)
       -1       Eq10_1(East,COA,EOA,winter,l1,s3)
        1       Eq10_1(East,EOA,COA,winter,l1,s3)
       -1       Eq10_1(west,COA,WOA,winter,l1,s3)
        1       Eq10_1(west,WOA,COA,winter,l1,s3)

REMAINING 477 ENTRIES SKIPPED

---- price_trans  tranmission price in USD per MWh

price_trans(East,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1)
       -1       Eq9_4(fringe,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s1)
       -1       Eq9_4(g1,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s1)
       -1       Eq9_4(g2,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s1)
       -1       Eq9_4(g3,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s1)
       -1       Eq9_4(g4,East,EOA,COA,winter,l1,s1)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1)
       -1       Eq10_1(East,EOA,COA,winter,l1,s1)
        1       Eq11_1(East,winter,l1,s1)

price_trans(East,winter,l1,s2)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s2)
       -1       Eq9_4(fringe,East,EOA,COA,winter,l1,s2)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s2)
       -1       Eq9_4(g1,East,EOA,COA,winter,l1,s2)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s2)
       -1       Eq9_4(g2,East,EOA,COA,winter,l1,s2)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s2)
       -1       Eq9_4(g3,East,EOA,COA,winter,l1,s2)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s2)
       -1       Eq9_4(g4,East,EOA,COA,winter,l1,s2)
       -1       Eq10_1(East,COA,EOA,winter,l1,s2)
       -1       Eq10_1(East,EOA,COA,winter,l1,s2)
        1       Eq11_1(East,winter,l1,s2)

price_trans(East,winter,l1,s3)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s3)
       -1       Eq9_4(fringe,East,EOA,COA,winter,l1,s3)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s3)
       -1       Eq9_4(g1,East,EOA,COA,winter,l1,s3)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s3)
       -1       Eq9_4(g2,East,EOA,COA,winter,l1,s3)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s3)
       -1       Eq9_4(g3,East,EOA,COA,winter,l1,s3)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s3)
       -1       Eq9_4(g4,East,EOA,COA,winter,l1,s3)
       -1       Eq10_1(East,COA,EOA,winter,l1,s3)
       -1       Eq10_1(East,EOA,COA,winter,l1,s3)
        1       Eq11_1(East,winter,l1,s3)

REMAINING 357 ENTRIES SKIPPED

---- alpha  shadow prices for the non-negative investment constraints in USD per  MW

alpha(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 18.9293869462875)
        1       Eq9_2(fringe,CCGT,COA)

alpha(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 18.5522707396489)
        1       Eq9_2(fringe,CCGT,EOA)

alpha(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.11144100072829)
        1       Eq9_2(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- eta_high  shadow prices for the capacity retirment constraint in USD per  MW

eta_high(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_3(fringe,CCGT,COA)

eta_high(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 2.56737)
       -1       Eq9_3(fringe,CCGT,EOA)

eta_high(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_3(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- eta_low  

eta_low(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 131.179260935802, +INF, 0)
        1       Eq9_3(fringe,CCGT,COA)

eta_low(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 131.179260935802, +INF, 0)
        1       Eq9_3(fringe,CCGT,EOA)

eta_low(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 131.179260935802, +INF, 0)
        1       Eq9_3(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- arbitrage  TSO outgoing electricity arbitrage from node r on line n

arbitrage(East,COA,EOA,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      -28.9023  Eq1(COA,winter,l1,s1)
       17.4859  Eq1(EOA,winter,l1,s1)
       (1)      Eq11_3(East,winter,l1,s1)
        1       Eq_arb(East,COA,EOA,winter,l1,s1)

arbitrage(East,COA,EOA,winter,l1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      -32.5518  Eq1(COA,winter,l1,s2)
       19.6956  Eq1(EOA,winter,l1,s2)
       (1)      Eq11_3(East,winter,l1,s2)
        1       Eq_arb(East,COA,EOA,winter,l1,s2)

arbitrage(East,COA,EOA,winter,l1,s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      -32.5518  Eq1(COA,winter,l1,s3)
       19.6956  Eq1(EOA,winter,l1,s3)
       (1)      Eq11_3(East,winter,l1,s3)
        1       Eq_arb(East,COA,EOA,winter,l1,s3)

REMAINING 717 ENTRIES SKIPPED

---- trade  outgoing electricity trade by firm i from node r on line n

trade(fringe,East,COA,EOA,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_8(fringe,COA,winter,l1,s1)
       -1       Eq9_8(fringe,EOA,winter,l1,s1)
       (1)      Eq11_3(East,winter,l1,s1)
        1       Eq_trade(fringe,East,COA,EOA,winter,l1,s1)

trade(fringe,East,COA,EOA,winter,l1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_8(fringe,COA,winter,l1,s2)
       -1       Eq9_8(fringe,EOA,winter,l1,s2)
       (1)      Eq11_3(East,winter,l1,s2)
        1       Eq_trade(fringe,East,COA,EOA,winter,l1,s2)

trade(fringe,East,COA,EOA,winter,l1,s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_8(fringe,COA,winter,l1,s3)
       -1       Eq9_8(fringe,EOA,winter,l1,s3)
       (1)      Eq11_3(East,winter,l1,s3)
        1       Eq_trade(fringe,East,COA,EOA,winter,l1,s3)

REMAINING 3597 ENTRIES SKIPPED

---- trans  electricity trans by on line n

trans(East,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq11_2(East,winter,l1,s1)
        1       Eq11_3(East,winter,l1,s1)

trans(East,winter,l1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq11_2(East,winter,l1,s2)
        1       Eq11_3(East,winter,l1,s2)

trans(East,winter,l1,s3)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq11_2(East,winter,l1,s3)
        1       Eq11_3(East,winter,l1,s3)

REMAINING 357 ENTRIES SKIPPED

---- tau  shadow prices for the high capacity constraint in USD per MW

tau(East,winter,l1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.22)
       -2.0492  Eq11_1(East,winter,l1,s1)

tau(East,winter,l1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.22)
       -2.0492  Eq11_1(East,winter,l1,s2)

tau(East,winter,l1,s3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.22)
       -2.0492  Eq11_1(East,winter,l1,s3)

REMAINING 357 ENTRIES SKIPPED

---- zeta  shadow prices for the outgoing no-negative trade constraint in USD per MW

zeta(fringe,East,COA,EOA,winter,l1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1)

zeta(fringe,East,COA,EOA,winter,l1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_4(fringe,East,COA,EOA,winter,l1,s2)

zeta(fringe,East,COA,EOA,winter,l1,s3)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_4(fringe,East,COA,EOA,winter,l1,s3)

REMAINING 3597 ENTRIES SKIPPED

---- shadows_arbitrage  shadow prices for no-negative incoming arbitrage constriant in USD per MW

shadows_arbitrage(East,COA,EOA,winter,l1,s1)
                (.LO, .L, .UP, .M = 0, 3.8416, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s1)

shadows_arbitrage(East,COA,EOA,winter,l1,s2)
                (.LO, .L, .UP, .M = 0, 3.8416, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s2)

shadows_arbitrage(East,COA,EOA,winter,l1,s3)
                (.LO, .L, .UP, .M = 0, 3.8416, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s3)

REMAINING 717 ENTRIES SKIPPED
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/12/16 10:57:32 Page 5
Dynamic Programming Investment
Model Statistics    SOLVE CMO Using MCP From line 693


MODEL STATISTICS

BLOCKS OF EQUATIONS          19     SINGLE EQUATIONS       41,916
BLOCKS OF VARIABLES          19     SINGLE VARIABLES       41,916
NON ZERO ELEMENTS       143,316     NON LINEAR N-Z          4,320
DERIVATIVE POOL              10     CONSTANT POOL              16
CODE LENGTH               5,760


GENERATION TIME      =        0.204 SECONDS     25 MB  24.1.3 r41464 WEX-WEI


EXECUTION TIME       =        0.657 SECONDS     25 MB  24.1.3 r41464 WEX-WEI
