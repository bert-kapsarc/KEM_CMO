GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             11/11/16 15:55:28 Page 1
Dynamic Programming Investment
C o m p i l a t i o n


       
   5   
   6  *$INCLUDE ACCESS_HLC.gms
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Macros.gms
   8  ********************************************************************************
   9  *        MACROS for KEM
  10  ********************************************************************************
  11   
  12  *        Time dependant discount factor
  13  $MACRO   discfact(i,t)                   1/(1+i)**(ord(t)-1)
  14   
  15  *        sum of discount factors over lifetime T of capital
  16  $MACRO   sumdiscfact(T,i,n)              sum(n$(ord(n)<=T),discfact(i,n))
  17   
  18  *        Numerator of discounting coefficients
  19  *        Accounts for recursive dynmic solves when size of t greater than tt
  20  *        Consider final time period of tt to be a long term static solution
  21  $MACRO   intdiscfact(i,t,tt) sum(tt$(ord(tt)>=ord(t)),1/(1+i)**(ord(tt)-ord(t)))
  22   
  23  $MACRO   discounting(Time,i,n,t,tt)    intdiscfact(i,t,tt)/sumdiscfact(Time,i,n)
  24   
  25  * Solar position equations used for CSP implementation (Parameters described in power sub-model):
  26  * the parameter table "Dayofyear" in the power sub-model.
  27  * long and lat are specificed in power sub-model for each region;
  28   
  29  $MACRO   earthpos(Dayofyear)            ((Dayofyear-1)*360/365)
  30   
  31  $MACRO   EOT(Dayofyear)                  (229.2*(0.000075+0.001868*COS(earthpos(Dayofyear)*pi/180)-0.032077*SIN(earthpos(Dayofyear)*pi/180)-0.014615*COS(2*(earthpos(Dayofyear)*pi/180))-0.04089*S
      IN(2*(earthpos(Dayofyear)*pi/180))))
  32   
  33  $MACRO   solhr(hr,Dayofyear,long,tzone)       (((1$(frac(hr/24)=0)+frac(hr/24))*24*60-(long-tzone)*4+EOT(Dayofyear)))/60
  34  $MACRO   hourangle(solhour)                   (solhour-12)*360/24
  35   
  36  $MACRO   soldecl(Dayofyear)              (0.3963723-22.9132745*COS(earthpos(Dayofyear)*pi/180)+4.0254304*SIN(earthpos(Dayofyear)*pi/180)-0.387205*COS(2*earthpos(Dayofyear)*pi/180)+0.05196728*SIN
      (2*earthpos(Dayofyear)*pi/180)-0.1545267*COS(3*earthpos(Dayofyear)*pi/180)+0.0847977*SIN(3*earthpos(Dayofyear)*pi/180))
  37  $MACRO   solalt(hrangle,solardeclination,lat)   (arcsin(COS(lat*pi/180)*COS(hrangle*pi/180)*COS(solardeclination*pi/180)+SIN(lat*pi/180)*SIN(solardeclination*pi/180))*180/pi)
  38  $MACRO   solazim(hrangle,solardeclination,lat,solaralt)  (180/pi*arccos((SIN(solardeclination*pi/180)*COS(lat*pi/180)-COS(solardeclination*pi/180)*SIN(lat*pi/180)*COS(hrangle*pi/180))/COS(solara
      lt*pi/180)))
  39  $MACRO   Gamma(solarazimuth,surfaceazimuth)  (ABS(solarazimuth-surfaceazimuth))
  40   
  41   
  42  $MACRO   Incidence(solaralt,gammaa,orientation)    (180/pi*arccos(COS(solaralt*pi/180)*COS(gammaa*pi/180)*SIN(orientation*pi/180)+SIN(solaralt*pi/180)*COS(orientation*pi/180)))
  43  *orientation is the tilt angle of the surface, 0 for horizontal surfaces and 90 degrees for vertical surfaces.
  44   
FUNCLIBIN  stolib stodclib
Function Library stolib
Random deviates, probability density function, cumulative distribution function, inverse cumulative distribution function
GAMS Development Corporation

Mod. Function                          Description
Type

none SetSeed(SEED)                     Define the seed for random number gen
none dUniform(LOW,HIGH)                Uniform distribution
DNLP pdfUniform(x,LOW,HIGH)            Probability density function for uniform distribution
DNLP cdfUniform(x,LOW,HIGH)            Cumulative distribution function for uniform distribution
DNLP icdfUniform(x,LOW,HIGH)           Inverse cumulative distribution function for uniform distribution
none dNormal(MEAN,STD_DEV)             Normal distribution
DNLP pdfNormal(x,MEAN,STD_DEV)         Probability density function for normal distribution
DNLP cdfNormal(x,MEAN,STD_DEV)         Cumulative distribution function for normal distribution
DNLP icdfNormal(x,MEAN,STD_DEV)        Inverse cumulative distribution function for normal distribution
none dInvGaussian(MEAN,SHAPE)          Inverse Gaussian distribution
DNLP pdfInvGaussian(x,MEAN,SHAPE)      Probability density function for inverse Gaussian distribution
DNLP cdfInvGaussian(x,MEAN,SHAPE)      Cumulative distribution function for inverse Gaussian distribution
DNLP icdfInvGaussian(x,MEAN,SHAPE)     Inverse cumulative distribution function for inverse Gaussian distribution
none dRayleigh(SIGMA)                  Rayleigh distribution
DNLP pdfRayleigh(x,SIGMA)              Probability density function for Rayleigh distribution
DNLP cdfRayleigh(x,SIGMA)              Cumulative distribution function for Rayleigh distribution
DNLP icdfRayleigh(x,SIGMA)             Inverse cumulative distribution function for Rayleigh distribution
none dCauchy(LOCATION,SCALE)           Cauchy distribution
DNLP pdfCauchy(x,LOCATION,SCALE)       Probability density function for Cauchy distribution
DNLP cdfCauchy(x,LOCATION,SCALE)       Cumulative distribution function for Cauchy distribution
DNLP icdfCauchy(x,LOCATION,SCALE)      Inverse cumulative distribution function for Cauchy distribution
none dLognormal(MEAN,STD_DEV)          Lognormal distribution
DNLP pdfLognormal(x,MEAN,STD_DEV)      Probability density function for Lognormal distribution
DNLP cdfLognormal(x,MEAN,STD_DEV)      Cumulative distribution function for Lognormal distribution
DNLP icdfLognormal(x,MEAN,STD_DEV)     Inverse cumulative distribution function for Lognormal distribution
none dExponential(LAMBDA)              Exponential distribution
DNLP pdfExponential(x,LAMBDA)          Probability density function for Exponential distribution
DNLP cdfExponential(x,LAMBDA)          Cumulative distribution function for Exponential distribution
DNLP icdfExponential(x,LAMBDA)         Inverse cumulative distribution function for Exponential distribution
none dLogistic(LOCATION,SCALE)         Logistic distribution
DNLP pdfLogistic(x,LOCATION,SCALE)     Probability density function for Logistic distribution
DNLP cdfLogistic(x,LOCATION,SCALE)     Cumulative distribution function for Logistic distribution
DNLP icdfLogistic(x,LOCATION,SCALE)    Inverse cumulative distribution function for Logistic distribution
none dGamma(SHAPE,SCALE)               Gamma distribution
DNLP pdfGamma(x,SHAPE,SCALE)           Probability density function for Gamma distribution
DNLP cdfGamma(x,SHAPE,SCALE)           Cumulative distribution function for Gamma distribution
DNLP icdfGamma(x,SHAPE,SCALE)          Inverse cumulative distribution function for Gamma distribution
none dChiSquare(DF)                    Chi square distribution
none DF(DF_1,DF_2)                     F distribution
DNLP pdfChiSquare(x,DF)                Probability density function for Chi square distribution
DNLP cdfChiSquare(x,DF)                Cumulative distribution function for Chi square distribution
DNLP icdfChiSquare(x,DF)               Inverse cumulative distribution function for Chi square distribution
none dWeibull(SHAPE,SCALE)             Weibull distribution
DNLP pdfWeibull(x,SHAPE,SCALE)         Probability density function for Weibull distribution
DNLP cdfWeibull(x,SHAPE,SCALE)         Cumulative distribution function for Weibull distribution
DNLP icdfWeibull(x,SHAPE,SCALE)        Inverse cumulative distribution function for Weibull distribution
none dBeta(SHAPE_1,SHAPE_2)            Beta distribution
DNLP pdfBeta(x,SHAPE_1,SHAPE_2)        Probability density function for Beta distribution
DNLP cdfBeta(x,SHAPE_1,SHAPE_2)        Cumulative distribution function for Beta distribution
DNLP icdfBeta(x,SHAPE_1,SHAPE_2)       Inverse cumulative distribution function for Beta distribution
DNLP pdfF(x,DF_1,DF_2)                 Probability density function for F distribution
DNLP cdfF(x,DF_1,DF_2)                 Cumulative distribution function for F distribution
DNLP icdfF(x,DF_1,DF_2)                Inverse cumulative distribution function for F distribution
none dStudentT(DF)                     Students T distribution
DNLP pdfStudentT(x,DF)                 Probability density function for Students T distribution
DNLP cdfStudentT(x,DF)                 Cumulative distribution function for Students T distribution
DNLP icdfStudentT(x,DF)                Inverse cumulative distribution function for Students T distribution
none dPareto(SCALE,SHAPE)              Pareto distribution
DNLP pdfPareto(x,SCALE,SHAPE)          Probability density function for Pareto distribution
DNLP cdfPareto(x,SCALE,SHAPE)          Cumulative distribution function for Pareto distribution
DNLP icdfPareto(x,SCALE,SHAPE)         Inverse cumulative distribution function for Pareto distribution
none dGumbel(LOCATION,SCALE)           Gumbel distribution
DNLP pdfGumbel(x,LOCATION,SCALE)       Probability density function for Gumbel distribution
DNLP cdfGumbel(x,LOCATION,SCALE)       Cumulative distribution function for Gumbel distribution
DNLP icdfGumbel(x,LOCATION,SCALE)      Inverse cumulative distribution function for Gumbel distribution
none dLaplace(MEAN,SCALE)              Laplace distribution
DNLP pdfLaplace(x,MEAN,SCALE)          Probability density function for Laplace distribution
DNLP cdfLaplace(x,MEAN,SCALE)          Cumulative distribution function for Laplace distribution
DNLP icdfLaplace(x,MEAN,SCALE)         Inverse cumulative distribution function for Laplace distribution
none dTriangular(LOW,MID,HIGH)         Triangular distribution
DNLP pdfTriangular(x,LOW,MID,HIGH)     Probability density function for Triangular distribution
DNLP cdfTriangular(x,LOW,MID,HIGH)     Cumulative distribution function for Triangular distribution
DNLP icdfTriangular(x,LOW,MID,HIGH)    Inverse cumulative distribution function for Triangular distribution
none dUniformInt(LOW,HIGH)             Uniform integer distribution
none pdfUniformInt(x,LOW,HIGH)         Probability density function for Uniform integer distribution
none cdfUniformInt(x,LOW,HIGH)         Cumulative distribution function for Uniform integer distribution
none icdfUniformInt(x,LOW,HIGH)        Inverse cumulative distribution function for Uniform integer distribution
none dBinomial(N,P)                    Binomial distribution
none pdfBinomial(x,N,P)                Probability density function for Binomial distribution
none cdfBinomial(x,N,P)                Cumulative distribution function for Binomial distribution
none icdfBinomial(x,N,P)               Inverse cumulative distribution function for Binomial distribution
none dNegBinomial(FAILURES,P)          Negative Binomial distribution
none pdfNegBinomial(x,FAILURES,P)      Probability density function for Negative Binomial distribution
none cdfNegBinomial(x,FAILURES,P)      Cumulative distribution function for Negative Binomial distribution
none icdfNegBinomial(x,FAILURES,P)     Inverse cumulative distribution function for Negative Binomial distribution
none dGeometric(P)                     Geometric distribution
none pdfGeometric(x,P)                 Probability density function for Geometric distribution
none cdfGeometric(x,P)                 Cumulative distribution function for Geometric distribution
none icdfGeometric(x,P)                Inverse cumulative distribution function for Geometric distribution
none dHyperGeo(TOTAL,GOOD,TRIALS)      HyperGeometric distribution
none pdfHyperGeo(x,TOTAL,GOOD,TRIALS)  Probability density function for HyperGeometric distribution
none cdfHyperGeo(x,TOTAL,GOOD,TRIALS)  Cumulative distribution function for HyperGeometric distribution
none icdfHyperGeo(x,TOTAL,GOOD,TRIALS) Inverse cumulative distribution function for HyperGeometric distribution
none dLogarithmic(P-FACTOR)            Logarithmic distribution
none pdfLogarithmic(x,P-FACTOR)        Probability density function for Logarithmic distribution
none cdfLogarithmic(x,P-FACTOR)        Cumulative distribution function for Logarithmic distribution
none icdfLogarithmic(x,P-FACTOR)       Inverse cumulative distribution function for Logarithmic distribution
none dPoisson(LAMBDA)                  Poisson distribution
none pdfPoisson(x,LAMBDA)              Probability density function for Poisson distribution
none cdfPoisson(x,LAMBDA)              Cumulative distribution function for Poisson distribution
none icdfPoisson(x,LAMBDA)             Inverse cumulative distribution function for Poisson distribution

  46  function cdfnorm     /stolib.cdfnormal/;
  47   
  48  scalar trading set to 1 to allow regional trade by firms /0/;
  49  scalar no_fringe set to 1 to exclude fringe from simulation /0/;
  50   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\SetsAndVariables.gms
  52  Sets
  53       company /fringe, g1*g4/
  54       i(company) generators       /fringe,g1*g4/
  55       fringe(company)     /fringe/
  56       tech       /CCGT, GT, GTtoCC, ST, Nuclear, all/
  57       h(tech) technology       /CCGT, GT, GTtoCC, ST, Nuclear/
  58       gttocc(h) /GTtoCC/
  59       l market segment   /l1*l8/
  60       seasons  /winter,summer,spring-fall/
  61  *     e(seasons) seasons for running the model /summer/
  62       e(seasons) seasons for running the model /winter,summer,spring-fall/
  63       winter(seasons) /winter/
  64       spring(seasons) /spring-fall/
  65       summer(seasons) /summer/
  66       fall(seasons) /spring-fall/
  67       r regions          /COA,EOA,SOA,WOA/
  68   
  69       m(r,e,l) capacity markets
  70       scen /s1*s10/
  71       s(scen)         /s1*s5/
  72       ss(scen)                  /s1*s2/
  73   
  74       n power_lines      /East,South,west/
  75   
  76  Alias (h,hh), (i,j), (r,rr);
  77   
  78   
  79  alias (l,ll), (i,ii), (h,hh), (r,rr,rrr), (e,ee);
  80   
  81  *   intialze capacity market in select segements
  82      m(r,e,'l5') =  yes;
  83      m(r,e,'l6') =  yes;
  84      m(r,e,'l7') =  yes;
  85   
  86   
  87  variables
  88           inv(company,h,r)  investment by player i in technology h
  89           ret(company,h,r)  retirement of technology h in region r by player i
  90           kind(company,h,r) existing capacity by player
  91   
  92           Cap_avail(company,h,r) available capacity of player i of technolgy h in region r in MW
  93           Q(company,h,r,seasons,l,s,ss)  generation quantity from a player i at market l in scenario in MW
  94           sales(company,r,seasons,l,s,ss) sales of firm in region r market l scenario s in MW
  95           lambda_high(company,h,r,seasons,l,s,ss) shadow prices for the high capacity constraint in USD per  MWh
  96           lambda_low(company,h,r,seasons,l,s,ss)  shadows prices for low constraint in USD per  MWh
  97           delta(r,seasons,l)   shadow prices for the capacity market in USD per  MW per hour
  98           price(r,seasons,l,s,ss) energy price in USD per MWh
  99           price_trans(n,seasons,l,s,ss) tranmission price in USD per MWh
 100           price_trans_pos(n,seasons,l,s,ss) tranmission price in USD per MWh
 101           price_trans_neg(n,seasons,l,s,ss) tranmission price in USD per MWh
 102           alpha(company,h,r) shadow prices for the non-negative investment constraints in USD per  MW
 103           eta_high(company,h,r) shadow prices for the capacity retirment constraint in USD per  MW
 104           eta_low(company,h,r)
 105   
 106           arbitrage(n,r,rr,seasons,l,s,ss) TSO outgoing electricity arbitrage from node r on line n
 107           trade(company,n,r,rr,seasons,l,s,ss) outgoing electricity trade by firm i from node r on line n
 108           trans(n,seasons,l,s,ss) electricity trans by on line n
 109   
 110           tau(n,seasons,l,s,ss) shadow prices for the high capacity constraint in USD per MW
 111           zeta(company,n,r,rr,seasons,l,s,ss) shadow prices for the outgoing no-negative trade constraint in USD per MW
 112           shadows_arbitrage(n,r,rr,seasons,l,s,ss) shadow prices for no-negative incoming arbitrage constriant in USD per MW
 113           shadows_trans(n,seasons,l,s,ss) shadow prices for the positive transmission constriant in USD per MW
 114   
 115           shadows_gttocc(company,h,r) shadows on upper bound of GT conversion USD per MW
 116           shadows_fringe(company,r) shadows on upper bound on fring investments in USD per MW
 117            ;
 118   
 119  positive variables lambda_high, lambda_low,  alpha,
 120                     eta_high,eta_low, psi
 121                     tau,zeta,shadows_arbitrage,shadows_trans,shadows_gttocc
 122                     ;
 123   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Demand.gms
 125  *$INCLUDE ACCESS_HLC.gms
 127   
 128  set hrs hours in the load curve data set /1*8760/ ;
 129  parameter HLC(r,hrs) hourly load curves for represenative day in each month in MW
 130  parameter ELlcgw(r,seasons,l) average power demand load blocks in MW
 131            ELlcgw_stddev(r,seasons,l) variance power demand load blocks in MW
 132            EL_demand(r,e,l,s,ss) Stochastic Electricity Demand for scenarios s in GW
 133            d(e,l) duration of segemt l in region r (deterministic)
 134            prob(r,e,l,s,ss) probability off each scenario
 135  ;
GDXIN   D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\db\load.gdx
--- LOAD  HLC = 1:HLC
 139   
 140   
 141   
 142  parameter day(hrs)    day for each hour in a year
 143            hour(hrs) represents each hour in the hourly demand data year from 0 to 23
 144  ;
 145   
 146   
 147            day(hrs) = floor(ord(hrs)/24)+1;
 148            day('8760') = 1;
 149   
 150   
 151            hour(hrs)=ord(hrs)-(day(hrs)-1)*24
 152   
 153  table duration(seasons,l) duration of segemt l in region r and season e
 154   
 155  * these are the hour blocks used to average the actual hourly demand patterns
 156  * must sum to 24
 157  *$ontext
 158                                   l1  l2  l3  l4  l5  l6  l7  l8
 159  (winter,spring-fall,summer)       4   4   4   2   3   2   2   3
 160  *$offtext
 161   
 162  *                                 l1  l2
 163  *(winter,spring-fall,summer)      12  12
 164   ;
 165   
 166   parameter block_start(seasons,l) start hour for hour in load block l
 167             block_end(seasons,l);
 168   
 169   block_start(seasons,l) = sum(ll$(ord(ll)<ord(l)),duration(seasons,ll));
 170   block_end(seasons,l) = sum(ll$(ord(ll)<=ord(l)),duration(seasons,ll));
 171   
 172  parameter start_day(seasons) first day to sample hourly data from for season e
 173   
 174  /
 175  winter 304
 176  spring-fall 61
 177  summer 122
 178  /
 179            end_day(seasons) last day to sample hourlyy data for season e
 180   
 181   
 182  number_of_days(seasons)
 183         ;
 184  scalar
 185           start_day_fall first day to sample hourly data from for fall season /243/
 186           end_day_fall first day to sample hourly data from
 187   
 188   
 189   
 190   
 191  ;
 192  end_day('winter') = start_day('spring-fall')-1;
 193  end_day('spring-fall') = start_day('summer')-1;
 194  end_day('summer') = start_day_fall-1;
 195  end_day_fall = start_day('winter')-1;
 196   
 197  number_of_days(seasons)$(not winter(seasons)) = end_day(seasons)-start_day(seasons)+1;
 198  number_of_days('spring-fall') = number_of_days('spring-fall')+end_day_fall-start_day_fall+1;
 199  number_of_days('winter') = smax(hrs,day(hrs))-sum(seasons,number_of_days(seasons));
 200   
 201   
 202     duration(seasons,l)=duration(seasons,l)*number_of_days(seasons);
 203   
 204  ELlcgw(r,e,l) =
 205  sum(hrs$(
 206                  (        (day(hrs)>=start_day(e) and
 207                            day(hrs)<=end_day(e) and (spring(e) or summer(e)) ) or
 208   
 209                           (day(hrs)>=start_day_fall and
 210                            day(hrs)<=end_day_fall and fall(e)) or
 211   
 212                           ((day(hrs)>=start_day(e) or day(hrs)<=end_day(e)) and
 213                                   winter(e))
 214   
 215                  )and
 216                  hour(hrs)>=block_start(e,l) and
 217                  hour(hrs)<block_end(e,l)
 218           ), HLC(r,hrs))/(duration(e,l))
 219  ;
 220   
 221  ELlcgw_stddev(r,e,l) =
 222  sum(hrs$(
 223                  (        (day(hrs)>=start_day(e) and
 224                            day(hrs)<=end_day(e) and (spring(e) or summer(e)) ) or
 225   
 226                           (day(hrs)>=start_day_fall and
 227                            day(hrs)<=end_day_fall and fall(e)) or
 228   
 229                           ((day(hrs)>=start_day(e) or day(hrs)<=end_day(e)) and
 230                                   winter(e))
 231   
 232                  )and
 233                  hour(hrs)>=block_start(e,l) and
 234                  hour(hrs)<block_end(e,l)
 235           ), (HLC(r,hrs)-ELlcgw(r,e,l))*(HLC(r,hrs)-ELlcgw(r,e,l)) )/(duration(e,l))
 236  ;
 237  ELlcgw_stddev(r,e,l) = sqrt(ELlcgw_stddev(r,e,l));
 238   
 239  if(card(e)=1 ,
 240  duration(e,l)$(card(e)=1)=duration(e,l)*365/number_of_days(e);
 241   
 242  );
 243   
 244  parameter CDF_lo(r,e,l), CDF_hi(r,e,l), diff(r,e,l), CDF_alpha(r,e,l), CDF_beta(r,e,l), Z_cdf(r,e,l), X_cdf(r,e,l,scen);
 245  parameter CDF_x(r,e,l,scen) cumulative distribution functions for each scenario s;
 246   
 247   
 248   
 249   
 250  *        apply growth equally to all demand segments
 251  *        Rescale demand to GW
 252  *        Rescale duration such taht energy is in units of TWH
 253  *        Marginal costs should be in units of MMUSD/TWH
 254   
 255           d(e,l) = duration(e,l)*1e-3;
 256           ;
 257   
 258           CDF_lo(r,e,l)=ELlcgw(r,e,l)-ELlcgw_stddev(r,e,l)*2;
 259           CDF_hi(r,e,l)=ELlcgw(r,e,l)+ELlcgw_stddev(r,e,l)*2;
 260   
 261           diff(r,e,l) = CDF_hi(r,e,l) -CDF_lo(r,e,l);
 262   
 263           CDF_alpha(r,e,l) = cdfnorm(CDF_lo(r,e,l),ELlcgw(r,e,l),ELlcgw_stddev(r,e,l));
 264           CDF_beta(r,e,l) =  cdfnorm(CDF_hi(r,e,l),ELlcgw(r,e,l),ELlcgw_stddev(r,e,l));
 265           Z_cdf(r,e,l)=CDF_beta(r,e,l)-CDF_alpha(r,e,l);
 266           prob(r,e,l,s,ss)=0;
 267           CDF_x(r,e,l,s)=0;
 268   
 269  loop(s$(ord(s)<=card(s)),
 270   
 271           X_cdf(r,e,l,s)=CDF_lo(r,e,l)+ord(s)*diff(r,e,l)/card(s);
 272           CDF_x(r,e,l,s)= (cdfnorm(X_cdf(r,e,l,s),ELlcgw(r,e,l),ELlcgw_stddev(r,e,l))-CDF_alpha(r,e,l))/Z_cdf(r,e,l);
 273           prob(r,e,l,s,ss) = (CDF_x(r,e,l,s) - CDF_x(r,e,l,s-1))/card(ss);
 274           X_cdf(r,e,l,s)=X_cdf(r,e,l,s)-(diff(r,e,l)/(2*card(s)))$(card(s)>1);
 275           EL_Demand(r,e,l,s,ss)= X_cdf(r,e,l,s);
 276  );
 277         EL_Demand(r,e,l,s,ss)= EL_Demand(r,e,l,s,ss)*1e-3;
 278  *abort prob,EL_Demand,CDF_x,x_cdf,ELlcgw_stddev,ELlcgw
 279   
 280   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\parameters.gms
 282  Parameters
 283             v(company)   CONJECTURAL VARIANTION for production by player /g1 0, g2 0, g3 0, g4 0, fringe -1/
 284             z(company)   CONJECTURAL VARIANTION for capacity by player /g1 0, g2 0, g3 0, g4 0, fringe -1/
 285             x(company,r,rr)   CONJECTURAL VARIANTION for electricity by player between region r and rr
 286   
 287             capital_cost(h) Capital cost in USD per GW /CCGT 1740, GT 1485, ST 2120, Nuclear 4896, GTtoCC 600/
 288             ic(h)  investment cost USD per GW
 289             om(h) Fixed O&M cost USD per GW  /GT 11.2, GTtoCC 12.4, CCGT 12.4, ST 11.2, Nuclear 68.8/
 290             K0(h,r) existent capacity of technology h in region r before liberalization
 291             kind0(company,h,r) initial capacity by technology and firm in each region in GW
 292             K(r,l) minimum installed capacity available to sell in region r and market segment l
 293  *           EL_demand(r,e,l,s,ss) Electricity Demand GW
 294  *           d(e,l) duration of segemt l in region r (deterministic)
 295  *           prob(s,ss) probability off each scenario
 296   
 297  *Design operating life for ST, GT, and CCGT from KFUPM generation report.
 298             lifetime(h) plant lifetime /CCGT 30, GT 25, ST 35, Nuclear 60, GTtoCC 20/
 299             discrate discount rate used for power plant investments /0.06/
 300   
 301   
 302  ;
 303             x(i,r,rr)  = v(i) ;
 304   
 305             Table capadd(hh,h) a factor for adding capacity (only applicable to dispatchable tech)
 306                    GT      CCGT
 307           GTtoCC   -1      1.5
 308           ;
 309   
 310               capadd(h,h)$(not gttocc(h)) = 1 ;
 311   
 312   
 313  ;
 314  sets     time /2015*2040/
 315           t dummy time set /2020/
 316           tt(t) /2020/
 317           index /1*1000/
 318  parameter discoef         ;
 319   
 320  *        Discounting plant capital costs over lifetime
 321           discoef(h,t) = sum(tt$(ord(tt)>=ord(t)),1/(1+discrate)**(ord(tt)-ord(t)))/sum(index$(ord(index)<=lifetime(h)),1/(1+discrate)**(ord(index)-1));
 322   
 323           ic(h)=capital_cost(h)*discoef(h,'2020');
 324   
 325   
 326  Parameters ici(h)  investment cost
 327             icr(h)  retirement capacity cost;
 328   
 329  ici(h) = ic(h)
 330  ;
 331  icr(h) = ic(h)*0.1;
 332  *icr(h) = 0;
 333   
 334   
 335   
 336  parameter mc(h,r,s,ss) marginal cost in USD per MWh  ;
 337   
 338  mc('CCGT',r,s,ss)  = 1.2449 ;
 339  mc('CCGT','EOA',s,ss)  = 1.1833 ;
 340  mc('GT',r,s,ss) =  1.6840;
 341  mc('ST',r,s,ss) =  1.2261;
 342  mc('Nuclear',r,s,ss) = 6.9;
 343  *mc('ULtrsc',r,s,ss)  = 1.2449
 344   
 345   
 346  * Uranium-235 use is in g/GWh
 347  parameter heat_rate(h) fueal burn rate in mmbtu and KG per MWH
 348  /
 349  CCGT               6.09286
 350  GT                 10.000
 351  ST                 8.949
 352  Nuclear            0.120
 353  *Ultrsc              1.217
 354  /
 355  ;
 356   
 357   
 358  parameter fuel_price(h) price of fuels in USD per mmbtu and KG U235
 359  /
 360  CCGT               1.25
 361  GT                 1.25
 362  ST                 1.25
 363  Nuclear            113
 364  *Ultrsc             50
 365  /
 366  ;
 367   
 368  loop(s,
 369  mc(h,r,s,ss) = mc(h,r,s,ss)+heat_rate(h)*fuel_price(h)*1;
 370  *uniform(1,1)
 371  );
 372  ;
 373   
 374   
 375  parameter  beta(h,r,l) available capacity in market l
 376  ;
 377  beta(h,r,l)=1;
 378   
 379  Parameters  a(r,e,l,s,ss) intercept of energy demand curve,
 380              b(r,e,l,s,ss) slope of energy demand curve
 381              theta(r,e,l) intercept of capacity demand curve,
 382              xi(r,e,l) slope of capacity demand curve;
 383   
      Table K0(h,r)
            COA        EOA          SOA          WOA
      CCGT  1360.6     6496.37      0            9144.97
      GT    14185.3    9540.3       4113.14      9150.26
      ST    706        13252.8      1020         16399.2
      ;
       
      Table K0(h,r)
            COA   EOA   SOA   WOA
      CCGT  0     0     0     0
      GT    0     0     0     0
      ST    0     0     0     0
      ;
 399   
 400   
 401  table kind0(company,h,r) firms existing generation capacity in GW
 402   
 403                   COA             EOA             SOA             WOA
 404   
 405  g1.CCGT          1.3606          0               0               0
 406  g1.GT            13.0693         0               0               0
 407  g1.ST            0               0               0               0
 408   
 409  g2.CCGT          0               3.929           0               0
 410  g2.GT            0               5.8315          0               0
 411  g2.ST            0               6.756           0               0
 412   
 413  g3.CCGT          0               0               0               0
 414  g3.GT            0               0               4.11314         0
 415  g3.ST            0               0               0               0
 416   
 417  g4.CCGT          0               0               0               1.288
 418  g4.GT            0               0               0               8.5497
 419  g4.ST            0               0               0               9.8884
 420   
 421  fringe.CCGT      0               2.56737         0               0
 422  fringe.GT        1.116           3.7085          0               6.0056
 423  fringe.ST        0.706           6.4968          1.020           7.12936
 424  ;
 425   
 426  parameter kind_trans0(n) transmission capacity in GW
 427   /
 428           East    5.22
 429           South   1.5
 430           West    1.2
 431   /
 432        ;
 433  *WOA   0     1.16
 434   
 435  *Data for 2014 inter-regional transmission capacities were obtained from ECRA correspondence.
 436           parameter phi(n)  oper. and maint. cost of transmission in USD per MWH
 437           /
 438            West   3.71
 439            South  3.73
 440            East   3.78
 441           /
                      WOA   SOA     COA     EOA
               WOA   3.49   3.73    3.71    4.33
               SOA   3.73   3.49    4.10    4.50
               COA   3.71   4.1     3.49    3.78
               EOA   4.33   4.5     3.78    3.49
 449  ;
 450   
 451  Parameter capfactor(h) capacity factors for dispatchable plants
 452  /ST      0.885
 453   GT      0.923
 454   CCGT    0.885
 455   Nuclear 0.860
 456  /
 457   
 458   
 459   
 460   
 461   
 462   
 463  parameter  ELretirement(company,h,time,r), ELaddition(company,h,time,r);
 464   
 465  *updated capacity additions/retirements as of June 13 2016
 466   
 467  *Known capacity additions:
 468  *Capacity of units already under construction (sources: compiled news sources, see printouts):
 469  *Rabigh 2 IPP (2017)
 470           ELaddition('fringe','CCGT','2017','WOA')=2.06;
 471  *Jeddah South (2017)
 472           ELaddition('fringe','ST','2017','WOA')=2.65;
 473  *Shuqaiq (2017)
 474  *Stscrb
 475           ELaddition('fringe','ST','2017','SOA')=2.64;
 476  *Qurayyah IPPs (2017)
 477           ELaddition('fringe','CCGT','2017','EOA')=3.927;
 478   
 479   
 480  *Source: KFUPM Generation Report (2010)
 481           ELretirement('g4','GT','2016','WOA')=0.207;
 482           ELretirement('g4','GT','2017','WOA')=0.217;
 483           ELretirement('g4','GT','2018','WOA')=0.214;
 484           ELretirement('g4','GT','2019','WOA')=0.271;
 485           ELretirement('g4','GT','2020','WOA')=0.240;
 486           ELretirement('g4','GT','2021','WOA')=0.229;
 487           ELretirement('g4','GT','2022','WOA')=0.321;
 488           ELretirement('g4','GT','2023','WOA')=0.244;
 489           ELretirement('g4','GT','2024','WOA')=0.236;
 490           ELretirement('g4','GT','2025','WOA')=0.246;
 491           ELretirement('g4','GT','2026','WOA')=0.212;
 492           ELretirement('g4','GT','2027','WOA')=0.208;
 493           ELretirement('g4','ST','2027','WOA')=0.260;
 494           ELretirement('g4','ST','2028','WOA')=0.260;
 495           ELretirement('g4','ST','2029','WOA')=0.260;
 496           ELretirement('g4','GT','2030','WOA')=0.240;
 497           ELretirement('g4','GT','2031','WOA')=0.240;
 498           ELretirement('g4','ST','2032','WOA')=0.260;
 499   
 500           ELretirement('g3','GT','2015','SOA')=0.015;
 501           ELretirement('g3','GT','2016','SOA')=0.089;
 502           ELretirement('g3','GT','2017','SOA')=0.085;
 503           ELretirement('g3','GT','2018','SOA')=0.091;
 504           ELretirement('g3','GT','2019','SOA')=0.089;
 505           ELretirement('g3','GT','2020','SOA')=0.094;
 506           ELretirement('g3','GT','2021','SOA')=0.106;
 507           ELretirement('g3','GT','2022','SOA')=0.094;
 508           ELretirement('g3','GT','2023','SOA')=0.100;
 509           ELretirement('g3','GT','2024','SOA')=0.109;
 510           ELretirement('g3','GT','2025','SOA')=0.070;
 511           ELretirement('g3','GT','2026','SOA')=0.106;
 512           ELretirement('g3','GT','2027','SOA')=0.132;
 513           ELretirement('g3','GT','2028','SOA')=0.112;
 514           ELretirement('g3','GT','2029','SOA')=0.132;
 515           ELretirement('g3','GT','2030','SOA')=0.132;
 516           ELretirement('g3','GT','2031','SOA')=0.121;
 517           ELretirement('g3','GT','2032','SOA')=0.120;
 518   
 519           ELretirement('g1','GT','2015','COA')=0.126;
 520           ELretirement('g1','GT','2016','COA')=0.210;
 521           ELretirement('g1','GT','2017','COA')=0.228;
 522           ELretirement('g1','GT','2018','COA')=0.240;
 523           ELretirement('g1','GT','2019','COA')=0.254;
 524           ELretirement('g1','GT','2020','COA')=0.266;
 525           ELretirement('g1','GT','2021','COA')=0.250;
 526           ELretirement('g1','GT','2022','COA')=0.264;
 527           ELretirement('g1','GT','2023','COA')=0.270;
 528           ELretirement('g1','GT','2024','COA')=0.251;
 529           ELretirement('g1','GT','2025','COA')=0.270;
 530           ELretirement('g1','GT','2026','COA')=0.269;
 531           ELretirement('g1','GT','2027','COA')=0.291;
 532           ELretirement('g1','GT','2028','COA')=0.285;
 533           ELretirement('g1','GT','2029','COA')=0.341;
 534           ELretirement('g1','GT','2030','COA')=0.355;
 535           ELretirement('g1','GT','2031','COA')=0.343;
 536           ELretirement('g1','GT','2032','COA')=0.361;
 537   
 538           ELretirement('g2','GT','2015','EOA')=0.100;
 539           ELretirement('g2','GT','2016','EOA')=0.287;
 540           ELretirement('g2','GT','2017','EOA')=0.232;
 541           ELretirement('g2','GT','2018','EOA')=0.232;
 542           ELretirement('g2','GT','2019','EOA')=0.232;
 543           ELretirement('g2','GT','2020','EOA')=0.255;
 544           ELretirement('g2','GT','2021','EOA')=0.236;
 545           ELretirement('g2','GT','2022','EOA')=0.239;
 546           ELretirement('g2','GT','2023','EOA')=0.240;
 547           ELretirement('g2','GT','2024','EOA')=0.098;
 548           ELretirement('g2','ST','2026','EOA')=0.430;
 549           ELretirement('g2','ST','2027','EOA')=0.430;
 550           ELretirement('g2','ST','2028','EOA')=0.430;
 551           ELretirement('g2','ST','2029','EOA')=0.430;
 552           ELretirement('g2','ST','2030','EOA')=0.625;
 553           ELretirement('g2','ST','2031','EOA')=0.625;
 554           ELretirement('g2','ST','2032','EOA')=0.625;
 555   
 556           kind0(company,h,r) =kind0(company,h,r)+ sum(time$(ord(time)<=6),ELaddition(company,h,time,r))
 557                           - sum(time$(ord(time)<=6),ELretirement(company,h,time,r));
 558   
 559  *                         abort kind0;
 560   
 561   
 562   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\equations.gms
 564  set trans_node(n,r),trans_node_end(n,r);
 565   
 566  trans_node('WEST','WOA')=yes;
 567  trans_node_end('WEST','COA')=yes;
 568   
 569  trans_node('South','SOA')=yes;
 570  trans_node_end('South','WOA')=yes;
 571   
 572  trans_node('East','EOA')=yes;
 573  trans_node_end('East','COA')=yes;
 574   
 575   
 576  set r_trans(n,r,rr), r_trade(n,r,rr);
 577   
 578  r_trans(n,r,rr)$(trans_node(n,r) and trans_node_end(n,rr) and ord(r)<>ord(rr))=yes;
 579  r_trade(n,r,rr)$(r_trans(n,r,rr))=yes;
 580  r_trade(n,rr,r)$(r_trans(n,r,rr))=yes;
 581   
 582   
 583           trade.fx(i,n,r,rr,e,l,s,ss)$(trading<>1)=0;
 584   
 585  Equations
 586           Eq1(r,e,l,s,ss)              Equation (1)
 587           Eq2(r,e,l)                Equation (1)
 588           Eq9_1(company,h,r,e,l,s,ss)        Equation (8.1)
 589           Eq9_2(company,h,r)              Equation (8.2)
 590           Eq9_3(company,h,r)              Equation (8.3)
 591           Eq9_4(company,n,r,rr,e,l,s,ss)       Equation (8.4)
 592           Eq9_5(company,h,r,e,l,s,ss)
 593           Eq9_5a(company,h,r)
 594           Eq9_6(company,h,r)
 595           Eq9_7(company,h,r)
 596           Eq9_8(company,r,e,l,s,ss)
 597   
 598           Eq10_1(n,r,rr,e,l,s,ss)
 599   
 600           Eq11_1(n,e,l,s,ss)
 601           Eq11_2(n,e,l,s,ss)
 602           Eq11_3(n,e,l,s,ss)
 603           Eq11_4(n,e,l,s,ss)
 604           Eq11_5(n,e,l,s,ss)
 605   
 606           Eq_q(company,h,r,e,l,s,ss)
 607           Eq_inv(company,h,r)
 608           Eq_ret(company,h,r)
 609           Eq_trade(company,n,r,rr,e,l,s,ss)
 610           Eq_arb(n,r,rr,e,l,s,ss)
 611   
 612  ;
 613  Eq1(r,e,l,s,ss)..    price(r,e,l,s,ss)=e=
 614                       a(r,e,l,s,ss)-b(r,e,l,s,ss)*sum(j,sales(j,r,e,l,s,ss))
 615                       +b(r,e,l,s,ss)*(
 616                            sum((n,rr)$r_trade(n,r,rr),arbitrage(n,r,rr,e,l,s,ss))
 617                            -sum((n,rr)$r_trade(n,rr,r),arbitrage(n,rr,r,e,l,s,ss))
 618                       );
 619   
 620  Eq2(r,e,l)$m(r,e,l) ..        delta(r,e,l)=e=theta(r,e,l)-xi(r,e,l)*sum((j,hh)$(not gttocc(hh)),beta(hh,r,l)*Cap_avail(j,hh,r));
 621   
 622  Eq9_1(i,h,r,e,l,s,ss)$(not gttocc(h)) ..  price(r,e,l,s,ss)-mc(h,r,s,ss)-b(r,e,l,s,ss)*(1+v(i))*sales(i,r,e,l,s,ss)-lambda_high(i,h,r,e,l,s,ss)+lambda_low(i,h,r,e,l,s,ss)=e= 0 ;
 623  *
 624  Eq9_2(i,h,r)..       sum((e,l)$m(r,e,l),d(e,l)*delta(r,e,l)*beta(h,r,l))
 625                      -sum((e,l)$m(r,e,l),d(e,l)*xi(r,e,l)*(beta(h,r,l)+z(i))*sum(hh,beta(hh,r,l)*Cap_avail(i,hh,r)))
 626                       +sum((hh,e,l,s,ss)$(not gttocc(hh)),prob(r,e,l,s,ss)*d(e,l)*lambda_high(i,hh,r,e,l,s,ss)*capadd(h,hh))
 627                       -shadows_gttocc(i,h,r)$gttocc(h)
 628                       +alpha(i,h,r) =e=ici(h)+om(h);
 629  *
 630   
 631  Eq9_3(i,h,r)$(not gttocc(h))..      -sum((e,l)$m(r,e,l),d(e,l)*delta(r,e,l)*beta(h,r,l))
 632                      +sum((e,l)$m(r,e,l),d(e,l)*xi(r,e,l)*(beta(h,r,l)+z(i))*sum(hh,beta(hh,r,l)*Cap_avail(i,hh,r)))
 633                      -sum((e,l,s,ss),prob(r,e,l,s,ss)*d(e,l)*lambda_high(i,h,r,e,l,s,ss))-eta_high(i,h,r)
 634                       +eta_low(i,h,r) =e= icr(h)-om(h);
 635  *
 636   
 637  Eq9_4(i,n,r,rr,e,l,s,ss)$(trading=1 and r_trade(n,r,rr))..
 638           price(rr,e,l,s,ss)-price(r,e,l,s,ss)+zeta(i,n,r,rr,e,l,s,ss)
 639           -price_trans(n,e,l,s,ss)
 640          +b(r,e,l,s,ss)*sales(i,r,e,l,s,ss)*(1+x(i,r,rr))
 641          -b(rr,e,l,s,ss)*sales(i,rr,e,l,s,ss)*(1+x(i,rr,r))
 642                   =e=0;
 643   
 644  Eq9_5(i,h,r,e,l,s,ss)$(not gttocc(h)) ..  Cap_avail(i,h,r)-Q(i,h,r,e,l,s,ss)=g=0;
 645   
 646  Eq9_5a(i,h,r)$(gttocc(h)) ..  (kind0(i,'GT',r)-ret(i,'GT',r))=g=inv(i,h,r);
 647   
 648  Eq9_6(i,h,r)$(not gttocc(h))..  kind0(i,h,r) - ret(i,h,r)=g=0 ;
 649  Eq9_7(i,h,r)$(not gttocc(h))..  Cap_avail(i,h,r) =e= kind0(i,h,r)+sum(hh,inv(i,hh,r)*capadd(hh,h))-ret(i,h,r);
 650   
 651  Eq9_8(i,r,e,l,s,ss)..     sales(i,r,e,l,s,ss)=e=
 652                           sum(h$(not gttocc(h)),Q(i,h,r,e,l,s,ss))
 653                         -sum((n,rr)$(r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s,ss))$(trading=1)
 654                         +sum((n,rr)$(r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s,ss))$(trading=1) ;
 655   
 656  *Eq9_9(i,h,r).. kind0(i,h,r)-kind(i,h,r)=g=0  ;
 657   
 658  Eq10_1(n,r,rr,e,l,s,ss)$r_trade(n,r,rr)..
 659           price(rr,e,l,s,ss)-price(r,e,l,s,ss)
 660           -price_trans(n,e,l,s,ss)
 661           +shadows_arbitrage(n,r,rr,e,l,s,ss)
 662                                   =e=0        ;
 663   
 664  Eq11_1(n,e,l,s,ss).. price_trans_pos(n,e,l,s,ss)+price_trans_neg(n,e,l,s,ss)$(trading=1)
 665                           -phi(n)-tau(n,e,l,s,ss)/d(e,l)
 666                           =e= 0;
 667   
 668  Eq11_2(n,e,l,s,ss)..
 669   
 670           trans(n,e,l,s,ss)=g=
 671           (
 672                   sum((i,r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s,ss))
 673                   -sum((i,r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s,ss))
 674                   +sum((r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s,ss))
 675                   -sum((r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),arbitrage(n,rr,r,e,l,s,ss))
 676             )$(trading=1)
 677             +sum((r,rr)$(r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s,ss))$(trading<>1)
 678           ;
 679   
 680   
 681  Eq11_3(n,e,l,s,ss)$(trading=1)..
 682   
 683           trans(n,e,l,s,ss)=g=
 684           -(
 685                   sum((i,r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s,ss))
 686                   -sum((i,r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s,ss))
 687                   +sum((r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s,ss))
 688                   -sum((r,rr)$(trans_node(n,r) and r_trade(n,rr,r)),arbitrage(n,rr,r,e,l,s,ss))
 689             )
 690           ;
 691   
 692  Eq11_4(n,e,l,s,ss)..   kind_trans0(n)-trans(n,e,l,s,ss)=g=0;
 693   
 694   
 695  Eq11_5(n,e,l,s,ss)..   price_trans(n,e,l,s,ss)=e=
 696                           price_trans_pos(n,e,l,s,ss)+price_trans_neg(n,e,l,s,ss)$(trading=1);
 697   
 698   
 699   
 700  Eq_q(i,h,r,e,l,s,ss)$(not gttocc(h))     .. Q(i,h,r,e,l,s,ss) =g= 0;
 701  Eq_inv(i,h,r)                            .. inv(i,h,r) =g= 0;
 702  Eq_ret(i,h,r)$(not gttocc(h))            .. ret(i,h,r)=g=0;
 703   
 704   
 705  Eq_trade(i,n,r,rr,e,l,s,ss)$(trading=1 and r_trade(n,r,rr))..
 706           trade(i,n,r,rr,e,l,s,ss)=g=0;
 707   
 708  Eq_arb(n,r,rr,e,l,s,ss)$r_trade(n,r,rr)   .. arbitrage(n,r,rr,e,l,s,ss)=g=0;
 709   
 710  model CMO   /
 711              Eq1,
 712              Eq2,
 713              Eq9_1,
 714              Eq9_2,
 715              Eq9_3,
 716              Eq9_4,
 717              Eq9_5.lambda_high,
 718   
 719              Eq9_5a.shadows_gttocc,
 720   
 721              Eq9_6.eta_high,
 722              Eq9_7,
 723              Eq9_8,
 724   
 725              Eq10_1,
 726              Eq11_1,
 727              Eq11_2.price_trans_pos
 728              Eq11_3.price_trans_neg,
 729              Eq11_4.tau,
 730              EQ11_5,
 731   
 732              Eq_q.lambda_low,
 733              Eq_trade.zeta,
 734              Eq_inv.alpha,
 735              Eq_ret.eta_low,
 736              Eq_arb.shadows_arbitrage,
 737  /;
 738           option MCP=path;
 739          CMO.scaleopt =1;
 740  *        tau.scale(n,e,l,s,ss)=1e4;
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\demand_calib.gms
 742   
 743  parameter EL_demgro(r)  projected percentage growth in electricity demand from 2015 to 2020 by region
 744  /
 745  WOA      1.183
 746  EOA      1.368
 747  SOA      1.329
 748  COA      1.217
 749  /
 750  ;
 751   
 752  EL_demand(r,e,l,s,ss)= EL_demand(r,e,l,s,ss)*EL_demgro(r);
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\solar.gms
 754  *Solar DNI curves.
 755  *Saudi Arabia obtained from NREL/KACST. The cities used for each region
 756  *are: West-Jeddah, South-Abha,Central-Solar Village,East-AlQusaimah. The values
 757  *represent average DNI levels for each segment over the seasonal period for each
 758  *region. The data from the year 2002 are used.
 759  *KWT = 'east' until data can be obtained
 760  Table ELsolcurve(l,seasons,r) regional and seasonal solar DNI profiles in W per sq. m
 761                   WOA         SOA        COA         EOA
 762  L1.summer        0.00        0.00       0.00        0.00
 763  L2.summer        110.09      259.83     308.17      301.34
 764  L3.summer        295.82      530.41     701.85      682.11
 765  L4.summer        364.87      436.38     759.63      741.60
 766  L5.summer        286.14      249.75     537.49      556.56
 767  L6.summer        107.01      83.94      171.54      195.74
 768  L7.summer        0.00        0.00       0.00        0.00
 769  L8.summer        0.00        0.00       0.00        0.00
 770   
 771  L1.winter        0.00        0.00       0.00        0.00
 772  L2.winter        118.65      240.74     208.64      147.02
 773  L3.winter        366.36      580.38     544.80      370.83
 774  L4.winter        501.84      646.97     658.06      426.94
 775  L5.winter        385.92      447.85     421.11      253.03
 776  L6.winter        131.80      140.52     99.21       49.90
 777  L7.winter        0.00        0.00       0.00        0.00
 778  L8.winter        0.00        0.00       0.00        0.00
 779   
 780  L1.spring-fall    0.00        0.00       0.00        0.00
 781  L2.spring-fall    133.59      321.61     268.68      185.34
 782  L3.spring-fall    366.00      717.74     631.74      453.89
 783  L4.spring-fall    446.01      725.93     683.32      500.01
 784  L5.spring-fall    326.06      464.02     401.39      292.48
 785  L6.spring-fall    112.45      134.21     81.12       61.02
 786  L7.spring-fall    0.00        0.00       0.00        0.00
 787  L8.spring-fall    0.00        0.00       0.00        0.00
 788  ;
 789  *We let the hourly operation of solar without storage to be proportional to the DNI.
 790  *In actuality, the output from solar plants is equal to some efficiency times the
 791  *irradiance (heat input). For thermal plants, it's the first law thermal efficiency.
 792  *While CSP plants only utilize direct irradiation (DI), the DI is linearly
 793  *proportional to the DNI. From this, we set the solar plant electricity output equal to its
 794  *peak nominal output (i.e. the plant's output capacity) multiplied by the solar irradiance
 795  *normalized by the maximum irradiance value throughout the year.
 796  Parameter ELsolcurvenorm(l,seasons,r) normalized DNI profiles from ELsolcurve;
 797  Elsolcurvenorm(l,e,r)=ELsolcurve(l,e,r)/smax((ll,ee),ELsolcurve(ll,ee,r));
 798   
 799   
 800  parameter solar_cap(r) regional solar capcitity installation in GW
 801  /
 802  COA      1.5
 803  EOA      1.5
 804  SOA      1
 805  WOA      2
 806  /
 807   
 808  ;
 809  scalar random, mean, stddev;
 810   
 811           mean = 0.9;
 812           stddev =0.3;
 813           CDF_lo(r,e,l) = 0;
 814           CDF_hi(r,e,l) = 1;
 815           diff(r,e,l) = CDF_hi(r,e,l) -CDF_lo(r,e,l);
 816   
 817  CDF_alpha(r,e,l) = cdfnorm(0,mean,stddev);
 818  CDF_beta(r,e,l) =  cdfnorm(1,mean,stddev);
 819  Z_cdf(r,e,l)=CDF_beta(r,e,l)-CDF_alpha(r,e,l);
 820  loop(ss,
 821           X_cdf(r,e,l,ss)=CDF_lo(r,e,l)+ord(ss)*diff(r,e,l)/card(ss);
 822           CDF_x(r,e,l,ss)= (cdfnorm(X_cdf(r,e,l,ss),mean,stddev)-CDF_alpha(r,e,l))/Z_cdf(r,e,l);
 823           if( card(ss)>1,
 824                   prob(r,e,l,s,ss) = (prob(r,e,l,s,ss)+(CDF_x(r,e,l,ss) - CDF_x(r,e,l,ss-1))/card(s))/(2);
 825           );
 826           X_cdf(r,e,l,ss)=X_cdf(r,e,l,ss)-(diff(r,e,l)/(2*card(ss)))$(card(ss)>1);
 827           EL_Demand(r,e,l,s,ss)= EL_Demand(r,e,l,s,ss)-solar_cap(r)*Elsolcurvenorm(l,e,r)*X_cdf(r,e,l,ss);
 828  );
 829   
 830  display prob,EL_Demand,CDF_x,Elsolcurvenorm,solar_cap,x_cdf ;
 831   
 832   
 833   
 834   
 835  if(no_fringe=1,
 836           i('fringe')=no ;
 837           Q.l('fringe',h,r,e,l,s,ss)    =0;
 838           Q.l('fringe','GT',r,seasons,'l5',s,ss)=kind0('fringe','GT',r)*0.5$(summer(seasons));
 839           Q.l('fringe','GT',r,seasons,'l6',s,ss)=kind0('fringe','GT',r)*0.5$(summer(seasons));
 840           Q.l('fringe','GT',r,seasons,'l7',s,ss)=kind0('fringe','GT',r)*0.5$(summer(seasons));
 841   
 842           Q.l('fringe','ST',r,e,l,s,ss)=kind0('fringe','ST',r)*0.8;
 843           Q.l('fringe','CCGT',r,e,l,s,ss)=kind0('fringe','CCGT',r)*0.8;
 844   
 845           EL_Demand(r,e,l,s,ss) = (EL_Demand(r,e,l,s,ss) -sum(h,Q.l('fringe',h,r,e,l,s,ss)))$(EL_Demand(r,e,l,s,ss)-sum(h,Q.l('fringe',h,r,e,l,s,ss))>smin(ll,EL_Demand(r,e,ll,s,ss)))
 846                                   +smin(ll,EL_Demand(r,e,ll,s,ss))$(EL_Demand(r,e,l,s,ss)-sum(h,Q.l('fringe',h,r,e,l,s,ss))<=smin(ll,EL_Demand(r,e,ll,s,ss)))
 847                                   ;
 848   
 849  );
 850   
 851  parameter elasticity(r) demand elasticity for eletricity ???;
 852   
 853  parameter  LRMC(r,e,l,s,ss) long run marginal cost in each load segment USD per MWH;
 854   
 855  * long run marginal cost. rescale capacity payment to USD/MW
 856  LRMC(r,e,l,s,ss) =
 857  smin(h,mc(h,r,s,ss)+(ic(h)+om(h))/sum((ll)$(EL_Demand(r,e,ll,s,ss)>=EL_Demand(r,e,l,s,ss)),d(e,ll)) )
 858  ;
 859   
 860  elasticity(r) = 0.3;
 861   
 862  * Energy Price calibration                                                     *
 863              a(r,e,l,s,ss) = LRMC(r,e,l,s,ss)*(1+1/elasticity(r));
 864              b(r,e,l,s,ss) = LRMC(r,e,l,s,ss)/EL_demand(r,e,l,s,ss)/elasticity(r) ;
 865   
 866   
 867  * Capacity Price calibration                                                   *
 868   
 869   
 870  * assume a flat inverse demand curve for capacity
 871  * price is set to the maximum fixed cost of all generators operating in the market
 872  * soread of the total number of demand hours
 873   
 874           theta(r,e,l)$m(r,e,l) =  0
 875                   +smax(h,(ic(h)+om(h)))/sum((ee,ll),d(ee,ll))
 876  *                 sum((s),prob(s,ss)*d(e,m))    ;
 877  *                 sum((s,ll)$(EL_Demand(r,e,ll,s,ss)>=EL_Demand(r,e,m,s,ss)),prob(s,ss)*d(e,ll));
 878  ;
 879           xi(r,e,l)$m(r,e,l) =0;
 880   
 881   
 882   
               a(r,'l1',s,ss) = 1200 +uniform(0,100);
               a(r,'l2',s,ss) = 600 +uniform(0,50);
               a(r,'l3',s,ss) = 300 +uniform(0,10);
       
               b(r,'l1',s,ss) = 0.005 +uniform(0,0.0005);
               b(r,'l2',s,ss) = 0.01 +uniform(0,0.0005);
               b(r,'l3',s,ss) = 0.01 +uniform(0,0.0005);
       
       
      theta(r,e,'l1') = 5000 +uniform(0,200);
      theta(r,e,'l2') = 3000 +uniform(0,100);
      theta(r,e,'l3') = 2000 +uniform(0,50);
       
      xi(r,e,'l1') = 0.00001 ;
      xi(r,e,'l2') = 0.00002 ;
      xi(r,e,'l3') = 0.00003 ;
 901   
 902   
 903       m(r,e,l) = no;
 904   
 905   
 906  *$ontext
GDXIN   D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\energy.gdx
 908   
--- LOAD  price = 39:price
 910           loop(l,
 911            m(r,e,l)$(     sum((s,ss),prob(r,e,l,s,ss)*price.l(r,e,l,s,ss))>
 912                           2*smin(ll,sum((s,ss),prob(r,e,ll,s,ss)*price.l(r,e,ll,s,ss)))
 913                   )=yes
 914           );
 915  *$offtext
 916   
 917  price.l(r,e,l,s,ss)=0;
 918   
 919  *Option Savepoint=1;
 920   
 921  CMO.optfile = 1 ;
 922   
 923  Execute_Loadpoint 'energy.gdx';
 924   
 925  *trade.l(i,n,r,rr,e,l,s,ss)$(not r_trans(n,r,rr))=0;
 926  *arbitrage.l(n,r,rr,e,l,s,ss)$(not r_trans(n,r,rr))=0;
 927  *trans.lo(n,e,l,s,ss)=0;
 928  solve CMO using mcp;
 929   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\report.gms
 931  *$ontext
 932  Parameters
 933           profit(company,tech)         profit per player by tech
 934           roi(company,tech)              return on investment
 935           cus(company,tech)              capacity usage
 936           rop(company,tech)              return on production
 937           roc(company,tech)              return on capacity
 938           investments(company,tech)      investments
 939   
 940           price_avg(r,e,l)        expected price by region and season
 941   
 942   
 943   
 944   
 945           production(company,tech)       production by player
 946   
 947   
 948           error_demand(r,e,l)
 949           reserve_capacity(r)
 950           ;
 951   
 952           scalar         consumer_surplus                consumer surplus ;
 953   
 954  *$ontext
 955           error_demand(r,e,l) =
 956           -sum((s,ss),prob(r,e,l,s,ss)*
 957             (EL_demand(r,e,l,s,ss)-
 958                   (sum((j),sales.l(j,r,e,l,s,ss))-sum((n,rr)$r_trade(n,r,rr),arbitrage.l(n,r,rr,e,l,s,ss))+sum((n,rr)$r_trade(n,rr,r),arbitrage.l(n,rr,r,e,l,s,ss)) )
 959             )
 960           )/sum((s,ss),EL_demand(r,e,l,s,ss));
 961   
 962           reserve_capacity(r) = sum((i,h),Cap_avail.l(i,h,r))/smax((e,l),sum((s,ss),EL_demand(r,e,l,s,ss)*prob(r,e,l,s,ss)))-1;
 963  ;
 964   
 965           consumer_surplus = sum((i,h,r,e,l,s,ss),prob(r,e,l,s,ss)*
 966                           (a(r,e,l,s,ss) - price.l(r,e,l,s,ss))*q.l(i,h,r,e,l,s,ss)/2*d(e,l));
 967   
 968           investments(i,h) =  sum(r,inv.l(i,h,r));
 969   
 970           price_avg(r,e,l) = sum((s,ss),prob(r,e,l,s,ss)*price.l(r,e,l,s,ss));
 971   
 972  profit(i,h)=sum((r,e,l,s,ss),prob(r,e,l,s,ss)*(price.l(r,e,l,s,ss)-mc(h,r,s,ss))*q.l(i,h,r,e,l,s,ss)*d(e,l))-sum((hh,r),(ici(hh)+om(h))*inv.l(i,hh,r)*capadd(hh,h))-sum((r),(icr(h)-om(h))*ret.l(i
      ,h,r))+sum((r,e,l)$m(r,e,l),delta.l(r,e,l)*beta(h,r,l)*Cap_avail.l(i,h,r));
 973  *profit(i,'all')=sum(h,profit(i,h));
 974   
 975  production(i,h)=sum((r,e,l,s,ss),prob(r,e,l,s,ss)*q.l(i,h,r,e,l,s,ss)*d(e,l));
 976  *production(i,'all')=sum(h,production(i,h)) ;
 977   
 978  *********compute other indicators
 979   
 980  ***return on investment
 981  roi(i,h)$(sum(r,Cap_avail.l(i,h,r))>1e-6)=profit(i,h)/(sum((r),Cap_avail.l(i,h,r)*ici(h)));
 982  *roi(i,'all')=sum(h,roi(i,h));
 983   
 984  ****capacity usage
 985  cus(i,h)$(sum(r,Cap_avail.l(i,h,r))>1e-6)=sum((r,e,l,s,ss),prob(r,e,l,s,ss)*d(e,l)*q.l(i,h,r,e,l,s,ss))/sum((l,r,e,s,ss),prob(r,e,l,s,ss)*d(e,l)*Cap_avail.l(i,h,r));
 986  *cus(i,'all')=sum(h,cus(i,h));
 987   
 988  ****return on production
 989  rop(i,h)=profit(i,h)/sum((r,e,l,s,ss),prob(r,e,l,s,ss)*d(e,l)*q.l(i,h,r,e,l,s,ss));
 990  *rop(i,'all')=sum(h,rop(i,h));
 991   
 992  ****return on capacity
 993  roc(i,h)$(sum(r,Cap_avail.l(i,h,r))>1e-6)=profit(i,h)/(sum((r,e,l),d(e,l)*Cap_avail.l(i,h,r)));
 994  *roc(i,'all')=sum(h,roc(i,h));
 995   
 996  display q.l, price.l, delta.l,inv.l, Cap_avail.l, ret.l,kind0,profit;
 997   
 998   
 999  display roi,cus,rop,roc;
1000   
1001  display lambda_high.l,eta_high.l;
1002   
1003   
1004   
      file results /C:Users\c-olivef\AXEL Investment Gams\RESULTS.txt/;
       
      put results;
      put 'Investment model: the value of perfect rationality'//
          'Marginal Costs per generator'//;
       
      loop((h,r,s,ss),put h.tl,@12,s.tl,@24,mc(h,r,s,ss):6:1//);
       
      put 'Investment Costs per generator'//;
       
      loop(h,put h.tl,@12,ic(h):6:1//);
       
       
      put 'Investment per generator'//;
       
      loop((i,h,r),put i.tl,@12,h.tl,@24,inv.l(i,h,r):6:1//);
       
       
      put 'Generation per generator'//;
       
      loop((i,h,r,e,l,s,ss),put i.tl,@12,h.tl,@24,l.tl,@32,s.tl,@44,q.l(i,h,r,e,l,s,ss):6:1//);
       
       
      put 'Equilibrium Prices '//;
       
      loop((r,e,l,s,ss),put s.tl,@12,l.tl,@24,price(r,e,l,s,ss)//);
       
      put 'Total Profit per generator'//;
       
      loop(i,put i.tl,@12,profit(i):8:2//);
       
      put 'Generator, Return on Investment, Capacity usage, Return on production, Return on Capacity'//;
       
      loop(i,put i.tl,@12,roi(i),@30,cus(i),@50,rop(i),@70,roc(i):10:2//);
       
       

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME psi OF TYPE VAR  
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             11/11/16 15:55:28 Page 2
Dynamic Programming Investment
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\run_model.gms
     2        7 INCLUDE        1       7  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Macros.gms
     3       45 FUNCLIBIN      1       9  stodclib
     4       51 INCLUDE        1      15  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\SetsAndVariables.gms
     5      124 INCLUDE        1      17  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Demand.gms
     6      136 GDXIN          5      12  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\db\load.gdx
     7      281 INCLUDE        1      18  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\parameters.gms
     8      563 INCLUDE        1      20  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\equations.gms
     9      741 INCLUDE        1      21  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\demand_calib.gms
    10      753 INCLUDE        9      12  ..D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\solar.gms
    11      907 GDXIN          1      27  D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\energy.gdx
    12      930 INCLUDE        1      50  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\report.gms


COMPILATION TIME     =        0.032 SECONDS      5 MB  24.1.3 r41464 WEX-WEI
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             11/11/16 15:55:28 Page 3
Dynamic Programming Investment
E x e c u t i o n


----    830 PARAMETER prob  probability off each scenario

INDEX 1 = COA  INDEX 2 = winter

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = COA  INDEX 2 = summer

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = COA  INDEX 2 = spring-fall

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = EOA  INDEX 2 = winter

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = EOA  INDEX 2 = summer

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = EOA  INDEX 2 = spring-fall

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = SOA  INDEX 2 = winter

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = SOA  INDEX 2 = summer

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = SOA  INDEX 2 = spring-fall

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = WOA  INDEX 2 = winter

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = WOA  INDEX 2 = summer

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110

INDEX 1 = WOA  INDEX 2 = spring-fall

               s1          s2

l1.s1       0.038       0.110
l1.s2       0.074       0.146
l1.s3       0.096       0.167
l1.s4       0.074       0.146
l1.s5       0.038       0.110
l2.s1       0.038       0.110
l2.s2       0.074       0.146
l2.s3       0.096       0.167
l2.s4       0.074       0.146
l2.s5       0.038       0.110
l3.s1       0.038       0.110
l3.s2       0.074       0.146
l3.s3       0.096       0.167
l3.s4       0.074       0.146
l3.s5       0.038       0.110
l4.s1       0.038       0.110
l4.s2       0.074       0.146
l4.s3       0.096       0.167
l4.s4       0.074       0.146
l4.s5       0.038       0.110
l5.s1       0.038       0.110
l5.s2       0.074       0.146
l5.s3       0.096       0.167
l5.s4       0.074       0.146
l5.s5       0.038       0.110
l6.s1       0.038       0.110
l6.s2       0.074       0.146
l6.s3       0.096       0.167
l6.s4       0.074       0.146
l6.s5       0.038       0.110
l7.s1       0.038       0.110
l7.s2       0.074       0.146
l7.s3       0.096       0.167
l7.s4       0.074       0.146
l7.s5       0.038       0.110
l8.s1       0.038       0.110
l8.s2       0.074       0.146
l8.s3       0.096       0.167
l8.s4       0.074       0.146
l8.s5       0.038       0.110


----    830 PARAMETER EL_demand  Stochastic Electricity Demand for scenarios s in GW

INDEX 1 = COA  INDEX 2 = winter

               s1          s2

l1.s1       6.883       6.883
l1.s2       7.842       7.842
l1.s3       8.801       8.801
l1.s4       9.759       9.759
l1.s5      10.718      10.718
l2.s1       6.571       6.365
l2.s2       7.403       7.197
l2.s3       8.236       8.030
l2.s4       9.068       8.862
l2.s5       9.901       9.695
l3.s1       7.034       6.496
l3.s2       7.860       7.322
l3.s3       8.687       8.149
l3.s4       9.513       8.975
l3.s5      10.340       9.802
l4.s1       7.686       7.037
l4.s2       8.465       7.815
l4.s3       9.244       8.594
l4.s4      10.022       9.372
l4.s5      10.801      10.151
l5.s1       7.824       7.408
l5.s2       8.708       8.292
l5.s3       9.592       9.176
l5.s4      10.476      10.060
l5.s5      11.360      10.944
l6.s1       8.578       8.480
l6.s2       9.610       9.512
l6.s3      10.643      10.545
l6.s4      11.676      11.578
l6.s5      12.709      12.611
l7.s1       9.400       9.400
l7.s2      10.230      10.230
l7.s3      11.059      11.059
l7.s4      11.889      11.889
l7.s5      12.719      12.719
l8.s1       8.652       8.652
l8.s2       9.566       9.566
l8.s3      10.479      10.479
l8.s4      11.392      11.392
l8.s5      12.305      12.305

INDEX 1 = COA  INDEX 2 = summer

               s1          s2

l1.s1      16.036      16.036
l1.s2      17.111      17.111
l1.s3      18.187      18.187
l1.s4      19.262      19.262
l1.s5      20.337      20.337
l2.s1      14.388      14.084
l2.s2      15.587      15.283
l2.s3      16.786      16.482
l2.s4      17.985      17.681
l2.s5      19.184      18.880
l3.s1      15.144      14.451
l3.s2      16.506      15.813
l3.s3      17.868      17.175
l3.s4      19.231      18.538
l3.s5      20.593      19.900
l4.s1      16.474      15.724
l4.s2      17.901      17.151
l4.s3      19.328      18.578
l4.s4      20.755      20.005
l4.s5      22.182      21.432
l5.s1      17.763      17.233
l5.s2      19.051      18.520
l5.s3      20.339      19.808
l5.s4      21.627      21.096
l5.s5      22.914      22.384
l6.s1      17.268      17.099
l6.s2      18.602      18.432
l6.s3      19.935      19.766
l6.s4      21.268      21.099
l6.s5      22.601      22.432
l7.s1      17.192      17.192
l7.s2      18.470      18.470
l7.s3      19.748      19.748
l7.s4      21.026      21.026
l7.s5      22.304      22.304
l8.s1      16.711      16.711
l8.s2      17.886      17.886
l8.s3      19.061      19.061
l8.s4      20.236      20.236
l8.s5      21.410      21.410

INDEX 1 = COA  INDEX 2 = spring-fall

               s1          s2

l1.s1       7.260       7.260
l1.s2      10.267      10.267
l1.s3      13.274      13.274
l1.s4      16.281      16.281
l1.s5      19.287      19.287
l2.s1       6.492       6.227
l2.s2       9.140       8.875
l2.s3      11.788      11.523
l2.s4      14.436      14.171
l2.s5      17.084      16.819
l3.s1       6.967       6.343
l3.s2       9.753       9.129
l3.s3      12.539      11.915
l3.s4      15.325      14.701
l3.s5      18.111      17.487
l4.s1       7.577       6.903
l4.s2      10.578       9.904
l4.s3      13.580      12.905
l4.s4      16.581      15.906
l4.s5      19.582      18.907
l5.s1       8.038       7.641
l5.s2      11.316      10.920
l5.s3      14.594      14.198
l5.s4      17.873      17.476
l5.s5      21.151      20.755
l6.s1       8.675       8.595
l6.s2      11.601      11.521
l6.s3      14.528      14.448
l6.s4      17.455      17.375
l6.s5      20.381      20.301
l7.s1       9.382       9.382
l7.s2      12.162      12.162
l7.s3      14.943      14.943
l7.s4      17.723      17.723
l7.s5      20.504      20.504
l8.s1       8.802       8.802
l8.s2      11.562      11.562
l8.s3      14.323      14.323
l8.s4      17.084      17.084
l8.s5      19.845      19.845

INDEX 1 = EOA  INDEX 2 = winter

               s1          s2

l1.s1      12.926      12.926
l1.s2      13.730      13.730
l1.s3      14.535      14.535
l1.s4      15.339      15.339
l1.s5      16.143      16.143
l2.s1      12.859      12.710
l2.s2      13.512      13.364
l2.s3      14.166      14.017
l2.s4      14.819      14.671
l2.s5      15.473      15.324
l3.s1      12.867      12.492
l3.s2      13.583      13.208
l3.s3      14.298      13.923
l3.s4      15.014      14.639
l3.s5      15.730      15.355
l4.s1      13.245      12.813
l4.s2      13.977      13.545
l4.s3      14.710      14.278
l4.s4      15.442      15.010
l4.s5      16.174      15.742
l5.s1      13.472      13.216
l5.s2      14.209      13.953
l5.s3      14.945      14.689
l5.s4      15.681      15.425
l5.s5      16.418      16.162
l6.s1      14.381      14.330
l6.s2      15.054      15.004
l6.s3      15.727      15.677
l6.s4      16.400      16.350
l6.s5      17.074      17.023
l7.s1      14.528      14.528
l7.s2      15.172      15.172
l7.s3      15.816      15.816
l7.s4      16.460      16.460
l7.s5      17.104      17.104
l8.s1      14.037      14.037
l8.s2      14.751      14.751
l8.s3      15.465      15.465
l8.s4      16.179      16.179
l8.s5      16.893      16.893

INDEX 1 = EOA  INDEX 2 = summer

               s1          s2

l1.s1      19.412      19.412
l1.s2      20.308      20.308
l1.s3      21.204      21.204
l1.s4      22.099      22.099
l1.s5      22.995      22.995
l2.s1      18.128      17.824
l2.s2      19.080      18.776
l2.s3      20.032      19.728
l2.s4      20.984      20.680
l2.s5      21.936      21.632
l3.s1      18.746      18.056
l3.s2      19.800      19.110
l3.s3      20.854      20.164
l3.s4      21.908      21.219
l3.s5      22.963      22.273
l4.s1      19.671      18.921
l4.s2      20.760      20.010
l4.s3      21.849      21.099
l4.s4      22.937      22.187
l4.s5      24.026      23.276
l5.s1      20.201      19.639
l5.s2      21.262      20.699
l5.s3      22.322      21.759
l5.s4      23.382      22.820
l5.s5      24.443      23.880
l6.s1      19.899      19.701
l6.s2      20.999      20.801
l6.s3      22.099      21.901
l6.s4      23.199      23.001
l6.s5      24.299      24.101
l7.s1      20.037      20.037
l7.s2      21.143      21.143
l7.s3      22.248      22.248
l7.s4      23.353      23.353
l7.s5      24.458      24.458
l8.s1      19.760      19.760
l8.s2      20.768      20.768
l8.s3      21.776      21.776
l8.s4      22.784      22.784
l8.s5      23.792      23.792

INDEX 1 = EOA  INDEX 2 = spring-fall

               s1          s2

l1.s1      13.754      13.754
l1.s2      16.025      16.025
l1.s3      18.296      18.296
l1.s4      20.567      20.567
l1.s5      22.838      22.838
l2.s1      13.256      13.068
l2.s2      15.275      15.087
l2.s3      17.293      17.106
l2.s4      19.312      19.125
l2.s5      21.331      21.144
l3.s1      13.351      12.892
l3.s2      15.556      15.097
l3.s3      17.761      17.302
l3.s4      19.966      19.507
l3.s5      22.171      21.712
l4.s1      13.690      13.184
l4.s2      16.126      15.620
l4.s3      18.561      18.056
l4.s4      20.997      20.491
l4.s5      23.433      22.927
l5.s1      13.988      13.692
l5.s2      16.490      16.195
l5.s3      18.993      18.697
l5.s4      21.495      21.200
l5.s5      23.998      23.702
l6.s1      14.375      14.313
l6.s2      16.709      16.647
l6.s3      19.042      18.981
l6.s4      21.376      21.314
l6.s5      23.710      23.648
l7.s1      14.747      14.747
l7.s2      17.028      17.028
l7.s3      19.308      19.308
l7.s4      21.589      21.589
l7.s5      23.870      23.870
l8.s1      14.468      14.468
l8.s2      16.741      16.741
l8.s3      19.013      19.013
l8.s4      21.286      21.286
l8.s5      23.558      23.558

INDEX 1 = SOA  INDEX 2 = winter

               s1          s2

l1.s1       3.519       3.519
l1.s2       3.805       3.805
l1.s3       4.091       4.091
l1.s4       4.377       4.377
l1.s5       4.663       4.663
l2.s1       3.003       2.837
l2.s2       3.282       3.116
l2.s3       3.561       3.395
l2.s4       3.840       3.674
l2.s5       4.119       3.953
l3.s1       2.734       2.334
l3.s2       3.043       2.643
l3.s3       3.352       2.952
l3.s4       3.661       3.261
l3.s5       3.970       3.570
l4.s1       3.128       2.682
l4.s2       3.423       2.978
l4.s3       3.719       3.273
l4.s4       4.014       3.568
l4.s5       4.309       3.864
l5.s1       3.313       3.005
l5.s2       3.613       3.304
l5.s3       3.913       3.604
l5.s4       4.212       3.904
l5.s5       4.512       4.203
l6.s1       3.308       3.211
l6.s2       3.693       3.597
l6.s3       4.079       3.982
l6.s4       4.465       4.368
l6.s5       4.850       4.753
l7.s1       4.061       4.061
l7.s2       4.353       4.353
l7.s3       4.644       4.644
l7.s4       4.935       4.935
l7.s5       5.226       5.226
l8.s1       3.976       3.976
l8.s2       4.277       4.277
l8.s3       4.579       4.579
l8.s4       4.880       4.880
l8.s5       5.182       5.182

INDEX 1 = SOA  INDEX 2 = summer

               s1          s2

l1.s1       5.044       5.044
l1.s2       5.326       5.326
l1.s3       5.608       5.608
l1.s4       5.891       5.891
l1.s5       6.173       6.173
l2.s1       4.204       4.025
l2.s2       4.600       4.421
l2.s3       4.996       4.817
l2.s4       5.392       5.213
l2.s5       5.788       5.609
l3.s1       4.385       4.020
l3.s2       4.727       4.361
l3.s3       5.068       4.703
l3.s4       5.410       5.045
l3.s5       5.752       5.386
l4.s1       5.059       4.758
l4.s2       5.352       5.052
l4.s3       5.646       5.345
l4.s4       5.939       5.639
l4.s5       6.233       5.932
l5.s1       5.214       5.042
l5.s2       5.498       5.326
l5.s3       5.783       5.611
l5.s4       6.067       5.895
l5.s5       6.351       6.179
l6.s1       4.705       4.647
l6.s2       5.045       4.987
l6.s3       5.386       5.328
l6.s4       5.726       5.668
l6.s5       6.066       6.008
l7.s1       5.244       5.244
l7.s2       5.549       5.549
l7.s3       5.854       5.854
l7.s4       6.159       6.159
l7.s5       6.463       6.463
l8.s1       5.394       5.394
l8.s2       5.661       5.661
l8.s3       5.929       5.929
l8.s4       6.196       6.196
l8.s5       6.464       6.464

INDEX 1 = SOA  INDEX 2 = spring-fall

               s1          s2

l1.s1       4.062       4.062
l1.s2       4.525       4.525
l1.s3       4.989       4.989
l1.s4       5.452       5.452
l1.s5       5.916       5.916
l2.s1       3.303       3.082
l2.s2       3.786       3.564
l2.s3       4.268       4.047
l2.s4       4.751       4.529
l2.s5       5.233       5.012
l3.s1       3.215       2.721
l3.s2       3.734       3.239
l3.s3       4.252       3.758
l3.s4       4.770       4.276
l3.s5       5.289       4.794
l4.s1       3.762       3.262
l4.s2       4.284       3.784
l4.s3       4.806       4.306
l4.s4       5.328       4.828
l4.s5       5.850       5.350
l5.s1       4.095       3.775
l5.s2       4.580       4.261
l5.s3       5.066       4.747
l5.s4       5.552       5.233
l5.s5       6.038       5.719
l6.s1       3.870       3.777
l6.s2       4.311       4.218
l6.s3       4.752       4.659
l6.s4       5.193       5.100
l6.s5       5.634       5.541
l7.s1       4.530       4.530
l7.s2       4.981       4.981
l7.s3       5.433       5.433
l7.s4       5.884       5.884
l7.s5       6.335       6.335
l8.s1       4.513       4.513
l8.s2       4.954       4.954
l8.s3       5.395       5.395
l8.s4       5.836       5.836
l8.s5       6.277       6.277

INDEX 1 = WOA  INDEX 2 = winter

               s1          s2

l1.s1       6.006       6.006
l1.s2       7.456       7.456
l1.s3       8.907       8.907
l1.s4      10.357      10.357
l1.s5      11.808      11.808
l2.s1       5.448       5.212
l2.s2       6.638       6.402
l2.s3       7.828       7.592
l2.s4       9.018       8.782
l2.s5      10.208       9.972
l3.s1       5.282       4.552
l3.s2       6.550       5.820
l3.s3       7.819       7.089
l3.s4       9.087       8.357
l3.s5      10.356       9.626
l4.s1       5.869       4.869
l4.s2       7.215       6.215
l4.s3       8.561       7.561
l4.s4       9.907       8.907
l4.s5      11.253      10.253
l5.s1       6.067       5.298
l5.s2       7.528       6.759
l5.s3       8.990       8.221
l5.s4      10.451       9.682
l5.s5      11.913      11.144
l6.s1       6.717       6.455
l6.s2       8.015       7.753
l6.s3       9.313       9.051
l6.s4      10.611      10.349
l6.s5      11.909      11.646
l7.s1       7.306       7.306
l7.s2       8.614       8.614
l7.s3       9.921       9.921
l7.s4      11.229      11.229
l7.s5      12.537      12.537
l8.s1       6.986       6.986
l8.s2       8.366       8.366
l8.s3       9.746       9.746
l8.s4      11.126      11.126
l8.s5      12.506      12.506

INDEX 1 = WOA  INDEX 2 = summer

               s1          s2

l1.s1      13.108      13.108
l1.s2      14.153      14.153
l1.s3      15.197      15.197
l1.s4      16.241      16.241
l1.s5      17.285      17.285
l2.s1      12.079      11.860
l2.s2      13.149      12.929
l2.s3      14.219      13.999
l2.s4      15.288      15.069
l2.s5      16.358      16.139
l3.s1      12.482      11.893
l3.s2      13.634      13.044
l3.s3      14.786      14.196
l3.s4      15.937      15.348
l3.s5      17.089      16.499
l4.s1      13.482      12.755
l4.s2      14.703      13.976
l4.s3      15.924      15.197
l4.s4      17.145      16.418
l4.s5      18.366      17.639
l5.s1      14.291      13.721
l5.s2      15.391      14.821
l5.s3      16.491      15.921
l5.s4      17.591      17.021
l5.s5      18.691      18.121
l6.s1      13.720      13.507
l6.s2      14.773      14.560
l6.s3      15.826      15.612
l6.s4      16.879      16.665
l6.s5      17.932      17.718
l7.s1      13.220      13.220
l7.s2      14.404      14.404
l7.s3      15.587      15.587
l7.s4      16.770      16.770
l7.s5      17.953      17.953
l8.s1      13.367      13.367
l8.s2      14.478      14.478
l8.s3      15.588      15.588
l8.s4      16.699      16.699
l8.s5      17.809      17.809

INDEX 1 = WOA  INDEX 2 = spring-fall

               s1          s2

l1.s1       8.989       8.989
l1.s2      11.163      11.163
l1.s3      13.337      13.337
l1.s4      15.510      15.510
l1.s5      17.684      17.684
l2.s1       7.645       7.379
l2.s2       9.745       9.479
l2.s3      11.846      11.579
l2.s4      13.946      13.680
l2.s5      16.046      15.780
l3.s1       7.647       6.918
l3.s2       9.878       9.149
l3.s3      12.109      11.380
l3.s4      14.340      13.611
l3.s5      16.571      15.842
l4.s1       8.384       7.495
l4.s2      10.815       9.927
l4.s3      13.247      12.358
l4.s4      15.678      14.789
l4.s5      18.109      17.221
l5.s1       9.060       8.410
l5.s2      11.540      10.890
l5.s3      14.020      13.371
l5.s4      16.501      15.851
l5.s5      18.981      18.331
l6.s1       8.993       8.769
l6.s2      11.249      11.025
l6.s3      13.505      13.281
l6.s4      15.761      15.537
l6.s5      18.017      17.793
l7.s1       9.426       9.426
l7.s2      11.668      11.668
l7.s3      13.911      13.911
l7.s4      16.153      16.153
l7.s5      18.396      18.396
l8.s1       9.412       9.412
l8.s2      11.620      11.620
l8.s3      13.828      13.828
l8.s4      16.036      16.036
l8.s5      18.244      18.244


----    830 PARAMETER CDF_x  cumulative distribution functions for each scenario s

INDEX 1 = COA

                        s1          s2          s3          s4          s5

winter     .l1       0.143       1.000       0.663       0.903       1.000
winter     .l2       0.143       1.000       0.663       0.903       1.000
winter     .l3       0.143       1.000       0.663       0.903       1.000
winter     .l4       0.143       1.000       0.663       0.903       1.000
winter     .l5       0.143       1.000       0.663       0.903       1.000
winter     .l6       0.143       1.000       0.663       0.903       1.000
winter     .l7       0.143       1.000       0.663       0.903       1.000
winter     .l8       0.143       1.000       0.663       0.903       1.000
summer     .l1       0.143       1.000       0.663       0.903       1.000
summer     .l2       0.143       1.000       0.663       0.903       1.000
summer     .l3       0.143       1.000       0.663       0.903       1.000
summer     .l4       0.143       1.000       0.663       0.903       1.000
summer     .l5       0.143       1.000       0.663       0.903       1.000
summer     .l6       0.143       1.000       0.663       0.903       1.000
summer     .l7       0.143       1.000       0.663       0.903       1.000
summer     .l8       0.143       1.000       0.663       0.903       1.000
spring-fall.l1       0.143       1.000       0.663       0.903       1.000
spring-fall.l2       0.143       1.000       0.663       0.903       1.000
spring-fall.l3       0.143       1.000       0.663       0.903       1.000
spring-fall.l4       0.143       1.000       0.663       0.903       1.000
spring-fall.l5       0.143       1.000       0.663       0.903       1.000
spring-fall.l6       0.143       1.000       0.663       0.903       1.000
spring-fall.l7       0.143       1.000       0.663       0.903       1.000
spring-fall.l8       0.143       1.000       0.663       0.903       1.000

INDEX 1 = EOA

                        s1          s2          s3          s4          s5

winter     .l1       0.143       1.000       0.663       0.903       1.000
winter     .l2       0.143       1.000       0.663       0.903       1.000
winter     .l3       0.143       1.000       0.663       0.903       1.000
winter     .l4       0.143       1.000       0.663       0.903       1.000
winter     .l5       0.143       1.000       0.663       0.903       1.000
winter     .l6       0.143       1.000       0.663       0.903       1.000
winter     .l7       0.143       1.000       0.663       0.903       1.000
winter     .l8       0.143       1.000       0.663       0.903       1.000
summer     .l1       0.143       1.000       0.663       0.903       1.000
summer     .l2       0.143       1.000       0.663       0.903       1.000
summer     .l3       0.143       1.000       0.663       0.903       1.000
summer     .l4       0.143       1.000       0.663       0.903       1.000
summer     .l5       0.143       1.000       0.663       0.903       1.000
summer     .l6       0.143       1.000       0.663       0.903       1.000
summer     .l7       0.143       1.000       0.663       0.903       1.000
summer     .l8       0.143       1.000       0.663       0.903       1.000
spring-fall.l1       0.143       1.000       0.663       0.903       1.000
spring-fall.l2       0.143       1.000       0.663       0.903       1.000
spring-fall.l3       0.143       1.000       0.663       0.903       1.000
spring-fall.l4       0.143       1.000       0.663       0.903       1.000
spring-fall.l5       0.143       1.000       0.663       0.903       1.000
spring-fall.l6       0.143       1.000       0.663       0.903       1.000
spring-fall.l7       0.143       1.000       0.663       0.903       1.000
spring-fall.l8       0.143       1.000       0.663       0.903       1.000

INDEX 1 = SOA

                        s1          s2          s3          s4          s5

winter     .l1       0.143       1.000       0.663       0.903       1.000
winter     .l2       0.143       1.000       0.663       0.903       1.000
winter     .l3       0.143       1.000       0.663       0.903       1.000
winter     .l4       0.143       1.000       0.663       0.903       1.000
winter     .l5       0.143       1.000       0.663       0.903       1.000
winter     .l6       0.143       1.000       0.663       0.903       1.000
winter     .l7       0.143       1.000       0.663       0.903       1.000
winter     .l8       0.143       1.000       0.663       0.903       1.000
summer     .l1       0.143       1.000       0.663       0.903       1.000
summer     .l2       0.143       1.000       0.663       0.903       1.000
summer     .l3       0.143       1.000       0.663       0.903       1.000
summer     .l4       0.143       1.000       0.663       0.903       1.000
summer     .l5       0.143       1.000       0.663       0.903       1.000
summer     .l6       0.143       1.000       0.663       0.903       1.000
summer     .l7       0.143       1.000       0.663       0.903       1.000
summer     .l8       0.143       1.000       0.663       0.903       1.000
spring-fall.l1       0.143       1.000       0.663       0.903       1.000
spring-fall.l2       0.143       1.000       0.663       0.903       1.000
spring-fall.l3       0.143       1.000       0.663       0.903       1.000
spring-fall.l4       0.143       1.000       0.663       0.903       1.000
spring-fall.l5       0.143       1.000       0.663       0.903       1.000
spring-fall.l6       0.143       1.000       0.663       0.903       1.000
spring-fall.l7       0.143       1.000       0.663       0.903       1.000
spring-fall.l8       0.143       1.000       0.663       0.903       1.000

INDEX 1 = WOA

                        s1          s2          s3          s4          s5

winter     .l1       0.143       1.000       0.663       0.903       1.000
winter     .l2       0.143       1.000       0.663       0.903       1.000
winter     .l3       0.143       1.000       0.663       0.903       1.000
winter     .l4       0.143       1.000       0.663       0.903       1.000
winter     .l5       0.143       1.000       0.663       0.903       1.000
winter     .l6       0.143       1.000       0.663       0.903       1.000
winter     .l7       0.143       1.000       0.663       0.903       1.000
winter     .l8       0.143       1.000       0.663       0.903       1.000
summer     .l1       0.143       1.000       0.663       0.903       1.000
summer     .l2       0.143       1.000       0.663       0.903       1.000
summer     .l3       0.143       1.000       0.663       0.903       1.000
summer     .l4       0.143       1.000       0.663       0.903       1.000
summer     .l5       0.143       1.000       0.663       0.903       1.000
summer     .l6       0.143       1.000       0.663       0.903       1.000
summer     .l7       0.143       1.000       0.663       0.903       1.000
summer     .l8       0.143       1.000       0.663       0.903       1.000
spring-fall.l1       0.143       1.000       0.663       0.903       1.000
spring-fall.l2       0.143       1.000       0.663       0.903       1.000
spring-fall.l3       0.143       1.000       0.663       0.903       1.000
spring-fall.l4       0.143       1.000       0.663       0.903       1.000
spring-fall.l5       0.143       1.000       0.663       0.903       1.000
spring-fall.l6       0.143       1.000       0.663       0.903       1.000
spring-fall.l7       0.143       1.000       0.663       0.903       1.000
spring-fall.l8       0.143       1.000       0.663       0.903       1.000


----    830 PARAMETER ELsolcurvenorm  normalized DNI profiles from ELsolcurve

                       COA         EOA         SOA         WOA

l2.winter            0.275       0.198       0.332       0.236
l2.summer            0.406       0.406       0.358       0.219
l2.spring-fall       0.354       0.250       0.443       0.266
l3.winter            0.717       0.500       0.799       0.730
l3.summer            0.924       0.920       0.731       0.589
l3.spring-fall       0.832       0.612       0.989       0.729
l4.winter            0.866       0.576       0.891       1.000
l4.summer            1.000       1.000       0.601       0.727
l4.spring-fall       0.900       0.674       1.000       0.889
l5.winter            0.554       0.341       0.617       0.769
l5.summer            0.708       0.750       0.344       0.570
l5.spring-fall       0.528       0.394       0.639       0.650
l6.winter            0.131       0.067       0.194       0.263
l6.summer            0.226       0.264       0.116       0.213
l6.spring-fall       0.107       0.082       0.185       0.224


----    830 PARAMETER solar_cap  regional solar capcitity installation in GW

COA 1.500,    EOA 1.500,    SOA 1.000,    WOA 2.000


----    830 PARAMETER X_cdf  

INDEX 1 = COA

                        s1          s2          s3          s4          s5

winter     .l1       0.250       0.750    7231.316    8019.208    8807.100
winter     .l2       0.250       0.750    6851.826    7535.946    8220.066
winter     .l3       0.250       0.750    7358.867    8038.017    8717.167
winter     .l4       0.250       0.750    7862.266    8502.071    9141.876
winter     .l5       0.250       0.750    8052.478    8778.856    9505.233
winter     .l6       0.250       0.750    8785.787    9634.510   10483.232
winter     .l7       0.250       0.750    9087.340    9769.144   10450.948
winter     .l8       0.250       0.750    8610.369    9360.737   10111.105
summer     .l1       0.250       0.750   14943.872   15827.444   16711.016
summer     .l2       0.250       0.750   13918.081   14903.321   15888.562
summer     .l3       0.250       0.750   14966.893   16086.305   17205.718
summer     .l4       0.250       0.750   16189.678   17362.115   18534.552
summer     .l5       0.250       0.750   16930.303   17988.502   19046.701
summer     .l6       0.250       0.750   16449.942   17545.482   18641.021
summer     .l7       0.250       0.750   16226.740   17276.870   18327.000
summer     .l8       0.250       0.750   15662.063   16627.391   17592.719
spring-fall.l1       0.250       0.750   10907.041   13377.627   15848.212
spring-fall.l2       0.250       0.750    9795.389   11971.184   14146.978
spring-fall.l3       0.250       0.750   10559.174   12848.359   15137.543
spring-fall.l4       0.250       0.750   11435.389   13901.334   16367.279
spring-fall.l5       0.250       0.750   12154.945   14848.714   17542.483
spring-fall.l6       0.250       0.750   11970.430   14375.232   16780.033
spring-fall.l7       0.250       0.750   12278.311   14562.958   16847.605
spring-fall.l8       0.250       0.750   11769.156   14037.619   16306.082

INDEX 1 = EOA

                        s1          s2          s3          s4          s5

winter     .l1       0.250       0.750   10624.699   11212.691   11800.684
winter     .l2       0.250       0.750   10409.561   10887.266   11364.971
winter     .l3       0.250       0.750   10589.154   11112.219   11635.284
winter     .l4       0.250       0.750   10910.381   11445.650   11980.918
winter     .l5       0.250       0.750   11018.175   11556.426   12094.677
winter     .l6       0.250       0.750   11514.951   12007.078   12499.206
winter     .l7       0.250       0.750   11561.164   12031.974   12502.785
winter     .l8       0.250       0.750   11304.850   11826.763   12348.676
summer     .l1       0.250       0.750   15499.676   16154.499   16809.321
summer     .l2       0.250       0.750   14754.973   15450.892   16146.811
summer     .l3       0.250       0.750   15496.483   16267.055   17037.626
summer     .l4       0.250       0.750   16245.343   17041.182   17837.022
summer     .l5       0.250       0.750   16523.030   17298.111   18073.192
summer     .l6       0.250       0.750   16226.558   17030.722   17834.887
summer     .l7       0.250       0.750   16262.893   17070.694   17878.495
summer     .l8       0.250       0.750   15918.229   16655.051   17391.872
spring-fall.l1       0.250       0.750   13374.254   15034.346   16694.437
spring-fall.l2       0.250       0.750   12709.893   14185.635   15661.376
spring-fall.l3       0.250       0.750   13151.117   14762.924   16374.731
spring-fall.l4       0.250       0.750   13753.029   15533.584   17314.140
spring-fall.l5       0.250       0.750   13991.792   15821.149   17650.507
spring-fall.l6       0.250       0.750   13942.406   15648.356   17354.306
spring-fall.l7       0.250       0.750   14114.328   15781.507   17448.686
spring-fall.l8       0.250       0.750   13898.560   15559.652   17220.743

INDEX 1 = SOA

                        s1          s2          s3          s4          s5

winter     .l1       0.250       0.750    3078.301    3293.654    3509.006
winter     .l2       0.250       0.750    2741.588    2951.459    3161.330
winter     .l3       0.250       0.750    2672.586    2905.133    3137.680
winter     .l4       0.250       0.750    2965.730    3187.902    3410.074
winter     .l5       0.250       0.750    3060.030    3285.531    3511.032
winter     .l6       0.250       0.750    3105.594    3395.733    3685.871
winter     .l7       0.250       0.750    3494.115    3713.169    3932.222
winter     .l8       0.250       0.750    3445.309    3672.243    3899.177
summer     .l1       0.250       0.750    4220.017    4432.474    4644.932
summer     .l2       0.250       0.750    3826.504    4124.539    4422.573
summer     .l3       0.250       0.750    3951.076    4208.190    4465.303
summer     .l4       0.250       0.750    4361.285    4582.060    4802.836
summer     .l5       0.250       0.750    4415.774    4629.528    4843.282
summer     .l6       0.250       0.750    4074.087    4330.107    4586.128
summer     .l7       0.250       0.750    4404.731    4634.008    4863.285
summer     .l8       0.250       0.750    4461.088    4662.410    4863.731
spring-fall.l1       0.250       0.750    3753.910    4102.685    4451.460
spring-fall.l2       0.250       0.750    3294.984    3658.029    4021.074
spring-fall.l3       0.250       0.750    3385.395    3775.397    4165.399
spring-fall.l4       0.250       0.750    3804.295    4197.027    4589.759
spring-fall.l5       0.250       0.750    3932.380    4297.997    4663.614
spring-fall.l6       0.250       0.750    3610.184    3941.996    4273.808
spring-fall.l7       0.250       0.750    4087.668    4427.267    4766.867
spring-fall.l8       0.250       0.750    4059.519    4391.221    4722.922

INDEX 1 = WOA

                        s1          s2          s3          s4          s5

winter     .l1       0.250       0.750    7528.953    8755.014    9981.075
winter     .l2       0.250       0.750    6717.107    7723.023    8728.940
winter     .l3       0.250       0.750    6917.711    7989.995    9062.279
winter     .l4       0.250       0.750    7659.689    8797.462    9935.235
winter     .l5       0.250       0.750    7924.232    9159.732   10395.232
winter     .l6       0.250       0.750    7983.557    9080.685   10177.814
winter     .l7       0.250       0.750    8386.701    9492.297   10597.894
winter     .l8       0.250       0.750    8238.444    9404.899   10571.354
summer     .l1       0.250       0.750   12846.099   13728.795   14611.491
summer     .l2       0.250       0.750   12111.740   13015.985   13920.231
summer     .l3       0.250       0.750   12747.542   13721.032   14694.522
summer     .l4       0.250       0.750   13768.173   14800.379   15832.585
summer     .l5       0.250       0.750   14181.135   15111.061   16040.988
summer     .l6       0.250       0.750   13467.715   14357.765   15247.814
summer     .l7       0.250       0.750   13175.694   14175.923   15176.152
summer     .l8       0.250       0.750   13176.785   14115.574   15054.362
spring-fall.l1       0.250       0.750   11273.461   13111.089   14948.718
spring-fall.l2       0.250       0.750   10125.724   11901.212   13676.700
spring-fall.l3       0.250       0.750   10544.217   12430.079   14315.940
spring-fall.l4       0.250       0.750   11573.283   13628.507   15683.730
spring-fall.l5       0.250       0.750   12126.183   14222.828   16319.472
spring-fall.l6       0.250       0.750   11510.520   13417.534   15324.547
spring-fall.l7       0.250       0.750   11759.061   13654.671   15550.281
spring-fall.l8       0.250       0.750   11688.661   13555.098   15421.534

GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             11/11/16 15:55:28 Page 4
Dynamic Programming Investment
Equation Listing    SOLVE CMO Using MCP From line 928


---- Eq1  =E=  Equation (1)

Eq1(COA,winter,l1,s1,s1)..  12.2563210321407*sales(fringe,COA,winter,l1,s1,s1) + 12.2563210321407*sales(g1,COA,winter,l1,s1,s1) + 12.2563210321407*sales(g2,COA,winter,l1,s1,s1)
     
      + 12.2563210321407*sales(g3,COA,winter,l1,s1,s1) + 12.2563210321407*sales(g4,COA,winter,l1,s1,s1) + price(COA,winter,l1,s1,s1) - 12.2563210321407*arbitrage(East,COA,EOA,winter,l1,s1,s1)
     
      + 12.2563210321407*arbitrage(East,EOA,COA,winter,l1,s1,s1) - 12.2563210321407*arbitrage(west,COA,WOA,winter,l1,s1,s1) + 12.2563210321407*arbitrage(west,WOA,COA,winter,l1,s1,s1) =E= 
     109.664855193762 ; (LHS = 109.664855193762)
     
Eq1(COA,winter,l1,s1,s2)..  15.3204012901759*sales(fringe,COA,winter,l1,s1,s2) + 15.3204012901759*sales(g1,COA,winter,l1,s1,s2) + 15.3204012901759*sales(g2,COA,winter,l1,s1,s2)
     
      + 15.3204012901759*sales(g3,COA,winter,l1,s1,s2) + 15.3204012901759*sales(g4,COA,winter,l1,s1,s2) + price(COA,winter,l1,s1,s2) - 15.3204012901759*arbitrage(East,COA,EOA,winter,l1,s1,s2)
     
      + 15.3204012901759*arbitrage(East,EOA,COA,winter,l1,s1,s2) - 15.3204012901759*arbitrage(west,COA,WOA,winter,l1,s1,s2) + 15.3204012901759*arbitrage(west,WOA,COA,winter,l1,s1,s2) =E= 
     137.081068992203 ; (LHS = 137.081068992203)
     
Eq1(COA,winter,l1,s2,s1)..  10.757636520348*sales(fringe,COA,winter,l1,s2,s1) + 10.757636520348*sales(g1,COA,winter,l1,s2,s1) + 10.757636520348*sales(g2,COA,winter,l1,s2,s1)
     
      + 10.757636520348*sales(g3,COA,winter,l1,s2,s1) + 10.757636520348*sales(g4,COA,winter,l1,s2,s1) + price(COA,winter,l1,s2,s1) - 10.757636520348*arbitrage(East,COA,EOA,winter,l1,s2,s1)
     
      + 10.757636520348*arbitrage(East,EOA,COA,winter,l1,s2,s1) - 10.757636520348*arbitrage(west,COA,WOA,winter,l1,s2,s1) + 10.757636520348*arbitrage(west,WOA,COA,winter,l1,s2,s1) =E= 109.664855193762
      ; (LHS = 109.664855193762)
     
REMAINING 957 ENTRIES SKIPPED


---- Eq2  =E=  Equation (1)

Eq2(COA,summer,l5)..  delta(COA,summer,l5) =E= 40.4789709383651 ; (LHS = 0, INFES = 40.4789709383651 ****)
     
Eq2(COA,summer,l6)..  delta(COA,summer,l6) =E= 40.4789709383651 ; (LHS = 0, INFES = 40.4789709383651 ****)
     
Eq2(COA,summer,l7)..  delta(COA,summer,l7) =E= 40.4789709383651 ; (LHS = 0, INFES = 40.4789709383651 ****)
     
REMAINING 24 ENTRIES SKIPPED


---- Eq9_1  =E=  Equation (8.1)

Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)..  - lambda_high(fringe,CCGT,COA,winter,l1,s1,s1) + lambda_low(fringe,CCGT,COA,winter,l1,s1,s1) + price(COA,winter,l1,s1,s1) =E= 8.860975 ; (LHS = 8.860975)
     
Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)..  - lambda_high(fringe,CCGT,COA,winter,l1,s1,s2) + lambda_low(fringe,CCGT,COA,winter,l1,s1,s2) + price(COA,winter,l1,s1,s2) =E= 8.860975 ; (LHS = 8.860975)
     
Eq9_1(fringe,CCGT,COA,winter,l1,s2,s1)..  - lambda_high(fringe,CCGT,COA,winter,l1,s2,s1) + lambda_low(fringe,CCGT,COA,winter,l1,s2,s1) + price(COA,winter,l1,s2,s1) =E= 8.860975 ; (LHS = 8.860975)
     
REMAINING 19197 ENTRIES SKIPPED


---- Eq9_2  =E=  Equation (8.2)

Eq9_2(fringe,CCGT,COA)..  0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l1,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l1,s1,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,COA,winter,l1,s2,s1) + 0.071165348708824*lambda_high(fringe,CCGT,COA,winter,l1,s2,s2)
     
      + 0.0467001001497737*lambda_high(fringe,CCGT,COA,winter,l1,s3,s1) + 0.0815612208302069*lambda_high(fringe,CCGT,COA,winter,l1,s3,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,COA,winter,l1,s4,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,COA,winter,l1,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l1,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l1,s5,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l2,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l2,s1,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,COA,winter,l2,s2,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,COA,winter,l2,s2,s2)
     
      + 0.0467001001497737*lambda_high(fringe,CCGT,COA,winter,l2,s3,s1) + 0.0815612208302069*lambda_high(fringe,CCGT,COA,winter,l2,s3,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,COA,winter,l2,s4,s1) + 0.071165348708824*lambda_high(fringe,CCGT,COA,winter,l2,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l2,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l2,s5,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l3,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l3,s1,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,COA,winter,l3,s2,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,COA,winter,l3,s2,s2)
     
      + 0.0467001001497737*lambda_high(fringe,CCGT,COA,winter,l3,s3,s1) + 0.0815612208302068*lambda_high(fringe,CCGT,COA,winter,l3,s3,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,COA,winter,l3,s4,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,COA,winter,l3,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l3,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l3,s5,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,COA,winter,l4,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l4,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l4,s2,s1) + 0.035582674354412*lambda_high(fringe,CCGT,COA,winter,l4,s2,s2)
     
      + 0.0233500500748868*lambda_high(fringe,CCGT,COA,winter,l4,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,COA,winter,l4,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l4,s4,s1) + 0.035582674354412*lambda_high(fringe,CCGT,COA,winter,l4,s4,s2)
     
      + 0.00938466052309041*lambda_high(fringe,CCGT,COA,winter,l4,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l4,s5,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,COA,winter,l5,s1,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,COA,winter,l5,s1,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,COA,winter,l5,s2,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,COA,winter,l5,s2,s2)
     
      + 0.0350250751123303*lambda_high(fringe,CCGT,COA,winter,l5,s3,s1) + 0.0611709156226551*lambda_high(fringe,CCGT,COA,winter,l5,s3,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,COA,winter,l5,s4,s1) + 0.053374011531618*lambda_high(fringe,CCGT,COA,winter,l5,s4,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,COA,winter,l5,s5,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,COA,winter,l5,s5,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,COA,winter,l6,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l6,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l6,s2,s1) + 0.0355826743544121*lambda_high(fringe,CCGT,COA,winter,l6,s2,s2)
     
      + 0.0233500500748868*lambda_high(fringe,CCGT,COA,winter,l6,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,COA,winter,l6,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l6,s4,s1) + 0.0355826743544121*lambda_high(fringe,CCGT,COA,winter,l6,s4,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,COA,winter,l6,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l6,s5,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,COA,winter,l7,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l7,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l7,s2,s1) + 0.0355826743544121*lambda_high(fringe,CCGT,COA,winter,l7,s2,s2)
     
      + 0.0233500500748868*lambda_high(fringe,CCGT,COA,winter,l7,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,COA,winter,l7,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l7,s4,s1) + 0.0355826743544121*lambda_high(fringe,CCGT,COA,winter,l7,s4,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,COA,winter,l7,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l7,s5,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,COA,winter,l8,s1,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,COA,winter,l8,s1,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,COA,winter,l8,s2,s1) + 0.053374011531618*lambda_high(fringe,CCGT,COA,winter,l8,s2,s2)
     
      + 0.0350250751123303*lambda_high(fringe,CCGT,COA,winter,l8,s3,s1) + 0.0611709156226551*lambda_high(fringe,CCGT,COA,winter,l8,s3,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,COA,winter,l8,s4,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,COA,winter,l8,s4,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,COA,winter,l8,s5,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,COA,winter,l8,s5,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,COA,summer,l1,s1,s1) + 0.0531908479419696*lambda_high(fringe,CCGT,COA,summer,l1,s1,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,COA,summer,l1,s2,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,COA,summer,l1,s2,s2)
     
      + 0.046317312443628*lambda_high(fringe,CCGT,COA,summer,l1,s3,s1) + 0.0808926862332379*lambda_high(fringe,CCGT,COA,summer,l1,s3,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,COA,summer,l1,s4,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,COA,summer,l1,s4,s2)
     
      + 0.0186154741523597*lambda_high(fringe,CCGT,COA,summer,l1,s5,s1) + 0.0531908479419696*lambda_high(fringe,CCGT,COA,summer,l1,s5,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,COA,summer,l2,s1,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,COA,summer,l2,s1,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,COA,summer,l2,s2,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,COA,summer,l2,s2,s2)
     
      + 0.046317312443628*lambda_high(fringe,CCGT,COA,summer,l2,s3,s1) + 0.0808926862332379*lambda_high(fringe,CCGT,COA,summer,l2,s3,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,COA,summer,l2,s4,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,COA,summer,l2,s4,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,COA,summer,l2,s5,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,COA,summer,l2,s5,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,COA,summer,l3,s1,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,COA,summer,l3,s1,s2)
     
      + 0.0360066523888139*lambda_high(fringe,CCGT,COA,summer,l3,s2,s1) + 0.0705820261784238*lambda_high(fringe,CCGT,COA,summer,l3,s2,s2)
     
      + 0.046317312443628*lambda_high(fringe,CCGT,COA,summer,l3,s3,s1) + 0.0808926862332379*lambda_high(fringe,CCGT,COA,summer,l3,s3,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,COA,summer,l3,s4,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,COA,summer,l3,s4,s2)
     
      + 0.0186154741523597*lambda_high(fringe,CCGT,COA,summer,l3,s5,s1) + 0.0531908479419696*lambda_high(fringe,CCGT,COA,summer,l3,s5,s2)
     
      + 0.00930773707617982*lambda_high(fringe,CCGT,COA,summer,l4,s1,s1) + 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l4,s1,s2)
     
      + 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l4,s2,s1) + 0.035291013089212*lambda_high(fringe,CCGT,COA,summer,l4,s2,s2) + 0.023158656221814*lambda_high(fringe,CCGT,COA,summer,l4,s3,s1)
     
      + 0.040446343116619*lambda_high(fringe,CCGT,COA,summer,l4,s3,s2) + 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l4,s4,s1)
     
      + 0.0352910130892119*lambda_high(fringe,CCGT,COA,summer,l4,s4,s2) + 0.00930773707617982*lambda_high(fringe,CCGT,COA,summer,l4,s5,s1)
     
      + 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l4,s5,s2) + 0.0139616056142697*lambda_high(fringe,CCGT,COA,summer,l5,s1,s1)
     
      + 0.0398931359564772*lambda_high(fringe,CCGT,COA,summer,l5,s1,s2) + 0.0270049892916104*lambda_high(fringe,CCGT,COA,summer,l5,s2,s1)
     
      + 0.0529365196338179*lambda_high(fringe,CCGT,COA,summer,l5,s2,s2) + 0.0347379843327211*lambda_high(fringe,CCGT,COA,summer,l5,s3,s1)
     
      + 0.0606695146749285*lambda_high(fringe,CCGT,COA,summer,l5,s3,s2) + 0.0270049892916105*lambda_high(fringe,CCGT,COA,summer,l5,s4,s1)
     
      + 0.0529365196338179*lambda_high(fringe,CCGT,COA,summer,l5,s4,s2) + 0.0139616056142697*lambda_high(fringe,CCGT,COA,summer,l5,s5,s1)
     
      + 0.0398931359564771*lambda_high(fringe,CCGT,COA,summer,l5,s5,s2) + 0.00930773707617981*lambda_high(fringe,CCGT,COA,summer,l6,s1,s1)
     
      + 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l6,s1,s2) + 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l6,s2,s1)
     
      + 0.035291013089212*lambda_high(fringe,CCGT,COA,summer,l6,s2,s2) + 0.023158656221814*lambda_high(fringe,CCGT,COA,summer,l6,s3,s1) + 0.040446343116619*lambda_high(fringe,CCGT,COA,summer,l6,s3,s2)
     
      + 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l6,s4,s1) + 0.0352910130892119*lambda_high(fringe,CCGT,COA,summer,l6,s4,s2)
     
      + 0.00930773707617981*lambda_high(fringe,CCGT,COA,summer,l6,s5,s1) + 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l6,s5,s2)
     
      + 0.00930773707617981*lambda_high(fringe,CCGT,COA,summer,l7,s1,s1) + 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l7,s1,s2)
     
      + 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l7,s2,s1) + 0.0352910130892119*lambda_high(fringe,CCGT,COA,summer,l7,s2,s2)
     
      + 0.023158656221814*lambda_high(fringe,CCGT,COA,summer,l7,s3,s1) + 0.040446343116619*lambda_high(fringe,CCGT,COA,summer,l7,s3,s2) + 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l7,s4,s1)
     
      + 0.0352910130892119*lambda_high(fringe,CCGT,COA,summer,l7,s4,s2) + 0.00930773707617981*lambda_high(fringe,CCGT,COA,summer,l7,s5,s1)
     
      + 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l7,s5,s2) + 0.0139616056142697*lambda_high(fringe,CCGT,COA,summer,l8,s1,s1)
     
      + 0.0398931359564771*lambda_high(fringe,CCGT,COA,summer,l8,s1,s2) + 0.0270049892916105*lambda_high(fringe,CCGT,COA,summer,l8,s2,s1)
     
      + 0.0529365196338179*lambda_high(fringe,CCGT,COA,summer,l8,s2,s2) + 0.034737984332721*lambda_high(fringe,CCGT,COA,summer,l8,s3,s1)
     
      + 0.0606695146749284*lambda_high(fringe,CCGT,COA,summer,l8,s3,s2) + 0.0270049892916105*lambda_high(fringe,CCGT,COA,summer,l8,s4,s1)
     
      + 0.0529365196338179*lambda_high(fringe,CCGT,COA,summer,l8,s4,s2) + 0.0139616056142697*lambda_high(fringe,CCGT,COA,summer,l8,s5,s1)
     
      + 0.0398931359564771*lambda_high(fringe,CCGT,COA,summer,l8,s5,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s2) + 0.0363042280283909*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s1)
     
      + 0.0711653487088241*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s2) + 0.0467001001497737*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s1)
     
      + 0.0815612208302068*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s2) + 0.036304228028391*lambda_high(fringe,CCGT,COA,spring-fall,l1,s4,s1)
     
      + 0.0711653487088241*lambda_high(fringe,CCGT,COA,spring-fall,l1,s4,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l1,s5,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l1,s5,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s2) + 0.0363042280283909*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s1)
     
      + 0.0711653487088241*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s2) + 0.0467001001497737*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s1)
     
      + 0.0815612208302068*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s2) + 0.036304228028391*lambda_high(fringe,CCGT,COA,spring-fall,l2,s4,s1)
     
      + 0.0711653487088241*lambda_high(fringe,CCGT,COA,spring-fall,l2,s4,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l2,s5,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l2,s5,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s2) + 0.036304228028391*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s1)
     
      + 0.0711653487088241*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s2) + 0.0467001001497737*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s1)
     
      + 0.0815612208302069*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s2) + 0.0363042280283909*lambda_high(fringe,CCGT,COA,spring-fall,l3,s4,s1)
     
      + 0.071165348708824*lambda_high(fringe,CCGT,COA,spring-fall,l3,s4,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l3,s5,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l3,s5,s2) + 0.00938466052309039*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s1)
     
      + 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s1)
     
      + 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s2) + 0.0233500500748869*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s1)
     
      + 0.0407806104151034*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l4,s4,s1)
     
      + 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l4,s4,s2) + 0.00938466052309039*lambda_high(fringe,CCGT,COA,spring-fall,l4,s5,s1)
     
      + 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l4,s5,s2) + 0.0140769907846356*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s1)
     
      + 0.0402228312949604*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s2) + 0.0272281710212932*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s1)
     
      + 0.053374011531618*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s2) + 0.0350250751123303*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s1)
     
      + 0.0611709156226551*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s2) + 0.0272281710212932*lambda_high(fringe,CCGT,COA,spring-fall,l5,s4,s1)
     
      + 0.0533740115316181*lambda_high(fringe,CCGT,COA,spring-fall,l5,s4,s2) + 0.0140769907846356*lambda_high(fringe,CCGT,COA,spring-fall,l5,s5,s1)
     
      + 0.0402228312949604*lambda_high(fringe,CCGT,COA,spring-fall,l5,s5,s2) + 0.00938466052309039*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s1)
     
      + 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s1)
     
      + 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s2) + 0.0233500500748869*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s1)
     
      + 0.0407806104151034*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l6,s4,s1)
     
      + 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l6,s4,s2) + 0.0093846605230904*lambda_high(fringe,CCGT,COA,spring-fall,l6,s5,s1)
     
      + 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l6,s5,s2) + 0.0093846605230904*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s1)
     
      + 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s1)
     
      + 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s2) + 0.0233500500748868*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s1)
     
      + 0.0407806104151034*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l7,s4,s1)
     
      + 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l7,s4,s2) + 0.00938466052309039*lambda_high(fringe,CCGT,COA,spring-fall,l7,s5,s1)
     
      + 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l7,s5,s2) + 0.0140769907846356*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s1)
     
      + 0.0402228312949604*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s2) + 0.0272281710212932*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s1)
     
      + 0.0533740115316181*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s2) + 0.0350250751123303*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s1)
     
      + 0.0611709156226551*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s2) + 0.0272281710212932*lambda_high(fringe,CCGT,COA,spring-fall,l8,s4,s1)
     
      + 0.0533740115316181*lambda_high(fringe,CCGT,COA,spring-fall,l8,s4,s2) + 0.0140769907846356*lambda_high(fringe,CCGT,COA,spring-fall,l8,s5,s1)
     
      + 0.0402228312949604*lambda_high(fringe,CCGT,COA,spring-fall,l8,s5,s2) + 0.363*delta(COA,summer,l5) + 0.242*delta(COA,summer,l6) + 0.242*delta(COA,summer,l7) + 0.363*delta(COA,summer,l8)
     
      + 0.366*delta(COA,spring-fall,l5) + 0.244*delta(COA,spring-fall,l6) + 0.244*delta(COA,spring-fall,l7) + 0.366*delta(COA,spring-fall,l8) + alpha(fringe,CCGT,COA) =E= 131.653873578002 ;
     
      (LHS = 131.653873578002)
     
Eq9_2(fringe,CCGT,EOA)..  0.0187693210461808*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s1) + 0.071165348708824*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s2)
     
      + 0.0467001001497738*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s1) + 0.0815612208302069*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,EOA,winter,l1,s4,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,winter,l1,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,EOA,winter,l1,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l1,s5,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s2)
     
      + 0.0467001001497736*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s1) + 0.0815612208302067*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,EOA,winter,l2,s4,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,winter,l2,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,EOA,winter,l2,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l2,s5,s2)
     
      + 0.0187693210461807*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s2)
     
      + 0.0467001001497737*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s1) + 0.0815612208302068*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,EOA,winter,l3,s4,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,winter,l3,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,EOA,winter,l3,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l3,s5,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s2)
     
      + 0.0233500500748869*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,EOA,winter,l4,s4,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l4,s4,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l4,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l4,s5,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s2)
     
      + 0.0350250751123303*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s1) + 0.0611709156226551*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,EOA,winter,l5,s4,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,EOA,winter,l5,s4,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,EOA,winter,l5,s5,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,EOA,winter,l5,s5,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s2)
     
      + 0.0233500500748869*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,EOA,winter,l6,s4,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l6,s4,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l6,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l6,s5,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s2)
     
      + 0.0181521140141954*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s2)
     
      + 0.0233500500748869*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s1) + 0.0407806104151035*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,EOA,winter,l7,s4,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l7,s4,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l7,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l7,s5,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s2)
     
      + 0.0272281710212933*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s2)
     
      + 0.0350250751123302*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s1) + 0.0611709156226551*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s2)
     
      + 0.0272281710212933*lambda_high(fringe,CCGT,EOA,winter,l8,s4,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,EOA,winter,l8,s4,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,EOA,winter,l8,s5,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,EOA,winter,l8,s5,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s1) + 0.0531908479419696*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s2)
     
      + 0.046317312443628*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s1) + 0.0808926862332379*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,EOA,summer,l1,s4,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,EOA,summer,l1,s4,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l1,s5,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,EOA,summer,l1,s5,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s2)
     
      + 0.0463173124436281*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s1) + 0.080892686233238*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s2)
     
      + 0.0360066523888139*lambda_high(fringe,CCGT,EOA,summer,l2,s4,s1) + 0.0705820261784238*lambda_high(fringe,CCGT,EOA,summer,l2,s4,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l2,s5,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,EOA,summer,l2,s5,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s2)
     
      + 0.0463173124436281*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s1) + 0.0808926862332379*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,EOA,summer,l3,s4,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,EOA,summer,l3,s4,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l3,s5,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,EOA,summer,l3,s5,s2)
     
      + 0.00930773707617981*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s1) + 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s2)
     
      + 0.018003326194407*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s1) + 0.0352910130892119*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s2)
     
      + 0.0231586562218141*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s1) + 0.040446343116619*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s2)
     
      + 0.0180033261944069*lambda_high(fringe,CCGT,EOA,summer,l4,s4,s1) + 0.0352910130892119*lambda_high(fringe,CCGT,EOA,summer,l4,s4,s2)
     
      + 0.00930773707617983*lambda_high(fringe,CCGT,EOA,summer,l4,s5,s1) + 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l4,s5,s2)
     
      + 0.0139616056142697*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s1) + 0.0398931359564772*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s2)
     
      + 0.0270049892916105*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s1) + 0.0529365196338179*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s2)
     
      + 0.034737984332721*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s1) + 0.0606695146749285*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s2)
     
      + 0.0270049892916105*lambda_high(fringe,CCGT,EOA,summer,l5,s4,s1) + 0.0529365196338179*lambda_high(fringe,CCGT,EOA,summer,l5,s4,s2)
     
      + 0.0139616056142697*lambda_high(fringe,CCGT,EOA,summer,l5,s5,s1) + 0.0398931359564772*lambda_high(fringe,CCGT,EOA,summer,l5,s5,s2)
     
      + 0.00930773707617982*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s1) + 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s2)
     
      + 0.018003326194407*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s1) + 0.035291013089212*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s2) + 0.023158656221814*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s1)
     
      + 0.0404463431166189*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s2) + 0.018003326194407*lambda_high(fringe,CCGT,EOA,summer,l6,s4,s1)
     
      + 0.0352910130892119*lambda_high(fringe,CCGT,EOA,summer,l6,s4,s2) + 0.00930773707617981*lambda_high(fringe,CCGT,EOA,summer,l6,s5,s1)
     
      + 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l6,s5,s2) + 0.00930773707617981*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s1)
     
      + 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s2) + 0.018003326194407*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s1)
     
      + 0.035291013089212*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s2) + 0.023158656221814*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s1) + 0.040446343116619*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s2)
     
      + 0.0180033261944069*lambda_high(fringe,CCGT,EOA,summer,l7,s4,s1) + 0.0352910130892119*lambda_high(fringe,CCGT,EOA,summer,l7,s4,s2)
     
      + 0.00930773707617982*lambda_high(fringe,CCGT,EOA,summer,l7,s5,s1) + 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l7,s5,s2)
     
      + 0.0139616056142697*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s1) + 0.0398931359564771*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s2)
     
      + 0.0270049892916105*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s1) + 0.0529365196338179*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s2)
     
      + 0.034737984332721*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s1) + 0.0606695146749285*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s2)
     
      + 0.0270049892916105*lambda_high(fringe,CCGT,EOA,summer,l8,s4,s1) + 0.0529365196338179*lambda_high(fringe,CCGT,EOA,summer,l8,s4,s2)
     
      + 0.0139616056142698*lambda_high(fringe,CCGT,EOA,summer,l8,s5,s1) + 0.0398931359564772*lambda_high(fringe,CCGT,EOA,summer,l8,s5,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s2)
     
      + 0.0467001001497737*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s1) + 0.0815612208302069*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s4,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s5,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s2)
     
      + 0.0467001001497737*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s1) + 0.0815612208302068*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s4,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s5,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s2)
     
      + 0.0467001001497738*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s1) + 0.0815612208302069*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s4,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s5,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s1) + 0.0355826743544121*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s2)
     
      + 0.0233500500748869*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s2)
     
      + 0.0181521140141954*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s4,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s4,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s5,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s2)
     
      + 0.0350250751123303*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s1) + 0.0611709156226551*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s4,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s4,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s5,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s5,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s2)
     
      + 0.0233500500748869*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s4,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s4,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s5,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s2)
     
      + 0.0233500500748869*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s4,s1) + 0.035582674354412*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s4,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s5,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s2)
     
      + 0.0350250751123303*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s1) + 0.0611709156226551*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s4,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s4,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s5,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s5,s2) + 0.242*delta(EOA,summer,l4)
     
      + 0.363*delta(EOA,summer,l5) + 0.242*delta(EOA,summer,l6) + 0.242*delta(EOA,summer,l7) + 0.363*delta(EOA,summer,l8) + 0.366*delta(EOA,spring-fall,l5) + 0.244*delta(EOA,spring-fall,l6)
     
      + 0.244*delta(EOA,spring-fall,l7) + alpha(fringe,CCGT,EOA) =E= 131.653873578002 ; (LHS = 131.653873578002)
     
Eq9_2(fringe,CCGT,SOA)..  0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s2)
     
      + 0.0467001001497737*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s1) + 0.0815612208302068*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,SOA,winter,l1,s4,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,SOA,winter,l1,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l1,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l1,s5,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s2)
     
      + 0.0467001001497737*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s1) + 0.0815612208302069*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,SOA,winter,l2,s4,s1) + 0.071165348708824*lambda_high(fringe,CCGT,SOA,winter,l2,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l2,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l2,s5,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s2)
     
      + 0.036304228028391*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s2)
     
      + 0.0467001001497737*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s1) + 0.0815612208302068*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s2)
     
      + 0.0363042280283909*lambda_high(fringe,CCGT,SOA,winter,l3,s4,s1) + 0.0711653487088241*lambda_high(fringe,CCGT,SOA,winter,l3,s4,s2)
     
      + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l3,s5,s1) + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l3,s5,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s1) + 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s2)
     
      + 0.0233500500748869*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l4,s4,s1) + 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l4,s4,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,SOA,winter,l4,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l4,s5,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s1) + 0.053374011531618*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s2)
     
      + 0.0350250751123303*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s1) + 0.0611709156226552*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,SOA,winter,l5,s4,s1) + 0.053374011531618*lambda_high(fringe,CCGT,SOA,winter,l5,s4,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,SOA,winter,l5,s5,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,SOA,winter,l5,s5,s2)
     
      + 0.00938466052309039*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s1) + 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s2)
     
      + 0.0233500500748868*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l6,s4,s1) + 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l6,s4,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,SOA,winter,l6,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l6,s5,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s1) + 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s1) + 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s2)
     
      + 0.0233500500748869*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s1) + 0.0407806104151034*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s2)
     
      + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l7,s4,s1) + 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l7,s4,s2)
     
      + 0.0093846605230904*lambda_high(fringe,CCGT,SOA,winter,l7,s5,s1) + 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l7,s5,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s2)
     
      + 0.0350250751123303*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s1) + 0.0611709156226551*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s2)
     
      + 0.0272281710212932*lambda_high(fringe,CCGT,SOA,winter,l8,s4,s1) + 0.0533740115316181*lambda_high(fringe,CCGT,SOA,winter,l8,s4,s2)
     
      + 0.0140769907846356*lambda_high(fringe,CCGT,SOA,winter,l8,s5,s1) + 0.0402228312949604*lambda_high(fringe,CCGT,SOA,winter,l8,s5,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s2)
     
      + 0.046317312443628*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s1) + 0.0808926862332379*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,SOA,summer,l1,s4,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l1,s4,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l1,s5,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l1,s5,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s2)
     
      + 0.0360066523888139*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s2)
     
      + 0.046317312443628*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s1) + 0.0808926862332379*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,SOA,summer,l2,s4,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l2,s4,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l2,s5,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l2,s5,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s2)
     
      + 0.046317312443628*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s1) + 0.0808926862332379*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s2)
     
      + 0.036006652388814*lambda_high(fringe,CCGT,SOA,summer,l3,s4,s1) + 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l3,s4,s2)
     
      + 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l3,s5,s1) + 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l3,s5,s2)
     
      + 0.00930773707617982*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s1) + 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s2)
     
      + 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s1) + 0.035291013089212*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s2)
     
      + 0.0231586562218139*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s1) + 0.0404463431166189*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s2)
     
      + 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l4,s4,s1) + 0.035291013089212*lambda_high(fringe,CCGT,SOA,summer,l4,s4,s2)
     
      + 0.00930773707617982*lambda_high(fringe,CCGT,SOA,summer,l4,s5,s1) + 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l4,s5,s2)
     
      + 0.0139616056142697*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s1) + 0.0398931359564772*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s2)
     
      + 0.0270049892916104*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s1) + 0.0529365196338179*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s2)
     
      + 0.034737984332721*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s1) + 0.0606695146749284*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s2)
     
      + 0.0270049892916106*lambda_high(fringe,CCGT,SOA,summer,l5,s4,s1) + 0.052936519633818*lambda_high(fringe,CCGT,SOA,summer,l5,s4,s2)
     
      + 0.0139616056142697*lambda_high(fringe,CCGT,SOA,summer,l5,s5,s1) + 0.0398931359564771*lambda_high(fringe,CCGT,SOA,summer,l5,s5,s2)
     
      + 0.00930773707617982*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s1) + 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s2)
     
      + 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s1) + 0.035291013089212*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s2) + 0.023158656221814*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s1)
     
      + 0.0404463431166189*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s2) + 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l6,s4,s1)
     
      + 0.035291013089212*lambda_high(fringe,CCGT,SOA,summer,l6,s4,s2) + 0.00930773707617981*lambda_high(fringe,CCGT,SOA,summer,l6,s5,s1)
     
      + 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l6,s5,s2) + 0.00930773707617981*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s1)
     
      + 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s2) + 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s1)
     
      + 0.0352910130892119*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s2) + 0.023158656221814*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s1)
     
      + 0.040446343116619*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s2) + 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l7,s4,s1)
     
      + 0.0352910130892119*lambda_high(fringe,CCGT,SOA,summer,l7,s4,s2) + 0.00930773707617983*lambda_high(fringe,CCGT,SOA,summer,l7,s5,s1)
     
      + 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l7,s5,s2) + 0.0139616056142697*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s1)
     
      + 0.0398931359564771*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s2) + 0.0270049892916105*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s1)
     
      + 0.0529365196338179*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s2) + 0.034737984332721*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s1)
     
      + 0.0606695146749285*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s2) + 0.0270049892916105*lambda_high(fringe,CCGT,SOA,summer,l8,s4,s1)
     
      + 0.0529365196338179*lambda_high(fringe,CCGT,SOA,summer,l8,s4,s2) + 0.0139616056142697*lambda_high(fringe,CCGT,SOA,summer,l8,s5,s1)
     
      + 0.0398931359564772*lambda_high(fringe,CCGT,SOA,summer,l8,s5,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s2) + 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s1)
     
      + 0.0711653487088241*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s2) + 0.0467001001497737*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s1)
     
      + 0.0815612208302069*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s2) + 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s4,s1)
     
      + 0.071165348708824*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s4,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s5,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s5,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s2) + 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s1)
     
      + 0.071165348708824*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s2) + 0.0467001001497738*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s1)
     
      + 0.0815612208302069*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s2) + 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s4,s1)
     
      + 0.0711653487088241*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s4,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s5,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s5,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s2) + 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s1)
     
      + 0.0711653487088241*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s2) + 0.0467001001497737*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s1)
     
      + 0.0815612208302068*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s2) + 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s4,s1)
     
      + 0.0711653487088241*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s4,s2) + 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s5,s1)
     
      + 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s5,s2) + 0.00938466052309039*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s1)
     
      + 0.026815220863307*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s1)
     
      + 0.0355826743544121*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s2) + 0.0233500500748869*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s1)
     
      + 0.0407806104151034*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s4,s1)
     
      + 0.035582674354412*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s4,s2) + 0.00938466052309038*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s5,s1)
     
      + 0.0268152208633069*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s5,s2) + 0.0140769907846356*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s1)
     
      + 0.0402228312949604*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s2) + 0.0272281710212932*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s1)
     
      + 0.0533740115316181*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s2) + 0.0350250751123303*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s1)
     
      + 0.0611709156226551*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s2) + 0.0272281710212932*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s4,s1)
     
      + 0.053374011531618*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s4,s2) + 0.0140769907846356*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s5,s1)
     
      + 0.0402228312949604*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s5,s2) + 0.00938466052309039*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s1)
     
      + 0.026815220863307*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s1)
     
      + 0.0355826743544121*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s2) + 0.0233500500748868*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s1)
     
      + 0.0407806104151034*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s4,s1)
     
      + 0.035582674354412*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s4,s2) + 0.00938466052309039*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s5,s1)
     
      + 0.026815220863307*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s5,s2) + 0.00938466052309038*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s1)
     
      + 0.0268152208633069*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s1)
     
      + 0.035582674354412*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s2) + 0.0233500500748869*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s1)
     
      + 0.0407806104151034*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s2) + 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s4,s1)
     
      + 0.035582674354412*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s4,s2) + 0.00938466052309041*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s5,s1)
     
      + 0.026815220863307*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s5,s2) + 0.0140769907846356*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s1)
     
      + 0.0402228312949604*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s2) + 0.0272281710212932*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s1)
     
      + 0.053374011531618*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s2) + 0.0350250751123303*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s1)
     
      + 0.0611709156226551*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s2) + 0.0272281710212932*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s4,s1)
     
      + 0.0533740115316181*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s4,s2) + 0.0140769907846356*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s5,s1)
     
      + 0.0402228312949605*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s5,s2) + 0.363*delta(SOA,summer,l5) + 0.242*delta(SOA,summer,l7) + 0.363*delta(SOA,summer,l8) + 0.366*delta(SOA,spring-fall,l5)
     
      + 0.244*delta(SOA,spring-fall,l7) + 0.366*delta(SOA,spring-fall,l8) + alpha(fringe,CCGT,SOA) =E= 131.653873578002 ; (LHS = 131.653873578002)
     
REMAINING 97 ENTRIES SKIPPED


---- Eq9_3  =E=  Equation (8.3)

Eq9_3(fringe,CCGT,COA)..  - 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l1,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l1,s1,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,COA,winter,l1,s2,s1) - 0.071165348708824*lambda_high(fringe,CCGT,COA,winter,l1,s2,s2)
     
      - 0.0467001001497737*lambda_high(fringe,CCGT,COA,winter,l1,s3,s1) - 0.0815612208302069*lambda_high(fringe,CCGT,COA,winter,l1,s3,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,COA,winter,l1,s4,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,COA,winter,l1,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l1,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l1,s5,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l2,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l2,s1,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,COA,winter,l2,s2,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,COA,winter,l2,s2,s2)
     
      - 0.0467001001497737*lambda_high(fringe,CCGT,COA,winter,l2,s3,s1) - 0.0815612208302069*lambda_high(fringe,CCGT,COA,winter,l2,s3,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,COA,winter,l2,s4,s1) - 0.071165348708824*lambda_high(fringe,CCGT,COA,winter,l2,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l2,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l2,s5,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l3,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l3,s1,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,COA,winter,l3,s2,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,COA,winter,l3,s2,s2)
     
      - 0.0467001001497737*lambda_high(fringe,CCGT,COA,winter,l3,s3,s1) - 0.0815612208302068*lambda_high(fringe,CCGT,COA,winter,l3,s3,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,COA,winter,l3,s4,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,COA,winter,l3,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,COA,winter,l3,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,COA,winter,l3,s5,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,COA,winter,l4,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l4,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l4,s2,s1) - 0.035582674354412*lambda_high(fringe,CCGT,COA,winter,l4,s2,s2)
     
      - 0.0233500500748868*lambda_high(fringe,CCGT,COA,winter,l4,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,COA,winter,l4,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l4,s4,s1) - 0.035582674354412*lambda_high(fringe,CCGT,COA,winter,l4,s4,s2)
     
      - 0.00938466052309041*lambda_high(fringe,CCGT,COA,winter,l4,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l4,s5,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,COA,winter,l5,s1,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,COA,winter,l5,s1,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,COA,winter,l5,s2,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,COA,winter,l5,s2,s2)
     
      - 0.0350250751123303*lambda_high(fringe,CCGT,COA,winter,l5,s3,s1) - 0.0611709156226551*lambda_high(fringe,CCGT,COA,winter,l5,s3,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,COA,winter,l5,s4,s1) - 0.053374011531618*lambda_high(fringe,CCGT,COA,winter,l5,s4,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,COA,winter,l5,s5,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,COA,winter,l5,s5,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,COA,winter,l6,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l6,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l6,s2,s1) - 0.0355826743544121*lambda_high(fringe,CCGT,COA,winter,l6,s2,s2)
     
      - 0.0233500500748868*lambda_high(fringe,CCGT,COA,winter,l6,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,COA,winter,l6,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l6,s4,s1) - 0.0355826743544121*lambda_high(fringe,CCGT,COA,winter,l6,s4,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,COA,winter,l6,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l6,s5,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,COA,winter,l7,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l7,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l7,s2,s1) - 0.0355826743544121*lambda_high(fringe,CCGT,COA,winter,l7,s2,s2)
     
      - 0.0233500500748868*lambda_high(fringe,CCGT,COA,winter,l7,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,COA,winter,l7,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,COA,winter,l7,s4,s1) - 0.0355826743544121*lambda_high(fringe,CCGT,COA,winter,l7,s4,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,COA,winter,l7,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,COA,winter,l7,s5,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,COA,winter,l8,s1,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,COA,winter,l8,s1,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,COA,winter,l8,s2,s1) - 0.053374011531618*lambda_high(fringe,CCGT,COA,winter,l8,s2,s2)
     
      - 0.0350250751123303*lambda_high(fringe,CCGT,COA,winter,l8,s3,s1) - 0.0611709156226551*lambda_high(fringe,CCGT,COA,winter,l8,s3,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,COA,winter,l8,s4,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,COA,winter,l8,s4,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,COA,winter,l8,s5,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,COA,winter,l8,s5,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,COA,summer,l1,s1,s1) - 0.0531908479419696*lambda_high(fringe,CCGT,COA,summer,l1,s1,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,COA,summer,l1,s2,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,COA,summer,l1,s2,s2)
     
      - 0.046317312443628*lambda_high(fringe,CCGT,COA,summer,l1,s3,s1) - 0.0808926862332379*lambda_high(fringe,CCGT,COA,summer,l1,s3,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,COA,summer,l1,s4,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,COA,summer,l1,s4,s2)
     
      - 0.0186154741523597*lambda_high(fringe,CCGT,COA,summer,l1,s5,s1) - 0.0531908479419696*lambda_high(fringe,CCGT,COA,summer,l1,s5,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,COA,summer,l2,s1,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,COA,summer,l2,s1,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,COA,summer,l2,s2,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,COA,summer,l2,s2,s2)
     
      - 0.046317312443628*lambda_high(fringe,CCGT,COA,summer,l2,s3,s1) - 0.0808926862332379*lambda_high(fringe,CCGT,COA,summer,l2,s3,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,COA,summer,l2,s4,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,COA,summer,l2,s4,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,COA,summer,l2,s5,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,COA,summer,l2,s5,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,COA,summer,l3,s1,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,COA,summer,l3,s1,s2)
     
      - 0.0360066523888139*lambda_high(fringe,CCGT,COA,summer,l3,s2,s1) - 0.0705820261784238*lambda_high(fringe,CCGT,COA,summer,l3,s2,s2)
     
      - 0.046317312443628*lambda_high(fringe,CCGT,COA,summer,l3,s3,s1) - 0.0808926862332379*lambda_high(fringe,CCGT,COA,summer,l3,s3,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,COA,summer,l3,s4,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,COA,summer,l3,s4,s2)
     
      - 0.0186154741523597*lambda_high(fringe,CCGT,COA,summer,l3,s5,s1) - 0.0531908479419696*lambda_high(fringe,CCGT,COA,summer,l3,s5,s2)
     
      - 0.00930773707617982*lambda_high(fringe,CCGT,COA,summer,l4,s1,s1) - 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l4,s1,s2)
     
      - 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l4,s2,s1) - 0.035291013089212*lambda_high(fringe,CCGT,COA,summer,l4,s2,s2) - 0.023158656221814*lambda_high(fringe,CCGT,COA,summer,l4,s3,s1)
     
      - 0.040446343116619*lambda_high(fringe,CCGT,COA,summer,l4,s3,s2) - 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l4,s4,s1)
     
      - 0.0352910130892119*lambda_high(fringe,CCGT,COA,summer,l4,s4,s2) - 0.00930773707617982*lambda_high(fringe,CCGT,COA,summer,l4,s5,s1)
     
      - 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l4,s5,s2) - 0.0139616056142697*lambda_high(fringe,CCGT,COA,summer,l5,s1,s1)
     
      - 0.0398931359564772*lambda_high(fringe,CCGT,COA,summer,l5,s1,s2) - 0.0270049892916104*lambda_high(fringe,CCGT,COA,summer,l5,s2,s1)
     
      - 0.0529365196338179*lambda_high(fringe,CCGT,COA,summer,l5,s2,s2) - 0.0347379843327211*lambda_high(fringe,CCGT,COA,summer,l5,s3,s1)
     
      - 0.0606695146749285*lambda_high(fringe,CCGT,COA,summer,l5,s3,s2) - 0.0270049892916105*lambda_high(fringe,CCGT,COA,summer,l5,s4,s1)
     
      - 0.0529365196338179*lambda_high(fringe,CCGT,COA,summer,l5,s4,s2) - 0.0139616056142697*lambda_high(fringe,CCGT,COA,summer,l5,s5,s1)
     
      - 0.0398931359564771*lambda_high(fringe,CCGT,COA,summer,l5,s5,s2) - 0.00930773707617981*lambda_high(fringe,CCGT,COA,summer,l6,s1,s1)
     
      - 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l6,s1,s2) - 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l6,s2,s1)
     
      - 0.035291013089212*lambda_high(fringe,CCGT,COA,summer,l6,s2,s2) - 0.023158656221814*lambda_high(fringe,CCGT,COA,summer,l6,s3,s1) - 0.040446343116619*lambda_high(fringe,CCGT,COA,summer,l6,s3,s2)
     
      - 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l6,s4,s1) - 0.0352910130892119*lambda_high(fringe,CCGT,COA,summer,l6,s4,s2)
     
      - 0.00930773707617981*lambda_high(fringe,CCGT,COA,summer,l6,s5,s1) - 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l6,s5,s2)
     
      - 0.00930773707617981*lambda_high(fringe,CCGT,COA,summer,l7,s1,s1) - 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l7,s1,s2)
     
      - 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l7,s2,s1) - 0.0352910130892119*lambda_high(fringe,CCGT,COA,summer,l7,s2,s2)
     
      - 0.023158656221814*lambda_high(fringe,CCGT,COA,summer,l7,s3,s1) - 0.040446343116619*lambda_high(fringe,CCGT,COA,summer,l7,s3,s2) - 0.018003326194407*lambda_high(fringe,CCGT,COA,summer,l7,s4,s1)
     
      - 0.0352910130892119*lambda_high(fringe,CCGT,COA,summer,l7,s4,s2) - 0.00930773707617981*lambda_high(fringe,CCGT,COA,summer,l7,s5,s1)
     
      - 0.0265954239709848*lambda_high(fringe,CCGT,COA,summer,l7,s5,s2) - 0.0139616056142697*lambda_high(fringe,CCGT,COA,summer,l8,s1,s1)
     
      - 0.0398931359564771*lambda_high(fringe,CCGT,COA,summer,l8,s1,s2) - 0.0270049892916105*lambda_high(fringe,CCGT,COA,summer,l8,s2,s1)
     
      - 0.0529365196338179*lambda_high(fringe,CCGT,COA,summer,l8,s2,s2) - 0.034737984332721*lambda_high(fringe,CCGT,COA,summer,l8,s3,s1)
     
      - 0.0606695146749284*lambda_high(fringe,CCGT,COA,summer,l8,s3,s2) - 0.0270049892916105*lambda_high(fringe,CCGT,COA,summer,l8,s4,s1)
     
      - 0.0529365196338179*lambda_high(fringe,CCGT,COA,summer,l8,s4,s2) - 0.0139616056142697*lambda_high(fringe,CCGT,COA,summer,l8,s5,s1)
     
      - 0.0398931359564771*lambda_high(fringe,CCGT,COA,summer,l8,s5,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1,s2) - 0.0363042280283909*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s1)
     
      - 0.0711653487088241*lambda_high(fringe,CCGT,COA,spring-fall,l1,s2,s2) - 0.0467001001497737*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s1)
     
      - 0.0815612208302068*lambda_high(fringe,CCGT,COA,spring-fall,l1,s3,s2) - 0.036304228028391*lambda_high(fringe,CCGT,COA,spring-fall,l1,s4,s1)
     
      - 0.0711653487088241*lambda_high(fringe,CCGT,COA,spring-fall,l1,s4,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l1,s5,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l1,s5,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1,s2) - 0.0363042280283909*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s1)
     
      - 0.0711653487088241*lambda_high(fringe,CCGT,COA,spring-fall,l2,s2,s2) - 0.0467001001497737*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s1)
     
      - 0.0815612208302068*lambda_high(fringe,CCGT,COA,spring-fall,l2,s3,s2) - 0.036304228028391*lambda_high(fringe,CCGT,COA,spring-fall,l2,s4,s1)
     
      - 0.0711653487088241*lambda_high(fringe,CCGT,COA,spring-fall,l2,s4,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l2,s5,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l2,s5,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1,s2) - 0.036304228028391*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s1)
     
      - 0.0711653487088241*lambda_high(fringe,CCGT,COA,spring-fall,l3,s2,s2) - 0.0467001001497737*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s1)
     
      - 0.0815612208302069*lambda_high(fringe,CCGT,COA,spring-fall,l3,s3,s2) - 0.0363042280283909*lambda_high(fringe,CCGT,COA,spring-fall,l3,s4,s1)
     
      - 0.071165348708824*lambda_high(fringe,CCGT,COA,spring-fall,l3,s4,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,COA,spring-fall,l3,s5,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,COA,spring-fall,l3,s5,s2) - 0.00938466052309039*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s1)
     
      - 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s1)
     
      - 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l4,s2,s2) - 0.0233500500748869*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s1)
     
      - 0.0407806104151034*lambda_high(fringe,CCGT,COA,spring-fall,l4,s3,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l4,s4,s1)
     
      - 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l4,s4,s2) - 0.00938466052309039*lambda_high(fringe,CCGT,COA,spring-fall,l4,s5,s1)
     
      - 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l4,s5,s2) - 0.0140769907846356*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s1)
     
      - 0.0402228312949604*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1,s2) - 0.0272281710212932*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s1)
     
      - 0.053374011531618*lambda_high(fringe,CCGT,COA,spring-fall,l5,s2,s2) - 0.0350250751123303*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s1)
     
      - 0.0611709156226551*lambda_high(fringe,CCGT,COA,spring-fall,l5,s3,s2) - 0.0272281710212932*lambda_high(fringe,CCGT,COA,spring-fall,l5,s4,s1)
     
      - 0.0533740115316181*lambda_high(fringe,CCGT,COA,spring-fall,l5,s4,s2) - 0.0140769907846356*lambda_high(fringe,CCGT,COA,spring-fall,l5,s5,s1)
     
      - 0.0402228312949604*lambda_high(fringe,CCGT,COA,spring-fall,l5,s5,s2) - 0.00938466052309039*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s1)
     
      - 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s1)
     
      - 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l6,s2,s2) - 0.0233500500748869*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s1)
     
      - 0.0407806104151034*lambda_high(fringe,CCGT,COA,spring-fall,l6,s3,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l6,s4,s1)
     
      - 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l6,s4,s2) - 0.0093846605230904*lambda_high(fringe,CCGT,COA,spring-fall,l6,s5,s1)
     
      - 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l6,s5,s2) - 0.0093846605230904*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s1)
     
      - 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s1)
     
      - 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l7,s2,s2) - 0.0233500500748868*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s1)
     
      - 0.0407806104151034*lambda_high(fringe,CCGT,COA,spring-fall,l7,s3,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,COA,spring-fall,l7,s4,s1)
     
      - 0.035582674354412*lambda_high(fringe,CCGT,COA,spring-fall,l7,s4,s2) - 0.00938466052309039*lambda_high(fringe,CCGT,COA,spring-fall,l7,s5,s1)
     
      - 0.026815220863307*lambda_high(fringe,CCGT,COA,spring-fall,l7,s5,s2) - 0.0140769907846356*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s1)
     
      - 0.0402228312949604*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1,s2) - 0.0272281710212932*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s1)
     
      - 0.0533740115316181*lambda_high(fringe,CCGT,COA,spring-fall,l8,s2,s2) - 0.0350250751123303*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s1)
     
      - 0.0611709156226551*lambda_high(fringe,CCGT,COA,spring-fall,l8,s3,s2) - 0.0272281710212932*lambda_high(fringe,CCGT,COA,spring-fall,l8,s4,s1)
     
      - 0.0533740115316181*lambda_high(fringe,CCGT,COA,spring-fall,l8,s4,s2) - 0.0140769907846356*lambda_high(fringe,CCGT,COA,spring-fall,l8,s5,s1)
     
      - 0.0402228312949604*lambda_high(fringe,CCGT,COA,spring-fall,l8,s5,s2) - 0.363*delta(COA,summer,l5) - 0.242*delta(COA,summer,l6) - 0.242*delta(COA,summer,l7) - 0.363*delta(COA,summer,l8)
     
      - 0.366*delta(COA,spring-fall,l5) - 0.244*delta(COA,spring-fall,l6) - 0.244*delta(COA,spring-fall,l7) - 0.366*delta(COA,spring-fall,l8) - eta_high(fringe,CCGT,COA) + eta_low(fringe,CCGT,COA)
      =E= -0.474612642199789 ; (LHS = -0.474612642199787)
     
Eq9_3(fringe,CCGT,EOA)..  - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l1,s1,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s1) - 0.071165348708824*lambda_high(fringe,CCGT,EOA,winter,l1,s2,s2)
     
      - 0.0467001001497738*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s1) - 0.0815612208302069*lambda_high(fringe,CCGT,EOA,winter,l1,s3,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,EOA,winter,l1,s4,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,winter,l1,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,winter,l1,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l1,s5,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l2,s1,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,winter,l2,s2,s2)
     
      - 0.0467001001497736*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s1) - 0.0815612208302067*lambda_high(fringe,CCGT,EOA,winter,l2,s3,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,EOA,winter,l2,s4,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,winter,l2,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,winter,l2,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l2,s5,s2)
     
      - 0.0187693210461807*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l3,s1,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,winter,l3,s2,s2)
     
      - 0.0467001001497737*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s1) - 0.0815612208302068*lambda_high(fringe,CCGT,EOA,winter,l3,s3,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,EOA,winter,l3,s4,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,winter,l3,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,winter,l3,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,winter,l3,s5,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l4,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l4,s2,s2)
     
      - 0.0233500500748869*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,EOA,winter,l4,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,EOA,winter,l4,s4,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l4,s4,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l4,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l4,s5,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,EOA,winter,l5,s1,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,EOA,winter,l5,s2,s2)
     
      - 0.0350250751123303*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s1) - 0.0611709156226551*lambda_high(fringe,CCGT,EOA,winter,l5,s3,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,EOA,winter,l5,s4,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,EOA,winter,l5,s4,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,EOA,winter,l5,s5,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,EOA,winter,l5,s5,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l6,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l6,s2,s2)
     
      - 0.0233500500748869*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,EOA,winter,l6,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,EOA,winter,l6,s4,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l6,s4,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l6,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l6,s5,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l7,s1,s2)
     
      - 0.0181521140141954*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l7,s2,s2)
     
      - 0.0233500500748869*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s1) - 0.0407806104151035*lambda_high(fringe,CCGT,EOA,winter,l7,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,EOA,winter,l7,s4,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,winter,l7,s4,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,EOA,winter,l7,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,winter,l7,s5,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,EOA,winter,l8,s1,s2)
     
      - 0.0272281710212933*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,EOA,winter,l8,s2,s2)
     
      - 0.0350250751123302*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s1) - 0.0611709156226551*lambda_high(fringe,CCGT,EOA,winter,l8,s3,s2)
     
      - 0.0272281710212933*lambda_high(fringe,CCGT,EOA,winter,l8,s4,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,EOA,winter,l8,s4,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,EOA,winter,l8,s5,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,EOA,winter,l8,s5,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s1) - 0.0531908479419696*lambda_high(fringe,CCGT,EOA,summer,l1,s1,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,EOA,summer,l1,s2,s2)
     
      - 0.046317312443628*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s1) - 0.0808926862332379*lambda_high(fringe,CCGT,EOA,summer,l1,s3,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,EOA,summer,l1,s4,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,EOA,summer,l1,s4,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l1,s5,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,EOA,summer,l1,s5,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,EOA,summer,l2,s1,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,EOA,summer,l2,s2,s2)
     
      - 0.0463173124436281*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s1) - 0.080892686233238*lambda_high(fringe,CCGT,EOA,summer,l2,s3,s2)
     
      - 0.0360066523888139*lambda_high(fringe,CCGT,EOA,summer,l2,s4,s1) - 0.0705820261784238*lambda_high(fringe,CCGT,EOA,summer,l2,s4,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l2,s5,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,EOA,summer,l2,s5,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,EOA,summer,l3,s1,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,EOA,summer,l3,s2,s2)
     
      - 0.0463173124436281*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s1) - 0.0808926862332379*lambda_high(fringe,CCGT,EOA,summer,l3,s3,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,EOA,summer,l3,s4,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,EOA,summer,l3,s4,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,EOA,summer,l3,s5,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,EOA,summer,l3,s5,s2)
     
      - 0.00930773707617981*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s1) - 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l4,s1,s2)
     
      - 0.018003326194407*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s1) - 0.0352910130892119*lambda_high(fringe,CCGT,EOA,summer,l4,s2,s2)
     
      - 0.0231586562218141*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s1) - 0.040446343116619*lambda_high(fringe,CCGT,EOA,summer,l4,s3,s2)
     
      - 0.0180033261944069*lambda_high(fringe,CCGT,EOA,summer,l4,s4,s1) - 0.0352910130892119*lambda_high(fringe,CCGT,EOA,summer,l4,s4,s2)
     
      - 0.00930773707617983*lambda_high(fringe,CCGT,EOA,summer,l4,s5,s1) - 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l4,s5,s2)
     
      - 0.0139616056142697*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s1) - 0.0398931359564772*lambda_high(fringe,CCGT,EOA,summer,l5,s1,s2)
     
      - 0.0270049892916105*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s1) - 0.0529365196338179*lambda_high(fringe,CCGT,EOA,summer,l5,s2,s2)
     
      - 0.034737984332721*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s1) - 0.0606695146749285*lambda_high(fringe,CCGT,EOA,summer,l5,s3,s2)
     
      - 0.0270049892916105*lambda_high(fringe,CCGT,EOA,summer,l5,s4,s1) - 0.0529365196338179*lambda_high(fringe,CCGT,EOA,summer,l5,s4,s2)
     
      - 0.0139616056142697*lambda_high(fringe,CCGT,EOA,summer,l5,s5,s1) - 0.0398931359564772*lambda_high(fringe,CCGT,EOA,summer,l5,s5,s2)
     
      - 0.00930773707617982*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s1) - 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l6,s1,s2)
     
      - 0.018003326194407*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s1) - 0.035291013089212*lambda_high(fringe,CCGT,EOA,summer,l6,s2,s2) - 0.023158656221814*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s1)
     
      - 0.0404463431166189*lambda_high(fringe,CCGT,EOA,summer,l6,s3,s2) - 0.018003326194407*lambda_high(fringe,CCGT,EOA,summer,l6,s4,s1)
     
      - 0.0352910130892119*lambda_high(fringe,CCGT,EOA,summer,l6,s4,s2) - 0.00930773707617981*lambda_high(fringe,CCGT,EOA,summer,l6,s5,s1)
     
      - 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l6,s5,s2) - 0.00930773707617981*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s1)
     
      - 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l7,s1,s2) - 0.018003326194407*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s1)
     
      - 0.035291013089212*lambda_high(fringe,CCGT,EOA,summer,l7,s2,s2) - 0.023158656221814*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s1) - 0.040446343116619*lambda_high(fringe,CCGT,EOA,summer,l7,s3,s2)
     
      - 0.0180033261944069*lambda_high(fringe,CCGT,EOA,summer,l7,s4,s1) - 0.0352910130892119*lambda_high(fringe,CCGT,EOA,summer,l7,s4,s2)
     
      - 0.00930773707617982*lambda_high(fringe,CCGT,EOA,summer,l7,s5,s1) - 0.0265954239709848*lambda_high(fringe,CCGT,EOA,summer,l7,s5,s2)
     
      - 0.0139616056142697*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s1) - 0.0398931359564771*lambda_high(fringe,CCGT,EOA,summer,l8,s1,s2)
     
      - 0.0270049892916105*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s1) - 0.0529365196338179*lambda_high(fringe,CCGT,EOA,summer,l8,s2,s2)
     
      - 0.034737984332721*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s1) - 0.0606695146749285*lambda_high(fringe,CCGT,EOA,summer,l8,s3,s2)
     
      - 0.0270049892916105*lambda_high(fringe,CCGT,EOA,summer,l8,s4,s1) - 0.0529365196338179*lambda_high(fringe,CCGT,EOA,summer,l8,s4,s2)
     
      - 0.0139616056142698*lambda_high(fringe,CCGT,EOA,summer,l8,s5,s1) - 0.0398931359564772*lambda_high(fringe,CCGT,EOA,summer,l8,s5,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s2,s2)
     
      - 0.0467001001497737*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s1) - 0.0815612208302069*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s3,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s4,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s5,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s2,s2)
     
      - 0.0467001001497737*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s1) - 0.0815612208302068*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s3,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s4,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s5,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s2,s2)
     
      - 0.0467001001497738*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s1) - 0.0815612208302069*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s3,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s4,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s5,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s1) - 0.0355826743544121*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s2,s2)
     
      - 0.0233500500748869*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s3,s2)
     
      - 0.0181521140141954*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s4,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s4,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s5,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s2,s2)
     
      - 0.0350250751123303*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s1) - 0.0611709156226551*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s3,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s4,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s4,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s5,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s5,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s2,s2)
     
      - 0.0233500500748869*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s4,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s4,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s5,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s2,s2)
     
      - 0.0233500500748869*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s4,s1) - 0.035582674354412*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s4,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s5,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s2,s2)
     
      - 0.0350250751123303*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s1) - 0.0611709156226551*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s3,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s4,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s4,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s5,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s5,s2) - 0.242*delta(EOA,summer,l4)
     
      - 0.363*delta(EOA,summer,l5) - 0.242*delta(EOA,summer,l6) - 0.242*delta(EOA,summer,l7) - 0.363*delta(EOA,summer,l8) - 0.366*delta(EOA,spring-fall,l5) - 0.244*delta(EOA,spring-fall,l6)
     
      - 0.244*delta(EOA,spring-fall,l7) - eta_high(fringe,CCGT,EOA) + eta_low(fringe,CCGT,EOA) =E= -0.474612642199789 ; (LHS = -0.474612642199759)
     
Eq9_3(fringe,CCGT,SOA)..  - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l1,s1,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,SOA,winter,l1,s2,s2)
     
      - 0.0467001001497737*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s1) - 0.0815612208302068*lambda_high(fringe,CCGT,SOA,winter,l1,s3,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,SOA,winter,l1,s4,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,SOA,winter,l1,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l1,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l1,s5,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l2,s1,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,SOA,winter,l2,s2,s2)
     
      - 0.0467001001497737*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s1) - 0.0815612208302069*lambda_high(fringe,CCGT,SOA,winter,l2,s3,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,SOA,winter,l2,s4,s1) - 0.071165348708824*lambda_high(fringe,CCGT,SOA,winter,l2,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l2,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l2,s5,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l3,s1,s2)
     
      - 0.036304228028391*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,SOA,winter,l3,s2,s2)
     
      - 0.0467001001497737*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s1) - 0.0815612208302068*lambda_high(fringe,CCGT,SOA,winter,l3,s3,s2)
     
      - 0.0363042280283909*lambda_high(fringe,CCGT,SOA,winter,l3,s4,s1) - 0.0711653487088241*lambda_high(fringe,CCGT,SOA,winter,l3,s4,s2)
     
      - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,winter,l3,s5,s1) - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,winter,l3,s5,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l4,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s1) - 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l4,s2,s2)
     
      - 0.0233500500748869*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,SOA,winter,l4,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l4,s4,s1) - 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l4,s4,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,SOA,winter,l4,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l4,s5,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,SOA,winter,l5,s1,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s1) - 0.053374011531618*lambda_high(fringe,CCGT,SOA,winter,l5,s2,s2)
     
      - 0.0350250751123303*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s1) - 0.0611709156226552*lambda_high(fringe,CCGT,SOA,winter,l5,s3,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,SOA,winter,l5,s4,s1) - 0.053374011531618*lambda_high(fringe,CCGT,SOA,winter,l5,s4,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,SOA,winter,l5,s5,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,SOA,winter,l5,s5,s2)
     
      - 0.00938466052309039*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l6,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s1) - 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l6,s2,s2)
     
      - 0.0233500500748868*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,SOA,winter,l6,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l6,s4,s1) - 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l6,s4,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,SOA,winter,l6,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l6,s5,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s1) - 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l7,s1,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s1) - 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l7,s2,s2)
     
      - 0.0233500500748869*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s1) - 0.0407806104151034*lambda_high(fringe,CCGT,SOA,winter,l7,s3,s2)
     
      - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,winter,l7,s4,s1) - 0.035582674354412*lambda_high(fringe,CCGT,SOA,winter,l7,s4,s2)
     
      - 0.0093846605230904*lambda_high(fringe,CCGT,SOA,winter,l7,s5,s1) - 0.026815220863307*lambda_high(fringe,CCGT,SOA,winter,l7,s5,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,SOA,winter,l8,s1,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,SOA,winter,l8,s2,s2)
     
      - 0.0350250751123303*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s1) - 0.0611709156226551*lambda_high(fringe,CCGT,SOA,winter,l8,s3,s2)
     
      - 0.0272281710212932*lambda_high(fringe,CCGT,SOA,winter,l8,s4,s1) - 0.0533740115316181*lambda_high(fringe,CCGT,SOA,winter,l8,s4,s2)
     
      - 0.0140769907846356*lambda_high(fringe,CCGT,SOA,winter,l8,s5,s1) - 0.0402228312949604*lambda_high(fringe,CCGT,SOA,winter,l8,s5,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l1,s1,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l1,s2,s2)
     
      - 0.046317312443628*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s1) - 0.0808926862332379*lambda_high(fringe,CCGT,SOA,summer,l1,s3,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,SOA,summer,l1,s4,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l1,s4,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l1,s5,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l1,s5,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l2,s1,s2)
     
      - 0.0360066523888139*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l2,s2,s2)
     
      - 0.046317312443628*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s1) - 0.0808926862332379*lambda_high(fringe,CCGT,SOA,summer,l2,s3,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,SOA,summer,l2,s4,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l2,s4,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l2,s5,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l2,s5,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l3,s1,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l3,s2,s2)
     
      - 0.046317312443628*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s1) - 0.0808926862332379*lambda_high(fringe,CCGT,SOA,summer,l3,s3,s2)
     
      - 0.036006652388814*lambda_high(fringe,CCGT,SOA,summer,l3,s4,s1) - 0.0705820261784239*lambda_high(fringe,CCGT,SOA,summer,l3,s4,s2)
     
      - 0.0186154741523596*lambda_high(fringe,CCGT,SOA,summer,l3,s5,s1) - 0.0531908479419695*lambda_high(fringe,CCGT,SOA,summer,l3,s5,s2)
     
      - 0.00930773707617982*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s1) - 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l4,s1,s2)
     
      - 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s1) - 0.035291013089212*lambda_high(fringe,CCGT,SOA,summer,l4,s2,s2)
     
      - 0.0231586562218139*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s1) - 0.0404463431166189*lambda_high(fringe,CCGT,SOA,summer,l4,s3,s2)
     
      - 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l4,s4,s1) - 0.035291013089212*lambda_high(fringe,CCGT,SOA,summer,l4,s4,s2)
     
      - 0.00930773707617982*lambda_high(fringe,CCGT,SOA,summer,l4,s5,s1) - 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l4,s5,s2)
     
      - 0.0139616056142697*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s1) - 0.0398931359564772*lambda_high(fringe,CCGT,SOA,summer,l5,s1,s2)
     
      - 0.0270049892916104*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s1) - 0.0529365196338179*lambda_high(fringe,CCGT,SOA,summer,l5,s2,s2)
     
      - 0.034737984332721*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s1) - 0.0606695146749284*lambda_high(fringe,CCGT,SOA,summer,l5,s3,s2)
     
      - 0.0270049892916106*lambda_high(fringe,CCGT,SOA,summer,l5,s4,s1) - 0.052936519633818*lambda_high(fringe,CCGT,SOA,summer,l5,s4,s2)
     
      - 0.0139616056142697*lambda_high(fringe,CCGT,SOA,summer,l5,s5,s1) - 0.0398931359564771*lambda_high(fringe,CCGT,SOA,summer,l5,s5,s2)
     
      - 0.00930773707617982*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s1) - 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l6,s1,s2)
     
      - 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s1) - 0.035291013089212*lambda_high(fringe,CCGT,SOA,summer,l6,s2,s2) - 0.023158656221814*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s1)
     
      - 0.0404463431166189*lambda_high(fringe,CCGT,SOA,summer,l6,s3,s2) - 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l6,s4,s1)
     
      - 0.035291013089212*lambda_high(fringe,CCGT,SOA,summer,l6,s4,s2) - 0.00930773707617981*lambda_high(fringe,CCGT,SOA,summer,l6,s5,s1)
     
      - 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l6,s5,s2) - 0.00930773707617981*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s1)
     
      - 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l7,s1,s2) - 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s1)
     
      - 0.0352910130892119*lambda_high(fringe,CCGT,SOA,summer,l7,s2,s2) - 0.023158656221814*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s1)
     
      - 0.040446343116619*lambda_high(fringe,CCGT,SOA,summer,l7,s3,s2) - 0.018003326194407*lambda_high(fringe,CCGT,SOA,summer,l7,s4,s1)
     
      - 0.0352910130892119*lambda_high(fringe,CCGT,SOA,summer,l7,s4,s2) - 0.00930773707617983*lambda_high(fringe,CCGT,SOA,summer,l7,s5,s1)
     
      - 0.0265954239709848*lambda_high(fringe,CCGT,SOA,summer,l7,s5,s2) - 0.0139616056142697*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s1)
     
      - 0.0398931359564771*lambda_high(fringe,CCGT,SOA,summer,l8,s1,s2) - 0.0270049892916105*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s1)
     
      - 0.0529365196338179*lambda_high(fringe,CCGT,SOA,summer,l8,s2,s2) - 0.034737984332721*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s1)
     
      - 0.0606695146749285*lambda_high(fringe,CCGT,SOA,summer,l8,s3,s2) - 0.0270049892916105*lambda_high(fringe,CCGT,SOA,summer,l8,s4,s1)
     
      - 0.0529365196338179*lambda_high(fringe,CCGT,SOA,summer,l8,s4,s2) - 0.0139616056142697*lambda_high(fringe,CCGT,SOA,summer,l8,s5,s1)
     
      - 0.0398931359564772*lambda_high(fringe,CCGT,SOA,summer,l8,s5,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1,s2) - 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s1)
     
      - 0.0711653487088241*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s2,s2) - 0.0467001001497737*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s1)
     
      - 0.0815612208302069*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s3,s2) - 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s4,s1)
     
      - 0.071165348708824*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s4,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s5,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s5,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1,s2) - 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s1)
     
      - 0.071165348708824*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s2,s2) - 0.0467001001497738*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s1)
     
      - 0.0815612208302069*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s3,s2) - 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s4,s1)
     
      - 0.0711653487088241*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s4,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s5,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s5,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1,s2) - 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s1)
     
      - 0.0711653487088241*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s2,s2) - 0.0467001001497737*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s1)
     
      - 0.0815612208302068*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s3,s2) - 0.0363042280283909*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s4,s1)
     
      - 0.0711653487088241*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s4,s2) - 0.0187693210461808*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s5,s1)
     
      - 0.0536304417266139*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s5,s2) - 0.00938466052309039*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s1)
     
      - 0.026815220863307*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s1)
     
      - 0.0355826743544121*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s2,s2) - 0.0233500500748869*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s1)
     
      - 0.0407806104151034*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s3,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s4,s1)
     
      - 0.035582674354412*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s4,s2) - 0.00938466052309038*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s5,s1)
     
      - 0.0268152208633069*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s5,s2) - 0.0140769907846356*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s1)
     
      - 0.0402228312949604*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1,s2) - 0.0272281710212932*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s1)
     
      - 0.0533740115316181*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s2,s2) - 0.0350250751123303*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s1)
     
      - 0.0611709156226551*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s3,s2) - 0.0272281710212932*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s4,s1)
     
      - 0.053374011531618*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s4,s2) - 0.0140769907846356*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s5,s1)
     
      - 0.0402228312949604*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s5,s2) - 0.00938466052309039*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s1)
     
      - 0.026815220863307*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s1)
     
      - 0.0355826743544121*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s2,s2) - 0.0233500500748868*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s1)
     
      - 0.0407806104151034*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s3,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s4,s1)
     
      - 0.035582674354412*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s4,s2) - 0.00938466052309039*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s5,s1)
     
      - 0.026815220863307*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s5,s2) - 0.00938466052309038*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s1)
     
      - 0.0268152208633069*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s1)
     
      - 0.035582674354412*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s2,s2) - 0.0233500500748869*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s1)
     
      - 0.0407806104151034*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s3,s2) - 0.0181521140141955*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s4,s1)
     
      - 0.035582674354412*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s4,s2) - 0.00938466052309041*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s5,s1)
     
      - 0.026815220863307*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s5,s2) - 0.0140769907846356*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s1)
     
      - 0.0402228312949604*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1,s2) - 0.0272281710212932*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s1)
     
      - 0.053374011531618*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s2,s2) - 0.0350250751123303*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s1)
     
      - 0.0611709156226551*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s3,s2) - 0.0272281710212932*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s4,s1)
     
      - 0.0533740115316181*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s4,s2) - 0.0140769907846356*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s5,s1)
     
      - 0.0402228312949605*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s5,s2) - 0.363*delta(SOA,summer,l5) - 0.242*delta(SOA,summer,l7) - 0.363*delta(SOA,summer,l8) - 0.366*delta(SOA,spring-fall,l5)
     
      - 0.244*delta(SOA,spring-fall,l7) - 0.366*delta(SOA,spring-fall,l8) - eta_high(fringe,CCGT,SOA) + eta_low(fringe,CCGT,SOA) =E= -0.474612642199789 ; (LHS = -0.474612642199787)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_4  =E=  Equation (8.4)

                NONE


---- Eq9_5  =G=  

Eq9_5(fringe,CCGT,COA,winter,l1,s1,s1)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s1,s1) =G= 0 ; (LHS = 5.98482001702589)
     
Eq9_5(fringe,CCGT,COA,winter,l1,s1,s2)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s1,s2) =G= 0 ; (LHS = 5.84022564850759)
     
Eq9_5(fringe,CCGT,COA,winter,l1,s2,s1)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s2,s1) =G= 0 ; (LHS = 4.83901564672679)
     
REMAINING 19197 ENTRIES SKIPPED


---- Eq9_5a  =G=  

Eq9_5a(fringe,GTtoCC,COA)..  - inv(fringe,GTtoCC,COA) - ret(fringe,GT,COA) =G= -1.116 ; (LHS = -0.558)
     
Eq9_5a(fringe,GTtoCC,EOA)..  - inv(fringe,GTtoCC,EOA) - ret(fringe,GT,EOA) =G= -3.7085 ; (LHS = -1.85425)
     
Eq9_5a(fringe,GTtoCC,SOA)..  - inv(fringe,GTtoCC,SOA) - ret(fringe,GT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 17 ENTRIES SKIPPED


---- Eq9_6  =G=  

Eq9_6(fringe,CCGT,COA)..  - ret(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq9_6(fringe,CCGT,EOA)..  - ret(fringe,CCGT,EOA) =G= -6.49437 ; (LHS = 0)
     
Eq9_6(fringe,CCGT,SOA)..  - ret(fringe,CCGT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_7  =E=  

Eq9_7(fringe,CCGT,COA)..  - inv(fringe,CCGT,COA) - 1.5*inv(fringe,GTtoCC,COA) + ret(fringe,CCGT,COA) + Cap_avail(fringe,CCGT,COA) =E= 0 ; (LHS = 0)
     
Eq9_7(fringe,CCGT,EOA)..  - inv(fringe,CCGT,EOA) - 1.5*inv(fringe,GTtoCC,EOA) + ret(fringe,CCGT,EOA) + Cap_avail(fringe,CCGT,EOA) =E= 6.49437 ; (LHS = 6.49437)
     
Eq9_7(fringe,CCGT,SOA)..  - inv(fringe,CCGT,SOA) - 1.5*inv(fringe,GTtoCC,SOA) + ret(fringe,CCGT,SOA) + Cap_avail(fringe,CCGT,SOA) =E= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_8  =E=  

Eq9_8(fringe,COA,winter,l1,s1,s1)..  - Q(fringe,CCGT,COA,winter,l1,s1,s1) - Q(fringe,GT,COA,winter,l1,s1,s1) - Q(fringe,ST,COA,winter,l1,s1,s1) - Q(fringe,Nuclear,COA,winter,l1,s1,s1)
     
      + sales(fringe,COA,winter,l1,s1,s1) =E= 0 ; (LHS = 0)
     
Eq9_8(fringe,COA,winter,l1,s1,s2)..  - Q(fringe,CCGT,COA,winter,l1,s1,s2) - Q(fringe,GT,COA,winter,l1,s1,s2) - Q(fringe,ST,COA,winter,l1,s1,s2) - Q(fringe,Nuclear,COA,winter,l1,s1,s2)
     
      + sales(fringe,COA,winter,l1,s1,s2) =E= 0 ; (LHS = 0)
     
Eq9_8(fringe,COA,winter,l1,s2,s1)..  - Q(fringe,CCGT,COA,winter,l1,s2,s1) - Q(fringe,GT,COA,winter,l1,s2,s1) - Q(fringe,ST,COA,winter,l1,s2,s1) - Q(fringe,Nuclear,COA,winter,l1,s2,s1)
     
      + sales(fringe,COA,winter,l1,s2,s1) =E= 0 ; (LHS = 0)
     
REMAINING 4797 ENTRIES SKIPPED


---- Eq10_1  =E=  

Eq10_1(East,COA,EOA,winter,l1,s1,s1)..  - price(COA,winter,l1,s1,s1) + price(EOA,winter,l1,s1,s1) - price_trans(East,winter,l1,s1,s1) + shadows_arbitrage(East,COA,EOA,winter,l1,s1,s1) =E= 0 ;
     
      (LHS = 0)
     
Eq10_1(East,COA,EOA,winter,l1,s1,s2)..  - price(COA,winter,l1,s1,s2) + price(EOA,winter,l1,s1,s2) - price_trans(East,winter,l1,s1,s2) + shadows_arbitrage(East,COA,EOA,winter,l1,s1,s2) =E= 0 ;
     
      (LHS = 0)
     
Eq10_1(East,COA,EOA,winter,l1,s2,s1)..  - price(COA,winter,l1,s2,s1) + price(EOA,winter,l1,s2,s1) - price_trans(East,winter,l1,s2,s1) + shadows_arbitrage(East,COA,EOA,winter,l1,s2,s1) =E= 0 ;
     
      (LHS = 0)
     
REMAINING 1437 ENTRIES SKIPPED


---- Eq11_1  =E=  

Eq11_1(East,winter,l1,s1,s1)..  price_trans_pos(East,winter,l1,s1,s1) - 2.04918032786885*tau(East,winter,l1,s1,s1) =E= 3.78 ; (LHS = 3.78)
     
Eq11_1(East,winter,l1,s1,s2)..  price_trans_pos(East,winter,l1,s1,s2) - 2.04918032786885*tau(East,winter,l1,s1,s2) =E= 3.78 ; (LHS = 3.78)
     
Eq11_1(East,winter,l1,s2,s1)..  price_trans_pos(East,winter,l1,s2,s1) - 2.04918032786885*tau(East,winter,l1,s2,s1) =E= 3.78 ; (LHS = 3.78)
     
REMAINING 717 ENTRIES SKIPPED


---- Eq11_2  =G=  

Eq11_2(East,winter,l1,s1,s1)..  - arbitrage(East,COA,EOA,winter,l1,s1,s1) - arbitrage(East,EOA,COA,winter,l1,s1,s1) + trans(East,winter,l1,s1,s1) =G= 0 ; (LHS = 0)
     
Eq11_2(East,winter,l1,s1,s2)..  - arbitrage(East,COA,EOA,winter,l1,s1,s2) - arbitrage(East,EOA,COA,winter,l1,s1,s2) + trans(East,winter,l1,s1,s2) =G= 0 ; (LHS = 0)
     
Eq11_2(East,winter,l1,s2,s1)..  - arbitrage(East,COA,EOA,winter,l1,s2,s1) - arbitrage(East,EOA,COA,winter,l1,s2,s1) + trans(East,winter,l1,s2,s1) =G= 0 ; (LHS = 0)
     
REMAINING 717 ENTRIES SKIPPED


---- Eq11_3  =G=  

                NONE


---- Eq11_4  =G=  

Eq11_4(East,winter,l1,s1,s1)..  - trans(East,winter,l1,s1,s1) =G= -5.22 ; (LHS = 0)
     
Eq11_4(East,winter,l1,s1,s2)..  - trans(East,winter,l1,s1,s2) =G= -5.22 ; (LHS = 0)
     
Eq11_4(East,winter,l1,s2,s1)..  - trans(East,winter,l1,s2,s1) =G= -5.22 ; (LHS = 0)
     
REMAINING 717 ENTRIES SKIPPED


---- Eq11_5  =E=  

Eq11_5(East,winter,l1,s1,s1)..  price_trans(East,winter,l1,s1,s1) - price_trans_pos(East,winter,l1,s1,s1) =E= 0 ; (LHS = 0)
     
Eq11_5(East,winter,l1,s1,s2)..  price_trans(East,winter,l1,s1,s2) - price_trans_pos(East,winter,l1,s1,s2) =E= 0 ; (LHS = 0)
     
Eq11_5(East,winter,l1,s2,s1)..  price_trans(East,winter,l1,s2,s1) - price_trans_pos(East,winter,l1,s2,s1) =E= 0 ; (LHS = 0)
     
REMAINING 717 ENTRIES SKIPPED


---- Eq_q  =G=  

Eq_q(fringe,CCGT,COA,winter,l1,s1,s1)..  Q(fringe,CCGT,COA,winter,l1,s1,s1) =G= 0 ; (LHS = 8.224644241075)
     
Eq_q(fringe,CCGT,COA,winter,l1,s1,s2)..  Q(fringe,CCGT,COA,winter,l1,s1,s2) =G= 0 ; (LHS = 8.3692386095933)
     
Eq_q(fringe,CCGT,COA,winter,l1,s2,s1)..  Q(fringe,CCGT,COA,winter,l1,s2,s1) =G= 0 ; (LHS = 9.3704486113741)
     
REMAINING 19197 ENTRIES SKIPPED


---- Eq_trade  =G=  

                NONE


---- Eq_inv  =G=  

Eq_inv(fringe,CCGT,COA)..  inv(fringe,CCGT,COA) =G= 0 ; (LHS = 13.3724642581009)
     
Eq_inv(fringe,CCGT,EOA)..  inv(fringe,CCGT,EOA) =G= 0 ; (LHS = 4.96602166325802)
     
Eq_inv(fringe,CCGT,SOA)..  inv(fringe,CCGT,SOA) =G= 0 ; (LHS = 1.12783987076142)
     
REMAINING 97 ENTRIES SKIPPED


---- Eq_ret  =G=  

Eq_ret(fringe,CCGT,COA)..  ret(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq_ret(fringe,CCGT,EOA)..  ret(fringe,CCGT,EOA) =G= 0 ; (LHS = 0)
     
Eq_ret(fringe,CCGT,SOA)..  ret(fringe,CCGT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq_arb  =G=  

Eq_arb(East,COA,EOA,winter,l1,s1,s1)..  arbitrage(East,COA,EOA,winter,l1,s1,s1) =G= 0 ; (LHS = 0)
     
Eq_arb(East,COA,EOA,winter,l1,s1,s2)..  arbitrage(East,COA,EOA,winter,l1,s1,s2) =G= 0 ; (LHS = 0)
     
Eq_arb(East,COA,EOA,winter,l1,s2,s1)..  arbitrage(East,COA,EOA,winter,l1,s2,s1) =G= 0 ; (LHS = 0)
     
REMAINING 1437 ENTRIES SKIPPED

GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             11/11/16 15:55:28 Page 5
Dynamic Programming Investment
Column Listing      SOLVE CMO Using MCP From line 928


---- inv  investment by player i in technology h

inv(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 13.3724642581009, +INF, 0)
       -1       Eq9_7(fringe,CCGT,COA)
        1       Eq_inv(fringe,CCGT,COA)

inv(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 4.96602166325802, +INF, 0)
       -1       Eq9_7(fringe,CCGT,EOA)
        1       Eq_inv(fringe,CCGT,EOA)

inv(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 1.12783987076142, +INF, 0)
       -1       Eq9_7(fringe,CCGT,SOA)
        1       Eq_inv(fringe,CCGT,SOA)

REMAINING 97 ENTRIES SKIPPED

---- ret  retirement of technology h in region r by player i

ret(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,COA)
        1       Eq9_7(fringe,CCGT,COA)
        1       Eq_ret(fringe,CCGT,COA)

ret(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,EOA)
        1       Eq9_7(fringe,CCGT,EOA)
        1       Eq_ret(fringe,CCGT,EOA)

ret(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,SOA)
        1       Eq9_7(fringe,CCGT,SOA)
        1       Eq_ret(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- Cap_avail  available capacity of player i of technolgy h in region r in MW

Cap_avail(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 14.2094642581009, +INF, 0)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s5,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s5,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s5,s2)
        1       Eq9_7(fringe,CCGT,COA)

Cap_avail(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 14.241766663258, +INF, 0)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s5,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s5,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s5,s2)
        1       Eq9_7(fringe,CCGT,EOA)

Cap_avail(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 1.12783987076142, +INF, 0)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s5,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s1,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s2,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s3,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s4,s2)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s5,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s5,s2)
        1       Eq9_7(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- Q  generation quantity from a player i at market l in scenario in MW

Q(fringe,CCGT,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 8.224644241075, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s1)
       -1       Eq9_8(fringe,COA,winter,l1,s1,s1)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s1,s1)

Q(fringe,CCGT,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 8.3692386095933, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s1,s2)
       -1       Eq9_8(fringe,COA,winter,l1,s1,s2)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s1,s2)

Q(fringe,CCGT,COA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 9.3704486113741, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s2,s1)
       -1       Eq9_8(fringe,COA,winter,l1,s2,s1)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s2,s1)

REMAINING 19197 ENTRIES SKIPPED

---- sales  sales of firm in region r market l scenario s in MW

sales(fringe,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 8.224644241075, +INF, 0)
       12.2563  Eq1(COA,winter,l1,s1,s1)
        1       Eq9_8(fringe,COA,winter,l1,s1,s1)

sales(fringe,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 8.3692386095933, +INF, 0)
       15.3204  Eq1(COA,winter,l1,s1,s2)
        1       Eq9_8(fringe,COA,winter,l1,s1,s2)

sales(fringe,COA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 9.3704486113741, +INF, 0)
       10.7576  Eq1(COA,winter,l1,s2,s1)
        1       Eq9_8(fringe,COA,winter,l1,s2,s1)

REMAINING 4797 ENTRIES SKIPPED

---- lambda_high  shadow prices for the high capacity constraint in USD per  MWh

lambda_high(fringe,CCGT,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.98482001702589)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)
        0.0188  Eq9_2(fringe,CCGT,COA)
        0.0282  Eq9_2(fringe,GTtoCC,COA)
       -0.0188  Eq9_3(fringe,CCGT,COA)

lambda_high(fringe,CCGT,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.84022564850759)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)
        0.0536  Eq9_2(fringe,CCGT,COA)
        0.0804  Eq9_2(fringe,GTtoCC,COA)
       -0.0536  Eq9_3(fringe,CCGT,COA)

lambda_high(fringe,CCGT,COA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 4.83901564672679)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s2,s1)
        0.0363  Eq9_2(fringe,CCGT,COA)
        0.0545  Eq9_2(fringe,GTtoCC,COA)
       -0.0363  Eq9_3(fringe,CCGT,COA)

REMAINING 19197 ENTRIES SKIPPED

---- lambda_low  shadows prices for low constraint in USD per  MWh

lambda_low(fringe,CCGT,COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 8.224644241075)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)

lambda_low(fringe,CCGT,COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 8.3692386095933)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)

lambda_low(fringe,CCGT,COA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 9.3704486113741)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s2,s1)

REMAINING 19197 ENTRIES SKIPPED

---- delta  shadow prices for the capacity market in USD per  MW per hour

delta(COA,summer,l5)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq2(COA,summer,l5)
        0.363   Eq9_2(fringe,CCGT,COA)
        0.363   Eq9_2(fringe,GT,COA)
        0.363   Eq9_2(fringe,GTtoCC,COA)
        0.363   Eq9_2(fringe,ST,COA)
        0.363   Eq9_2(fringe,Nuclear,COA)
        0.363   Eq9_2(g1,CCGT,COA)
        0.363   Eq9_2(g1,GT,COA)
        0.363   Eq9_2(g1,GTtoCC,COA)
        0.363   Eq9_2(g1,ST,COA)
        0.363   Eq9_2(g1,Nuclear,COA)
        0.363   Eq9_2(g2,CCGT,COA)
        0.363   Eq9_2(g2,GT,COA)
        0.363   Eq9_2(g2,GTtoCC,COA)
        0.363   Eq9_2(g2,ST,COA)
        0.363   Eq9_2(g2,Nuclear,COA)
        0.363   Eq9_2(g3,CCGT,COA)
        0.363   Eq9_2(g3,GT,COA)
        0.363   Eq9_2(g3,GTtoCC,COA)
        0.363   Eq9_2(g3,ST,COA)
        0.363   Eq9_2(g3,Nuclear,COA)
        0.363   Eq9_2(g4,CCGT,COA)
        0.363   Eq9_2(g4,GT,COA)
        0.363   Eq9_2(g4,GTtoCC,COA)
        0.363   Eq9_2(g4,ST,COA)
        0.363   Eq9_2(g4,Nuclear,COA)
       -0.363   Eq9_3(fringe,CCGT,COA)
       -0.363   Eq9_3(fringe,GT,COA)
       -0.363   Eq9_3(fringe,ST,COA)
       -0.363   Eq9_3(fringe,Nuclear,COA)
       -0.363   Eq9_3(g1,CCGT,COA)
       -0.363   Eq9_3(g1,GT,COA)
       -0.363   Eq9_3(g1,ST,COA)
       -0.363   Eq9_3(g1,Nuclear,COA)
       -0.363   Eq9_3(g2,CCGT,COA)
       -0.363   Eq9_3(g2,GT,COA)
       -0.363   Eq9_3(g2,ST,COA)
       -0.363   Eq9_3(g2,Nuclear,COA)
       -0.363   Eq9_3(g3,CCGT,COA)
       -0.363   Eq9_3(g3,GT,COA)
       -0.363   Eq9_3(g3,ST,COA)
       -0.363   Eq9_3(g3,Nuclear,COA)
       -0.363   Eq9_3(g4,CCGT,COA)
       -0.363   Eq9_3(g4,GT,COA)
       -0.363   Eq9_3(g4,ST,COA)
       -0.363   Eq9_3(g4,Nuclear,COA)

delta(COA,summer,l6)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq2(COA,summer,l6)
        0.242   Eq9_2(fringe,CCGT,COA)
        0.242   Eq9_2(fringe,GT,COA)
        0.242   Eq9_2(fringe,GTtoCC,COA)
        0.242   Eq9_2(fringe,ST,COA)
        0.242   Eq9_2(fringe,Nuclear,COA)
        0.242   Eq9_2(g1,CCGT,COA)
        0.242   Eq9_2(g1,GT,COA)
        0.242   Eq9_2(g1,GTtoCC,COA)
        0.242   Eq9_2(g1,ST,COA)
        0.242   Eq9_2(g1,Nuclear,COA)
        0.242   Eq9_2(g2,CCGT,COA)
        0.242   Eq9_2(g2,GT,COA)
        0.242   Eq9_2(g2,GTtoCC,COA)
        0.242   Eq9_2(g2,ST,COA)
        0.242   Eq9_2(g2,Nuclear,COA)
        0.242   Eq9_2(g3,CCGT,COA)
        0.242   Eq9_2(g3,GT,COA)
        0.242   Eq9_2(g3,GTtoCC,COA)
        0.242   Eq9_2(g3,ST,COA)
        0.242   Eq9_2(g3,Nuclear,COA)
        0.242   Eq9_2(g4,CCGT,COA)
        0.242   Eq9_2(g4,GT,COA)
        0.242   Eq9_2(g4,GTtoCC,COA)
        0.242   Eq9_2(g4,ST,COA)
        0.242   Eq9_2(g4,Nuclear,COA)
       -0.242   Eq9_3(fringe,CCGT,COA)
       -0.242   Eq9_3(fringe,GT,COA)
       -0.242   Eq9_3(fringe,ST,COA)
       -0.242   Eq9_3(fringe,Nuclear,COA)
       -0.242   Eq9_3(g1,CCGT,COA)
       -0.242   Eq9_3(g1,GT,COA)
       -0.242   Eq9_3(g1,ST,COA)
       -0.242   Eq9_3(g1,Nuclear,COA)
       -0.242   Eq9_3(g2,CCGT,COA)
       -0.242   Eq9_3(g2,GT,COA)
       -0.242   Eq9_3(g2,ST,COA)
       -0.242   Eq9_3(g2,Nuclear,COA)
       -0.242   Eq9_3(g3,CCGT,COA)
       -0.242   Eq9_3(g3,GT,COA)
       -0.242   Eq9_3(g3,ST,COA)
       -0.242   Eq9_3(g3,Nuclear,COA)
       -0.242   Eq9_3(g4,CCGT,COA)
       -0.242   Eq9_3(g4,GT,COA)
       -0.242   Eq9_3(g4,ST,COA)
       -0.242   Eq9_3(g4,Nuclear,COA)

delta(COA,summer,l7)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq2(COA,summer,l7)
        0.242   Eq9_2(fringe,CCGT,COA)
        0.242   Eq9_2(fringe,GT,COA)
        0.242   Eq9_2(fringe,GTtoCC,COA)
        0.242   Eq9_2(fringe,ST,COA)
        0.242   Eq9_2(fringe,Nuclear,COA)
        0.242   Eq9_2(g1,CCGT,COA)
        0.242   Eq9_2(g1,GT,COA)
        0.242   Eq9_2(g1,GTtoCC,COA)
        0.242   Eq9_2(g1,ST,COA)
        0.242   Eq9_2(g1,Nuclear,COA)
        0.242   Eq9_2(g2,CCGT,COA)
        0.242   Eq9_2(g2,GT,COA)
        0.242   Eq9_2(g2,GTtoCC,COA)
        0.242   Eq9_2(g2,ST,COA)
        0.242   Eq9_2(g2,Nuclear,COA)
        0.242   Eq9_2(g3,CCGT,COA)
        0.242   Eq9_2(g3,GT,COA)
        0.242   Eq9_2(g3,GTtoCC,COA)
        0.242   Eq9_2(g3,ST,COA)
        0.242   Eq9_2(g3,Nuclear,COA)
        0.242   Eq9_2(g4,CCGT,COA)
        0.242   Eq9_2(g4,GT,COA)
        0.242   Eq9_2(g4,GTtoCC,COA)
        0.242   Eq9_2(g4,ST,COA)
        0.242   Eq9_2(g4,Nuclear,COA)
       -0.242   Eq9_3(fringe,CCGT,COA)
       -0.242   Eq9_3(fringe,GT,COA)
       -0.242   Eq9_3(fringe,ST,COA)
       -0.242   Eq9_3(fringe,Nuclear,COA)
       -0.242   Eq9_3(g1,CCGT,COA)
       -0.242   Eq9_3(g1,GT,COA)
       -0.242   Eq9_3(g1,ST,COA)
       -0.242   Eq9_3(g1,Nuclear,COA)
       -0.242   Eq9_3(g2,CCGT,COA)
       -0.242   Eq9_3(g2,GT,COA)
       -0.242   Eq9_3(g2,ST,COA)
       -0.242   Eq9_3(g2,Nuclear,COA)
       -0.242   Eq9_3(g3,CCGT,COA)
       -0.242   Eq9_3(g3,GT,COA)
       -0.242   Eq9_3(g3,ST,COA)
       -0.242   Eq9_3(g3,Nuclear,COA)
       -0.242   Eq9_3(g4,CCGT,COA)
       -0.242   Eq9_3(g4,GT,COA)
       -0.242   Eq9_3(g4,ST,COA)
       -0.242   Eq9_3(g4,Nuclear,COA)

REMAINING 24 ENTRIES SKIPPED

---- price  energy price in USD per MWh

price(COA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 8.860975, +INF, 0)
        1       Eq1(COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,GT,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,ST,COA,winter,l1,s1,s1)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s1,s1)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s1)
        1       Eq10_1(East,EOA,COA,winter,l1,s1,s1)
       -1       Eq10_1(west,COA,WOA,winter,l1,s1,s1)
        1       Eq10_1(west,WOA,COA,winter,l1,s1,s1)

price(COA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 8.860975, +INF, 0)
        1       Eq1(COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,GT,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,ST,COA,winter,l1,s1,s2)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s1,s2)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s2)
        1       Eq10_1(East,EOA,COA,winter,l1,s1,s2)
       -1       Eq10_1(west,COA,WOA,winter,l1,s1,s2)
        1       Eq10_1(west,WOA,COA,winter,l1,s1,s2)

price(COA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 8.860975, +INF, 0)
        1       Eq1(COA,winter,l1,s2,s1)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_1(fringe,GT,COA,winter,l1,s2,s1)
        1       Eq9_1(fringe,ST,COA,winter,l1,s2,s1)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s2,s1)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_1(g1,GT,COA,winter,l1,s2,s1)
        1       Eq9_1(g1,ST,COA,winter,l1,s2,s1)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s2,s1)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_1(g2,GT,COA,winter,l1,s2,s1)
        1       Eq9_1(g2,ST,COA,winter,l1,s2,s1)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s2,s1)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_1(g3,GT,COA,winter,l1,s2,s1)
        1       Eq9_1(g3,ST,COA,winter,l1,s2,s1)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s2,s1)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s2,s1)
        1       Eq9_1(g4,GT,COA,winter,l1,s2,s1)
        1       Eq9_1(g4,ST,COA,winter,l1,s2,s1)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s2,s1)
       -1       Eq10_1(East,COA,EOA,winter,l1,s2,s1)
        1       Eq10_1(East,EOA,COA,winter,l1,s2,s1)
       -1       Eq10_1(west,COA,WOA,winter,l1,s2,s1)
        1       Eq10_1(west,WOA,COA,winter,l1,s2,s1)

REMAINING 957 ENTRIES SKIPPED

---- price_trans  tranmission price in USD per MWh

price_trans(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s1)
       -1       Eq10_1(East,EOA,COA,winter,l1,s1,s1)
        1       Eq11_5(East,winter,l1,s1,s1)

price_trans(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1,s2)
       -1       Eq10_1(East,EOA,COA,winter,l1,s1,s2)
        1       Eq11_5(East,winter,l1,s1,s2)

price_trans(East,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
       -1       Eq10_1(East,COA,EOA,winter,l1,s2,s1)
       -1       Eq10_1(East,EOA,COA,winter,l1,s2,s1)
        1       Eq11_5(East,winter,l1,s2,s1)

REMAINING 717 ENTRIES SKIPPED

---- price_trans_pos  tranmission price in USD per MWh

price_trans_pos(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
        1       Eq11_1(East,winter,l1,s1,s1)
       -1       Eq11_5(East,winter,l1,s1,s1)

price_trans_pos(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
        1       Eq11_1(East,winter,l1,s1,s2)
       -1       Eq11_5(East,winter,l1,s1,s2)

price_trans_pos(East,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 3.78, +INF, 0)
        1       Eq11_1(East,winter,l1,s2,s1)
       -1       Eq11_5(East,winter,l1,s2,s1)

REMAINING 717 ENTRIES SKIPPED

---- alpha  shadow prices for the non-negative investment constraints in USD per  MW

alpha(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 13.3724642581009)
        1       Eq9_2(fringe,CCGT,COA)

alpha(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 4.96602166325802)
        1       Eq9_2(fringe,CCGT,EOA)

alpha(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 1.12783987076142)
        1       Eq9_2(fringe,CCGT,SOA)

REMAINING 97 ENTRIES SKIPPED

---- eta_high  shadow prices for the capacity retirment constraint in USD per  MW

eta_high(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_3(fringe,CCGT,COA)

eta_high(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 6.49437)
       -1       Eq9_3(fringe,CCGT,EOA)

eta_high(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_3(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- eta_low  

eta_low(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 131.179260935802, +INF, 0)
        1       Eq9_3(fringe,CCGT,COA)

eta_low(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 131.179260935803, +INF, 0)
        1       Eq9_3(fringe,CCGT,EOA)

eta_low(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 131.179260935802, +INF, 0)
        1       Eq9_3(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- arbitrage  TSO outgoing electricity arbitrage from node r on line n

arbitrage(East,COA,EOA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      -12.2563  Eq1(COA,winter,l1,s1,s1)
        8.1578  Eq1(EOA,winter,l1,s1,s1)
       -1       Eq11_2(East,winter,l1,s1,s1)
        1       Eq_arb(East,COA,EOA,winter,l1,s1,s1)

arbitrage(East,COA,EOA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      -15.3204  Eq1(COA,winter,l1,s1,s2)
        9.3232  Eq1(EOA,winter,l1,s1,s2)
       -1       Eq11_2(East,winter,l1,s1,s2)
        1       Eq_arb(East,COA,EOA,winter,l1,s1,s2)

arbitrage(East,COA,EOA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
      -10.7576  Eq1(COA,winter,l1,s2,s1)
        7.6799  Eq1(EOA,winter,l1,s2,s1)
       -1       Eq11_2(East,winter,l1,s2,s1)
        1       Eq_arb(East,COA,EOA,winter,l1,s2,s1)

REMAINING 1437 ENTRIES SKIPPED

---- trans  electricity trans by on line n

trans(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq11_2(East,winter,l1,s1,s1)
       -1       Eq11_4(East,winter,l1,s1,s1)

trans(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq11_2(East,winter,l1,s1,s2)
       -1       Eq11_4(East,winter,l1,s1,s2)

trans(East,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq11_2(East,winter,l1,s2,s1)
       -1       Eq11_4(East,winter,l1,s2,s1)

REMAINING 717 ENTRIES SKIPPED

---- tau  shadow prices for the high capacity constraint in USD per MW

tau(East,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.22)
       -2.0492  Eq11_1(East,winter,l1,s1,s1)

tau(East,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.22)
       -2.0492  Eq11_1(East,winter,l1,s1,s2)

tau(East,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 5.22)
       -2.0492  Eq11_1(East,winter,l1,s2,s1)

REMAINING 717 ENTRIES SKIPPED

---- shadows_arbitrage  shadow prices for no-negative incoming arbitrage constriant in USD per MW

shadows_arbitrage(East,COA,EOA,winter,l1,s1,s1)
                (.LO, .L, .UP, .M = 0, 0.228624999999999, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s1,s1)

shadows_arbitrage(East,COA,EOA,winter,l1,s1,s2)
                (.LO, .L, .UP, .M = 0, 0.228624999999999, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s1,s2)

shadows_arbitrage(East,COA,EOA,winter,l1,s2,s1)
                (.LO, .L, .UP, .M = 0, 0.228624999999999, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s2,s1)

REMAINING 1437 ENTRIES SKIPPED

---- shadows_gttocc  shadows on upper bound of GT conversion USD per MW

shadows_gttocc(fringe,GTtoCC,COA)
                (.LO, .L, .UP, .M = 0, 30.0807600578109, +INF, 0)
       -1       Eq9_2(fringe,GTtoCC,COA)

shadows_gttocc(fringe,GTtoCC,EOA)
                (.LO, .L, .UP, .M = 0, 43.0470353861248, +INF, 0)
       -1       Eq9_2(fringe,GTtoCC,EOA)

shadows_gttocc(fringe,GTtoCC,SOA)
                (.LO, .L, .UP, .M = 0, 14.9398568468722, +INF, 0)
       -1       Eq9_2(fringe,GTtoCC,SOA)

REMAINING 17 ENTRIES SKIPPED
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             11/11/16 15:55:28 Page 6
Dynamic Programming Investment
Model Statistics    SOLVE CMO Using MCP From line 928


MODEL STATISTICS

BLOCKS OF EQUATIONS          22     SINGLE EQUATIONS       69,687
BLOCKS OF VARIABLES          19     SINGLE VARIABLES       69,687
NON ZERO ELEMENTS       226,262     NON LINEAR N-Z              0
DERIVATIVE POOL              10     CONSTANT POOL              16
CODE LENGTH                   0


GENERATION TIME      =        0.375 SECONDS     49 MB  24.1.3 r41464 WEX-WEI


EXECUTION TIME       =        1.703 SECONDS     49 MB  24.1.3 r41464 WEX-WEI
