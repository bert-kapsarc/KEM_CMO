GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/06/16 11:39:50 Page 1
Dynamic Programming Investment
C o m p i l a t i o n


       
   5   
   6  *$INCLUDE ACCESS_HLC.gms
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Macros.gms
   8  ********************************************************************************
   9  *        MACROS for KEM
  10  ********************************************************************************
  11   
  12  *        Time dependant discount factor
  13  $MACRO   discfact(i,t)                   1/(1+i)**(ord(t)-1)
  14   
  15  *        sum of discount factors over lifetime T of capital
  16  $MACRO   sumdiscfact(T,i,n)              sum(n$(ord(n)<=T),discfact(i,n))
  17   
  18  *        Numerator of discounting coefficients
  19  *        Accounts for recursive dynmic solves when size of t greater than tt
  20  *        Consider final time period of tt to be a long term static solution
  21  $MACRO   intdiscfact(i,t,tt) sum(tt$(ord(tt)>=ord(t)),1/(1+i)**(ord(tt)-ord(t)))
  22   
  23  $MACRO   discounting(Time,i,n,t,tt)    intdiscfact(i,t,tt)/sumdiscfact(Time,i,n)
  24   
  25  * Solar position equations used for CSP implementation (Parameters described in power sub-model):
  26  * the parameter table "Dayofyear" in the power sub-model.
  27  * long and lat are specificed in power sub-model for each region;
  28   
  29  $MACRO   earthpos(Dayofyear)            ((Dayofyear-1)*360/365)
  30   
  31  $MACRO   EOT(Dayofyear)                  (229.2*(0.000075+0.001868*COS(earthpos(Dayofyear)*pi/180)-0.032077*SIN(earthpos(Dayofyear)*pi/180)-0.014615*COS(2*(earthpos(Dayofyear)*pi/180))-0.04089*S
      IN(2*(earthpos(Dayofyear)*pi/180))))
  32   
  33  $MACRO   solhr(hr,Dayofyear,long,tzone)       (((1$(frac(hr/24)=0)+frac(hr/24))*24*60-(long-tzone)*4+EOT(Dayofyear)))/60
  34  $MACRO   hourangle(solhour)                   (solhour-12)*360/24
  35   
  36  $MACRO   soldecl(Dayofyear)              (0.3963723-22.9132745*COS(earthpos(Dayofyear)*pi/180)+4.0254304*SIN(earthpos(Dayofyear)*pi/180)-0.387205*COS(2*earthpos(Dayofyear)*pi/180)+0.05196728*SIN
      (2*earthpos(Dayofyear)*pi/180)-0.1545267*COS(3*earthpos(Dayofyear)*pi/180)+0.0847977*SIN(3*earthpos(Dayofyear)*pi/180))
  37  $MACRO   solalt(hrangle,solardeclination,lat)   (arcsin(COS(lat*pi/180)*COS(hrangle*pi/180)*COS(solardeclination*pi/180)+SIN(lat*pi/180)*SIN(solardeclination*pi/180))*180/pi)
  38  $MACRO   solazim(hrangle,solardeclination,lat,solaralt)  (180/pi*arccos((SIN(solardeclination*pi/180)*COS(lat*pi/180)-COS(solardeclination*pi/180)*SIN(lat*pi/180)*COS(hrangle*pi/180))/COS(solara
      lt*pi/180)))
  39  $MACRO   Gamma(solarazimuth,surfaceazimuth)  (ABS(solarazimuth-surfaceazimuth))
  40   
  41   
  42  $MACRO   Incidence(solaralt,gammaa,orientation)    (180/pi*arccos(COS(solaralt*pi/180)*COS(gammaa*pi/180)*SIN(orientation*pi/180)+SIN(solaralt*pi/180)*COS(orientation*pi/180)))
  43  *orientation is the tilt angle of the surface, 0 for horizontal surfaces and 90 degrees for vertical surfaces.
  44   
FUNCLIBIN  stolib stodclib
Function Library stolib
Random deviates, probability density function, cumulative distribution function, inverse cumulative distribution function
GAMS Development Corporation

Mod. Function                          Description
Type

none SetSeed(SEED)                     Define the seed for random number gen
none dUniform(LOW,HIGH)                Uniform distribution
DNLP pdfUniform(x,LOW,HIGH)            Probability density function for uniform distribution
DNLP cdfUniform(x,LOW,HIGH)            Cumulative distribution function for uniform distribution
DNLP icdfUniform(x,LOW,HIGH)           Inverse cumulative distribution function for uniform distribution
none dNormal(MEAN,STD_DEV)             Normal distribution
DNLP pdfNormal(x,MEAN,STD_DEV)         Probability density function for normal distribution
DNLP cdfNormal(x,MEAN,STD_DEV)         Cumulative distribution function for normal distribution
DNLP icdfNormal(x,MEAN,STD_DEV)        Inverse cumulative distribution function for normal distribution
none dInvGaussian(MEAN,SHAPE)          Inverse Gaussian distribution
DNLP pdfInvGaussian(x,MEAN,SHAPE)      Probability density function for inverse Gaussian distribution
DNLP cdfInvGaussian(x,MEAN,SHAPE)      Cumulative distribution function for inverse Gaussian distribution
DNLP icdfInvGaussian(x,MEAN,SHAPE)     Inverse cumulative distribution function for inverse Gaussian distribution
none dRayleigh(SIGMA)                  Rayleigh distribution
DNLP pdfRayleigh(x,SIGMA)              Probability density function for Rayleigh distribution
DNLP cdfRayleigh(x,SIGMA)              Cumulative distribution function for Rayleigh distribution
DNLP icdfRayleigh(x,SIGMA)             Inverse cumulative distribution function for Rayleigh distribution
none dCauchy(LOCATION,SCALE)           Cauchy distribution
DNLP pdfCauchy(x,LOCATION,SCALE)       Probability density function for Cauchy distribution
DNLP cdfCauchy(x,LOCATION,SCALE)       Cumulative distribution function for Cauchy distribution
DNLP icdfCauchy(x,LOCATION,SCALE)      Inverse cumulative distribution function for Cauchy distribution
none dLognormal(MEAN,STD_DEV)          Lognormal distribution
DNLP pdfLognormal(x,MEAN,STD_DEV)      Probability density function for Lognormal distribution
DNLP cdfLognormal(x,MEAN,STD_DEV)      Cumulative distribution function for Lognormal distribution
DNLP icdfLognormal(x,MEAN,STD_DEV)     Inverse cumulative distribution function for Lognormal distribution
none dExponential(LAMBDA)              Exponential distribution
DNLP pdfExponential(x,LAMBDA)          Probability density function for Exponential distribution
DNLP cdfExponential(x,LAMBDA)          Cumulative distribution function for Exponential distribution
DNLP icdfExponential(x,LAMBDA)         Inverse cumulative distribution function for Exponential distribution
none dLogistic(LOCATION,SCALE)         Logistic distribution
DNLP pdfLogistic(x,LOCATION,SCALE)     Probability density function for Logistic distribution
DNLP cdfLogistic(x,LOCATION,SCALE)     Cumulative distribution function for Logistic distribution
DNLP icdfLogistic(x,LOCATION,SCALE)    Inverse cumulative distribution function for Logistic distribution
none dGamma(SHAPE,SCALE)               Gamma distribution
DNLP pdfGamma(x,SHAPE,SCALE)           Probability density function for Gamma distribution
DNLP cdfGamma(x,SHAPE,SCALE)           Cumulative distribution function for Gamma distribution
DNLP icdfGamma(x,SHAPE,SCALE)          Inverse cumulative distribution function for Gamma distribution
none dChiSquare(DF)                    Chi square distribution
none DF(DF_1,DF_2)                     F distribution
DNLP pdfChiSquare(x,DF)                Probability density function for Chi square distribution
DNLP cdfChiSquare(x,DF)                Cumulative distribution function for Chi square distribution
DNLP icdfChiSquare(x,DF)               Inverse cumulative distribution function for Chi square distribution
none dWeibull(SHAPE,SCALE)             Weibull distribution
DNLP pdfWeibull(x,SHAPE,SCALE)         Probability density function for Weibull distribution
DNLP cdfWeibull(x,SHAPE,SCALE)         Cumulative distribution function for Weibull distribution
DNLP icdfWeibull(x,SHAPE,SCALE)        Inverse cumulative distribution function for Weibull distribution
none dBeta(SHAPE_1,SHAPE_2)            Beta distribution
DNLP pdfBeta(x,SHAPE_1,SHAPE_2)        Probability density function for Beta distribution
DNLP cdfBeta(x,SHAPE_1,SHAPE_2)        Cumulative distribution function for Beta distribution
DNLP icdfBeta(x,SHAPE_1,SHAPE_2)       Inverse cumulative distribution function for Beta distribution
DNLP pdfF(x,DF_1,DF_2)                 Probability density function for F distribution
DNLP cdfF(x,DF_1,DF_2)                 Cumulative distribution function for F distribution
DNLP icdfF(x,DF_1,DF_2)                Inverse cumulative distribution function for F distribution
none dStudentT(DF)                     Students T distribution
DNLP pdfStudentT(x,DF)                 Probability density function for Students T distribution
DNLP cdfStudentT(x,DF)                 Cumulative distribution function for Students T distribution
DNLP icdfStudentT(x,DF)                Inverse cumulative distribution function for Students T distribution
none dPareto(SCALE,SHAPE)              Pareto distribution
DNLP pdfPareto(x,SCALE,SHAPE)          Probability density function for Pareto distribution
DNLP cdfPareto(x,SCALE,SHAPE)          Cumulative distribution function for Pareto distribution
DNLP icdfPareto(x,SCALE,SHAPE)         Inverse cumulative distribution function for Pareto distribution
none dGumbel(LOCATION,SCALE)           Gumbel distribution
DNLP pdfGumbel(x,LOCATION,SCALE)       Probability density function for Gumbel distribution
DNLP cdfGumbel(x,LOCATION,SCALE)       Cumulative distribution function for Gumbel distribution
DNLP icdfGumbel(x,LOCATION,SCALE)      Inverse cumulative distribution function for Gumbel distribution
none dLaplace(MEAN,SCALE)              Laplace distribution
DNLP pdfLaplace(x,MEAN,SCALE)          Probability density function for Laplace distribution
DNLP cdfLaplace(x,MEAN,SCALE)          Cumulative distribution function for Laplace distribution
DNLP icdfLaplace(x,MEAN,SCALE)         Inverse cumulative distribution function for Laplace distribution
none dTriangular(LOW,MID,HIGH)         Triangular distribution
DNLP pdfTriangular(x,LOW,MID,HIGH)     Probability density function for Triangular distribution
DNLP cdfTriangular(x,LOW,MID,HIGH)     Cumulative distribution function for Triangular distribution
DNLP icdfTriangular(x,LOW,MID,HIGH)    Inverse cumulative distribution function for Triangular distribution
none dUniformInt(LOW,HIGH)             Uniform integer distribution
none pdfUniformInt(x,LOW,HIGH)         Probability density function for Uniform integer distribution
none cdfUniformInt(x,LOW,HIGH)         Cumulative distribution function for Uniform integer distribution
none icdfUniformInt(x,LOW,HIGH)        Inverse cumulative distribution function for Uniform integer distribution
none dBinomial(N,P)                    Binomial distribution
none pdfBinomial(x,N,P)                Probability density function for Binomial distribution
none cdfBinomial(x,N,P)                Cumulative distribution function for Binomial distribution
none icdfBinomial(x,N,P)               Inverse cumulative distribution function for Binomial distribution
none dNegBinomial(FAILURES,P)          Negative Binomial distribution
none pdfNegBinomial(x,FAILURES,P)      Probability density function for Negative Binomial distribution
none cdfNegBinomial(x,FAILURES,P)      Cumulative distribution function for Negative Binomial distribution
none icdfNegBinomial(x,FAILURES,P)     Inverse cumulative distribution function for Negative Binomial distribution
none dGeometric(P)                     Geometric distribution
none pdfGeometric(x,P)                 Probability density function for Geometric distribution
none cdfGeometric(x,P)                 Cumulative distribution function for Geometric distribution
none icdfGeometric(x,P)                Inverse cumulative distribution function for Geometric distribution
none dHyperGeo(TOTAL,GOOD,TRIALS)      HyperGeometric distribution
none pdfHyperGeo(x,TOTAL,GOOD,TRIALS)  Probability density function for HyperGeometric distribution
none cdfHyperGeo(x,TOTAL,GOOD,TRIALS)  Cumulative distribution function for HyperGeometric distribution
none icdfHyperGeo(x,TOTAL,GOOD,TRIALS) Inverse cumulative distribution function for HyperGeometric distribution
none dLogarithmic(P-FACTOR)            Logarithmic distribution
none pdfLogarithmic(x,P-FACTOR)        Probability density function for Logarithmic distribution
none cdfLogarithmic(x,P-FACTOR)        Cumulative distribution function for Logarithmic distribution
none icdfLogarithmic(x,P-FACTOR)       Inverse cumulative distribution function for Logarithmic distribution
none dPoisson(LAMBDA)                  Poisson distribution
none pdfPoisson(x,LAMBDA)              Probability density function for Poisson distribution
none cdfPoisson(x,LAMBDA)              Cumulative distribution function for Poisson distribution
none icdfPoisson(x,LAMBDA)             Inverse cumulative distribution function for Poisson distribution

  46  function cdfnorm     /stolib.cdfnormal/;
  47   
  48   
  49   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\SetsAndVariables.gms
  51  Sets i generators       /fringe, g1*g4/
  52       h technology       /CCGT, GT, ST, Nuclear/
  53       l market segment   /l1*l8/
  54       seasons  /winter,summer,spring-fall/
  55  *     e(seasons) seasons for running the model /summer/
  56       e(seasons) seasons for running the model /winter,summer,spring-fall/
  57       winter(seasons) /winter/
  58       spring(seasons) /spring-fall/
  59       summer(seasons) /summer/
  60       fall(seasons) /spring-fall/
  61   
  62       m(l) capacity market /l5,l6,l7/
  63       s scenarios        /s1/
  64       r regions          /COA,EOA,SOA,WOA/
  65       n power_lines      /East,South,west/
  66                                           ;
  67   
  68  *     m(l) = no;
  69   
  70  *     e(seasons)=yes;
  71   
  72  Alias (h,hh), (i,j), (m,mm), (r,rr);
  73   
  74  alias (l,ll), (i,ii), (s,ss), (h,hh), (r,rr,rrr), (e,ee);
  75   
  76  variables
  77           inv(i,h,r)  investment by player i in technology h
  78           ret(i,h,r)  retirement of technology h in region r by player i
  79   
  80           Cap_avail(i,h,r) available capacity of player i of technolgy h in region r in MW
  81           Q(i,h,r,seasons,l,s)  generation quantity from a player i at market l in scenario in MW
  82           sales(i,r,seasons,l,s) sales of firm in region r market l scenario s in MW
  83           lambda_high(i,h,r,seasons,l,s) shadow prices for the high capacity constraint in USD per  MWh
  84           lambda_low(i,h,r,seasons,l,s)  shadows prices for low constraint in USD per  MWh
  85           delta(r,seasons,l)   shadow prices for the capacity market in USD per  MW per hour
  86           price(r,seasons,l,s) energy price in USD per MWh
  87           price_trans(n,seasons,l,s) tranmission price in USD per MWh
  88           price_trans_pos(n,r,seasons,l,s) tranmission price in USD per MWh
  89           price_trans_neg(n,r,seasons,l,s) tranmission price in USD per MWh
  90           alpha(i,h,r) shadow prices for the non-negative investment constraints in USD per  MW
  91           eta_high(i,h,r) shadow prices for the capacity retirment constraint in USD per  MW
  92           eta_low(i,h,r)
  93   
  94           arbitrage(n,r,rr,seasons,l,s) TSO outgoing electricity arbitrage from node r on line n
  95           trade(i,n,r,rr,seasons,l,s) outgoing electricity trade by firm i from node r on line n
  96           trans(n,seasons,l,s) electricity trans by on line n
  97   
  98           tau(n,seasons,l,s) shadow prices for the high capacity constraint in USD per MW
  99           psi(n,seasons,l,s),
 100           shadows_trans_low(n,seasons,l,s) shadow prices for the no-negative transmission constriant in USD per MW
 101           zeta(i,n,r,rr,seasons,l,s) shadow prices for the outgoing no-negative trade constraint in USD per MW
 102           shadows_arbitrage(n,r,rr,seasons,l,s) shadow prices for no-negative incoming arbitrage constriant in USD per MW
 103           shadows_trans(n,seasons,l,s) shadow prices for the positive transmission constriant in USD per MW
 104            ;
 105   
 106  positive variables lambda_high, lambda_low,  alpha,
 107                     eta_high,eta_low, psi
 108                     tau,zeta,shadows_arbitrage,shadows_trans
 109  *                   ,trans,arbitrage
 110  *                   Q,inv,ret,trade,arbitrage,trans
 111  *                 trans_pos,trans_neg
 112                     ;
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Demand.gms
 114  *$INCLUDE ACCESS_HLC.gms
 116   
 117  set hrs            hours in the load curve data set /1*8760/
 118  parameter HLC(r,hrs) hourly load curves for represenative day in each month in MW
 119  parameter ELlcgw(r,seasons,l) power demand load blocks
 120   
 121  ;
GDXIN   D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\db\load.gdx
--- LOAD  HLC = 1:HLC
 125   
 126   
 127   
 128  parameter day(hrs)    day for each hour in a year
 129            hour(hrs) represents each hour in the hourly demand data year from 0 to 23
 130  ;
 131   
 132   
 133            day(hrs) = floor(ord(hrs)/24)+1;
 134            day('8760') = 1;
 135   
 136   
 137            hour(hrs)=ord(hrs)-(day(hrs)-1)*24
 138   
 139  table duration(seasons,l) duration of segemt l in region r and season e
 140   
 141  * these are the hour blocks used to average the actual hourly demand patterns
 142  * must sum to 24
 143  *$ontext
 144                                   l1  l2  l3  l4  l5  l6  l7  l8
 145  (winter,spring-fall,summer)       4   4   4   2   3   2   2   3
 146  *$offtext
 147   
 148  *                                 l1  l2
 149  *(winter,spring-fall,summer)      12  12
 150   ;
 151   
 152   parameter block_start(seasons,l) start hour for hour in load block l
 153             block_end(seasons,l);
 154   
 155   block_start(seasons,l) = sum(ll$(ord(ll)<ord(l)),duration(seasons,ll));
 156   block_end(seasons,l) = sum(ll$(ord(ll)<=ord(l)),duration(seasons,ll));
 157   
 158  parameter start_day(seasons) first day to sample hourly data from for season e
 159   
 160  /
 161  winter 304
 162  spring-fall 61
 163  summer 122
 164  /
 165            end_day(seasons) last day to sample hourlyy data for season e
 166   
 167   
 168  number_of_days(seasons)
 169         ;
 170  scalar
 171           start_day_fall first day to sample hourly data from for fall season /243/
 172           end_day_fall first day to sample hourly data from
 173   
 174   
 175   
 176   
 177  ;
 178  end_day('winter') = start_day('spring-fall')-1;
 179  end_day('spring-fall') = start_day('summer')-1;
 180  end_day('summer') = start_day_fall-1;
 181  end_day_fall = start_day('winter')-1;
 182   
 183  number_of_days(seasons)$(not winter(seasons)) = end_day(seasons)-start_day(seasons)+1;
 184  number_of_days('spring-fall') = number_of_days('spring-fall')+end_day_fall-start_day_fall+1;
 185  number_of_days('winter') = smax(hrs,day(hrs))-sum(seasons,number_of_days(seasons));
 186   
 187   
 188     duration(seasons,l)=duration(seasons,l)*number_of_days(seasons);
 189   
 190  ELlcgw(r,e,l) =
 191  sum(hrs$(
 192                  (        (day(hrs)>=start_day(e) and
 193                            day(hrs)<=end_day(e) and (spring(e) or summer(e)) ) or
 194   
 195                           (day(hrs)>=start_day_fall and
 196                            day(hrs)<=end_day_fall and fall(e)) or
 197   
 198                           ((day(hrs)>=start_day(e) or day(hrs)<=end_day(e)) and
 199                                   winter(e))
 200   
 201                  )and
 202                  hour(hrs)>=block_start(e,l) and
 203                  hour(hrs)<block_end(e,l)
 204           ), HLC(r,hrs))/(duration(e,l))
 205  ;
 206   
 207   
 208  if(card(e)=1 ,
 209  duration(e,l)$(card(e)=1)=duration(e,l)*365/number_of_days(e);
 210   
 211  );
 212   
 213   
 214   
 215   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\parameters.gms
 217  Parameters
 218             v(i)   CONJECTURAL VARIANTION for production by player /g1 0, g2 0, g3 0, g4 0, fringe 0/
 219             z(i)   CONJECTURAL VARIANTION for capacity by player /g1 0, g2 0, g3 0, g4 0, fringe 0/
 220   
 221   
 222             capital_cost(h) Capital cost in USD per MW /CCGT 1740000, GT 1485000, ST 2120000, Nuclear 4896000/
 223             ic(h)  investment cost USD per MW
 224             om(h) Fixed O&M cost USD per MW  /GT 11200, CCGT 12400, ST 11200, Nuclear 68800/
 225             K0(h,r) existent capacity of technology h in region r before liberalization
 226             kind0(i,h,r) initial capacity by technology and firm in each region in GW
 227             K(r,l) minimum installed capacity available to sell in region r and market segment l
 228             EL_demand(r,e,l,s) Electricity Demand (GW)
 229             prob(s) probability /s1 0.5/
 230   
 231  *Design operating life for steam, GT, and CC from KFUPM generation report.
 232             lifetime(h) plant lifetime /CCGT 30, GT 25, ST 35, Nuclear 60/
 233             discrate discount rate used for power plant investments /0.06/
 234   
 235   
 236   
 237  ;
 238   
 239           prob(s) = 1/card(s);
 240           parameter discoef;
 241           set t dummy time set /2020/
 242           set index /1*1000/
 243               tt(t) /2020/
 244           ;
 245   
 246  *        Discounting plant capital costs over lifetime
 247           discoef(h,t) = sum(tt$(ord(tt)>=ord(t)),1/(1+discrate)**(ord(tt)-ord(t)))/sum(index$(ord(index)<=lifetime(h)),1/(1+discrate)**(ord(index)-1));
 248   
 249           ic(h)=capital_cost(h)*discoef(h,'2020');
 250   
 251   
 252  Parameters ici(h)  investment cost
 253             icr(h)  retirement capacity cost;
 254   
 255  ici(h) = ic(h)
 256  ;
 257  icr(h) = ic(h)*0.1;
 258  *icr(h) = 0;
 259   
 260   
 261   
 262   
 263  parameter    d(e,l) duration of segemt l in region r (deterministic);
 264  d(e,l) = duration(e,l)
 265   
 266   
 267   
 268  parameter mc(h,r,s) marginal cost in USD per MWh  ;
 269   
 270  mc('CCGT',r,s)  = 1.2449 ;
 271  mc('CCGT','EOA',s)  = 1.1833 ;
 272  mc('GT',r,s) =  1.6840;
 273  mc('ST',r,s) =  1.2261;
 274  mc('Nuclear',r,s) = 6.9;
 275  *mc('ULtrsc',r,s)  = 1.2449
 276   
 277   
 278  * Uranium-235 use is in g/GWh
 279  parameter heat_rate(h) fueal burn rate in mmbtu and KG per MWH
 280  /
 281  CCGT               6.09286
 282  GT                 12.818
 283  ST                 8.949
 284  Nuclear            0.120
 285  *Ultrsc              1.217
 286  /
 287  ;
 288   
 289   
 290  parameter fuel_price(h) price of fuels in USD per mmbtu and KG U235
 291  /
 292  CCGT               1.25
 293  GT                 1.25
 294  ST                 1.25
 295  Nuclear            113
 296  *Ultrsc             50
 297  /
 298  ;
 299   
 300  loop(s,
 301  mc(h,r,s) = mc(h,r,s)+heat_rate(h)*fuel_price(h)*1;
 302  *uniform(1,1)
 303  );
 304  ;
 305   
 306   
 307  parameter  beta(h,r,l) available capacity in market l
 308  ;
 309  beta(h,r,l)=1;
 310   
 311  Parameters  a(r,e,l,s) intercept of energy demand curve,
 312              b(r,e,l,s) slope of energy demand curve
 313              theta(r,e,l) intercept of capacity demand curve,
 314              xi(r,e,l) slope of capacity demand curve;
 315   
      Table K0(h,r)
            COA        EOA          SOA          WOA
      CCGT  1360.6     6496.37      0            9144.97
      GT    14185.3    9540.3       4113.14      9150.26
      ST    706        13252.8      1020         16399.2
      ;
       
      Table K0(h,r)
            COA   EOA   SOA   WOA
      CCGT  0     0     0     0
      GT    0     0     0     0
      ST    0     0     0     0
      ;
 331   
 332   
 333  table kind0(i,h,r) firms existing generation capacity in MW
 334   
 335                   COA             EOA             SOA             WOA
 336   
 337  g1.CCGT          1360.6          0               0               0
 338  g1.GT            13069.3         0               0               0
 339  g1.ST            0               0               0               0
 340   
 341  g2.CCGT          0               3929            0               0
 342  g2.GT            0               5831.5          0               0
 343  g2.ST            0               6756            0               0
 344   
 345  g3.CCGT          0               0               0               0
 346  g3.GT            0               0               4113.14         0
 347  g3.ST            0               0               0               0
 348   
 349  g4.CCGT          0               0               0               1288
 350  g4.GT            0               0               0               8549.7
 351  g4.ST            0               0               0               9888.4
 352   
 353  fringe.CCGT      0               2567.37         0               0
 354  fringe.GT        1116            3708.5          0               600.56
 355  fringe.ST        706             6496.8          1020            7129.36
 356  ;
 357   
 358  parameter kind_trans0(n) transmission capacity in MW
 359   /
 360           East    5.22
 361           South   1.5
 362           West    1.2
 363   /
 364        ;
 365  *WOA   0     1.16
 366  kind_trans0(n)=kind_trans0(n)*1000;
 367   
 368  *Data for 2014 inter-regional transmission capacities were obtained from ECRA correspondence.
 369           parameter phi(n)  oper. and maint. cost of transmission in USD per MWH
 370           /
 371            West   3.71
 372            South  3.73
 373            East   3.78
 374           /
                      WOA   SOA     COA     EOA
               WOA   3.49   3.73    3.71    4.33
               SOA   3.73   3.49    4.10    4.50
               COA   3.71   4.1     3.49    3.78
               EOA   4.33   4.5     3.78    3.49
 382  ;
 383   
 384  Parameter capfactor(h) capacity factors for dispatchable plants
 385  /ST      0.885
 386   GT      0.923
 387   CCGT    0.885
 388   Nuclear 0.860
 389  /
 390   
 391   
 392   
 393  parameter  x(i,r,rr)   CONJECTURAL VARIANTION for electricity by player between region r and rr
 394  ;
 395  x(i,r,rr)=v(i);
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\equations.gms
 397  set trans_node(n,r),trans_node_end(n,r);
 398   
 399  trans_node('WEST','WOA')=yes;
 400  trans_node_end('WEST','COA')=yes;
 401   
 402  trans_node('South','SOA')=yes;
 403  trans_node_end('South','WOA')=yes;
 404   
 405  trans_node('East','EOA')=yes;
 406  trans_node_end('East','COA')=yes;
 407   
 408   
 409  set r_trans(n,r,rr), r_trade(n,r,rr);
 410   
 411  r_trans(n,r,rr)$(trans_node(n,r) and trans_node_end(n,rr) and ord(r)<>ord(rr))=yes;
 412  r_trade(n,r,rr)$(r_trans(n,r,rr))=yes;
 413  r_trade(n,rr,r)$(r_trans(n,r,rr))=yes;
 414   
 415   
 416  *         psi.l(n,e,l,s)=1e-3;
 417  *         trade.fx(i,n,r,rr,e,l,s)=0;
 418  *         arbitrage.fx(r,rr,l,s)=0;
 419   
 420  *        Fix capacity price
 421  *         delta.l(r,m) = 0;
 422   
 423  Equations
 424           Eq1(r,e,l,s)              Equation (1)
 425           Eq2(r,e,l)                Equation (1)
 426           Eq9_1(i,h,r,e,l,s)        Equation (8.1)
 427           Eq9_2(i,h,r)              Equation (8.2)
 428           Eq9_3(i,h,r)              Equation (8.3)
 429           Eq9_4(i,n,r,rr,e,l,s)       Equation (8.4)
 430           Eq9_5(i,h,r,e,l,s)
 431           Eq9_6(i,h,r)
 432           Eq9_7(i,h,r)
 433           Eq9_8(i,r,e,l,s)
 434   
 435           Eq10_1(n,r,rr,e,l,s)
 436   
 437           Eq11_1(n,e,l,s)
 438           Eq11_2(n,e,l,s)
 439           Eq11_3(n,e,l,s)
 440   
 441           Eq_q(i,h,r,e,l,s)
 442           Eq_inv(i,h,r)
 443           Eq_ret(i,h,r)
 444           Eq_trade(i,n,r,rr,e,l,s)
 445           Eq_arb(n,r,rr,e,l,s)
 446   
 447  ;
 448  Eq1(r,e,l,s)..    price(r,e,l,s)=e=
 449                       a(r,e,l,s)-b(r,e,l,s)*sum(j,sales(j,r,e,l,s))
 450                       +b(r,e,l,s)*(
 451                            sum((n,rr)$r_trade(n,r,rr),arbitrage(n,r,rr,e,l,s))
 452                            -sum((n,rr)$r_trade(n,rr,r),arbitrage(n,rr,r,e,l,s))
 453                       );
 454   
 455  Eq2(r,e,m) ..        delta(r,e,m)=e=theta(r,e,m)-xi(r,e,m)*sum((j,hh),beta(hh,r,m)*Cap_avail(j,hh,r));
 456   
 457  Eq9_1(i,h,r,e,l,s) ..  price(r,e,l,s)-mc(h,r,s)-b(r,e,l,s)*(1+v(i))*sales(i,r,e,l,s)-lambda_high(i,h,r,e,l,s)+lambda_low(i,h,r,e,l,s)=e= 0 ;
 458  *
 459  Eq9_2(i,h,r)..       sum((e,m),d(e,m)*delta(r,e,m)*beta(h,r,m))
 460                      -sum((e,m),d(e,m)*xi(r,e,m)*(beta(h,r,m)+z(i))*sum(hh,beta(hh,r,m)*Cap_avail(i,hh,r)))
 461                       +sum((e,l,s),prob(s)*d(e,l)*lambda_high(i,h,r,e,l,s)) +alpha(i,h,r) =e=ici(h)+om(h);
 462  *
 463   
 464  Eq9_3(i,h,r)..      -sum((e,m),d(e,m)*delta(r,e,m)*beta(h,r,m))
 465                      +sum((e,m),d(e,m)*xi(r,e,m)*(beta(h,r,m)+z(i))*sum(hh,beta(hh,r,m)*Cap_avail(i,hh,r)))
 466                      -sum((e,l,s),prob(s)*d(e,l)*lambda_high(i,h,r,e,l,s))-eta_high(i,h,r)
 467                       +eta_low(i,h,r) =e= icr(h)-om(h);
 468  *
 469   
 470  Eq9_4(i,n,r,rr,e,l,s)$r_trade(n,r,rr)..
 471           price(rr,e,l,s)-price(r,e,l,s)+zeta(i,n,r,rr,e,l,s)
 472           -price_trans(n,e,l,s)
 473          +b(r,e,l,s)*sales(i,r,e,l,s)*(1+x(i,r,rr))
 474          -b(rr,e,l,s)*sales(i,rr,e,l,s)*(1+x(i,rr,r))
 475                   =e=0;
 476   
 477   
 478  Eq9_5(i,h,r,e,l,s) ..  Cap_avail(i,h,r)-Q(i,h,r,e,l,s)=g=0;
 479  Eq9_6(i,h,r)..         kind0(i,h,r) - ret(i,h,r)=g=0 ;
 480  Eq9_7(i,h,r)..         Cap_avail(i,h,r) =e= kind0(i,h,r)+inv(i,h,r)-ret(i,h,r);
 481   
 482  Eq9_8(i,r,e,l,s)..     sales(i,r,e,l,s)=e=
 483                           sum(h,Q(i,h,r,e,l,s))
 484                                   -sum((n,rr)$(r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s))
 485                                   +sum((n,rr)$(r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s));
 486   
 487  Eq10_1(n,r,rr,e,l,s)$r_trade(n,r,rr)..
 488           price(rr,e,l,s)-price(r,e,l,s)
 489           -price_trans(n,e,l,s)
 490           +shadows_arbitrage(n,r,rr,e,l,s)
 491                                   =e=0        ;
 492   
 493  Eq11_1(n,e,l,s).. price_trans(n,e,l,s)
 494                           -phi(n)-tau(n,e,l,s)/d(e,l)
 495                           =e= 0;
 496   
 497  Eq11_2(n,e,l,s)..   kind_trans0(n)-trans(n,e,l,s)=g=0;
 498   
 499  Eq11_3(n,e,l,s)..
 500   
 501           trans(n,e,l,s)=g=
 502                      abs(
 503                   sum((i,r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),trade(i,n,r,rr,e,l,s))
 504                   -sum((i,r,rr)$(trans_node(n,rr) and r_trade(n,rr,r)),trade(i,n,rr,r,e,l,s))
 505                   +sum((r,rr)$(trans_node(n,r) and r_trade(n,r,rr)),arbitrage(n,r,rr,e,l,s))
 506                   -sum((r,rr)$(trans_node(n,rr) and r_trade(n,rr,r)),arbitrage(n,rr,r,e,l,s))
 507             )
 508           ;
 509   
 510  Eq_q(i,h,r,e,l,s)        .. Q(i,h,r,e,l,s) =g= 0;
 511  Eq_inv(i,h,r)            .. inv(i,h,r) =g= 0;
 512  Eq_ret(i,h,r)            .. ret(i,h,r)=g=0;
 513   
 514   
 515  Eq_trade(i,n,r,rr,e,l,s)$r_trade(n,r,rr)   .. trade(i,n,r,rr,e,l,s)=g=0;
 516   
 517  Eq_arb(n,r,rr,e,l,s)$r_trade(n,r,rr)   .. arbitrage(n,r,rr,e,l,s)=g=0;
 518   
 519  model CMO   /
 520              Eq1,
 521              Eq2,
 522              Eq9_1,
 523              Eq9_2,
 524              Eq9_3,
 525              Eq9_4,
 526              Eq9_5.lambda_high,
 527              Eq9_6.eta_high,
 528              Eq9_7,
 529              Eq9_8,
 530   
 531              Eq10_1,
 532              Eq11_1,
 533              Eq11_2.tau,
 534              Eq11_3.price_trans
 535   
 536              Eq_q.lambda_low,
 537              Eq_trade.zeta,
 538              Eq_inv.alpha,
 539              Eq_ret.eta_low,
 540              Eq_arb.shadows_arbitrage,
 541  /;
 542           option MCP=path;
 543          CMO.scaleopt =1;
 544          tau.scale(n,e,l,s)=1e4;
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\demand_calib.gms
 546   
 547  parameter EL_demgro(r)  projected percentage growth in electricity demand from 2015 to 2020 by region
 548  /
 549  WOA      1.183
 550  EOA      1.368
 551  SOA      1.329
 552  COA      1.217
 553  /
 554  ;
 555   
 556  *        apply growth equally to all demand segments
 557           EL_Demand(r,e,l,s) = ELlcgw(r,e,l)*EL_demgro(r)
 558           ;
 559   
INCLUDE    D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\solar.gms
 561  *Solar DNI curves.
 562  *Saudi Arabia obtained from NREL/KACST. The cities used for each region
 563  *are: West-Jeddah, South-Abha,Central-Solar Village,East-AlQusaimah. The values
 564  *represent average DNI levels for each segment over the seasonal period for each
 565  *region. The data from the year 2002 are used.
 566  *KWT = 'east' until data can be obtained
 567  Table ELsolcurve(l,seasons,r) regional and seasonal solar DNI profiles in W per sq. m
 568                   WOA         SOA        COA         EOA
 569  L1.summer        0.00        0.00       0.00        0.00
 570  L2.summer        110.09      259.83     308.17      301.34
 571  L3.summer        295.82      530.41     701.85      682.11
 572  L4.summer        364.87      436.38     759.63      741.60
 573  L5.summer        286.14      249.75     537.49      556.56
 574  L6.summer        107.01      83.94      171.54      195.74
 575  L7.summer        0.00        0.00       0.00        0.00
 576  L8.summer        0.00        0.00       0.00        0.00
 577   
 578  L1.winter        0.00        0.00       0.00        0.00
 579  L2.winter        118.65      240.74     208.64      147.02
 580  L3.winter        366.36      580.38     544.80      370.83
 581  L4.winter        501.84      646.97     658.06      426.94
 582  L5.winter        385.92      447.85     421.11      253.03
 583  L6.winter        131.80      140.52     99.21       49.90
 584  L7.winter        0.00        0.00       0.00        0.00
 585  L8.winter        0.00        0.00       0.00        0.00
 586   
 587  L1.spring-fall    0.00        0.00       0.00        0.00
 588  L2.spring-fall    133.59      321.61     268.68      185.34
 589  L3.spring-fall    366.00      717.74     631.74      453.89
 590  L4.spring-fall    446.01      725.93     683.32      500.01
 591  L5.spring-fall    326.06      464.02     401.39      292.48
 592  L6.spring-fall    112.45      134.21     81.12       61.02
 593  L7.spring-fall    0.00        0.00       0.00        0.00
 594  L8.spring-fall    0.00        0.00       0.00        0.00
 595  ;
 596  *We let the hourly operation of solar without storage to be proportional to the DNI.
 597  *In actuality, the output from solar plants is equal to some efficiency times the
 598  *irradiance (heat input). For thermal plants, it's the first law thermal efficiency.
 599  *While CSP plants only utilize direct irradiation (DI), the DI is linearly
 600  *proportional to the DNI. From this, we set the solar plant electricity output equal to its
 601  *peak nominal output (i.e. the plant's output capacity) multiplied by the solar irradiance
 602  *normalized by the maximum irradiance value throughout the year.
 603  Parameter ELsolcurvenorm(l,seasons,r) normalized DNI profiles from ELsolcurve;
 604  Elsolcurvenorm(l,e,r)=ELsolcurve(l,e,r)/smax((ll,ee),ELsolcurve(ll,ee,r));
 605   
 606   
 607  parameter solar_cap(r) regional solar capcitity installation in MW
 608  /
 609  COA      3000
 610  EOA      2000
 611  SOA      500
 612  WOA      1000
 613  /
 614   
 615  ;
 616  scalar random, mean, stddev;
 617  mean = 1;
 618  stddev =0.3;
 619  set sumi /1*100/;
 620  scalar CDF_lo, CDF_hi, CDF_alpha,CDF_beta,Z_cdf,X_cdf;
 621   
 622  parameter CDF_x(s) cumulative distribution functions for each scenario s;
 623  CDF_alpha = cdfnorm(0,mean,stddev);
 624  CDF_beta =  cdfnorm(1,mean,stddev);
 625  Z_cdf=CDF_beta-CDF_alpha;
 626  prob(s)=0;
 627  CDF_x(s)=0;
 628  loop(s,
 629   
 630           X_cdf=ord(s)/card(s);
 631           CDF_x(s)= (cdfnorm(X_cdf,mean,stddev)-CDF_alpha)/Z_cdf;
 632           prob(s) = CDF_x(s) - CDF_x(s-1);
 633           EL_Demand(r,e,l,s)= EL_Demand(r,e,l,s)-solar_cap(r)*Elsolcurvenorm(l,e,r)*X_cdf;
 634  );
 635   
 636   
 637  parameter elasticity(r) demand elasticity for eletricity ???;
 638   
 639  parameter  LRMC(r,e,l,s) long run marginal cost in each load segment USD per MWH;
 640   
 641  * long run maringal cost. rescale capacity payment to USD/MW
 642  LRMC(r,e,l,s) =
 643   
 644  smin(h,mc(h,r,s)+(ic(h)+om(h))/sum((ll)$(EL_Demand(r,e,ll,s)>=EL_Demand(r,e,l,s)),d(e,ll)) )
 645  ;
 646   
 647  elasticity(r) = 0.3;
 648   
 649  * Energy Price calibration                                                     *
 650              a(r,e,l,s) = LRMC(r,e,l,s)*(1+1/elasticity(r));
 651              b(r,e,l,s) = LRMC(r,e,l,s)/EL_demand(r,e,l,s)/elasticity(r) ;
 652   
 653   
 654  * Capacity Price calibration                                                   *
 655   
 656   
 657  * assume a flat inverse demand curve for capacity
 658  * price is set to the maximum fixed cost of all generators operating in the market
 659  * soread of the total number of demand hours
 660   
 661  theta(r,e,m) =  0
 662                   +smax(h,(ic(h)+om(h)))/sum((ee,l),d(ee,l))
 663  *                 sum((s),prob(s)*d(e,m))    ;
 664  *                 sum((s,ll)$(EL_Demand(r,e,ll,s)>=EL_Demand(r,e,m,s)),prob(s)*d(e,ll));
 665  ;
 666                   xi(r,e,m) =0;
 667   
 668   
 669   
               a(r,'l1',s) = 1200 +uniform(0,100);
               a(r,'l2',s) = 600 +uniform(0,50);
               a(r,'l3',s) = 300 +uniform(0,10);
       
               b(r,'l1',s) = 0.005 +uniform(0,0.0005);
               b(r,'l2',s) = 0.01 +uniform(0,0.0005);
               b(r,'l3',s) = 0.01 +uniform(0,0.0005);
       
       
      theta(r,e,'l1') = 5000 +uniform(0,200);
      theta(r,e,'l2') = 3000 +uniform(0,100);
      theta(r,e,'l3') = 2000 +uniform(0,50);
       
      xi(r,e,'l1') = 0.00001 ;
      xi(r,e,'l2') = 0.00002 ;
      xi(r,e,'l3') = 0.00003 ;
 688   
 689   
 690   
 691  Option Savepoint=2;
 692  CMO.optfile = 1 ;
 693   
 694  *Execute_Loadpoint 'CMO_p1.gdx';
 695   
 696  *trade.l(i,n,r,rr,e,l,s)$(not r_trans(n,r,rr))=0;
 697  *arbitrage.l(n,r,rr,e,l,s)$(not r_trans(n,r,rr))=0;
 698  *trans.lo(n,e,l,s)=0;
 699  solve CMO using mcp;
 700   
 701   
 702  *$ontext
 703  Parameters
 704           profit(i)           profit per player
 705           roi(i)              return on investment
 706           cus(i)              capacity usage
 707           rop(i)              return on production
 708           roc(i)              return on capacity
 709   
 710   
 711           error_demand(r,e,l)
 712           reserve_capacity(r)
 713           ;
 714   
               error_demand(r,e,l) =
               -sum(s,prob(s)*
                 (EL_demand(r,e,l,s)-
                       (sum((j),sales.l(j,r,e,l,s))-sum((n,rr)$r_trade(n,r,rr),arbitrage.l(n,r,rr,e,l,s))+sum((n,rr)$r_trade(n,rr,r),arbitrage.l(n,rr,r,e,l,s)) )
                 )
               )/sum(s,EL_demand(r,e,l,s));
       
               reserve_capacity(r) = sum((i,h),Cap_avail.l(i,h,r))/smax((e,l),sum(s,EL_demand(r,e,l,s)*prob(s)))-1;
      ;
       
       
       
      profit(i)=sum((h,r,l,s),prob(s)*(price.l(r,l,s)-mc(h,r,s))*q.l(i,h,r,l,s)*d(l,s))-sum((h,r),ici(h)*Cap_avail.l(i,h,r))-sum((h,r),icr(h)*ret.l(i,h,r))+sum((r,m,h,s),capacity_price.l(r,m)*beta(h,r
      ,m)*Cap_avail.l(i,h,r)*prob(s)*d(m,s));
       
       
       
       
      *********compute other indicators
       
      ***return on investment
      roi(i)=profit(i)/(sum((h,r),Cap_avail.l(i,h,r)*ici(h)));
       
      ****capacity usage
      cus(i)=sum((r,l,h,s),prob(s)*d(l,s)*q.l(i,h,r,l,s))/sum((l,h,r,s),prob(s)*d(l,s)*Cap_avail.l(i,h,r));
       
      ****return on production
      rop(i)=profit(i)/sum((r,l,h,s),prob(s)*d(l,s)*q.l(i,h,r,l,s));
       
      ****return on capacity
      roc(i)=profit(i)/(sum((r,l,h,s),prob(s)*d(l,s)*Cap_avail.l(i,h,r)));
       
       
      display q.l, price.l, capacity_price.l,inv.l, Cap_avail.l, ret.l,kind0,profit;
       
       
      display roi,cus,rop,roc;
       
      display shadows_high.l,shadows_retirment_high.l;
      *shadows_low.l,shadows_retirment_low.l,shadows_inv.l
       
 757   
       
      file results /C:Users\c-olivef\AXEL Investment Gams\RESULTS.txt/;
       
      put results;
      put 'Investment model: the value of perfect rationality'//
          'Marginal Costs per generator'//;
       
      loop((k,r,s),put k.tl,@12,s.tl,@24,mc(k,r,s):6:1//);
       
      put 'Investment Costs per generator'//;
       
      loop(k,put k.tl,@12,ic(k):6:1//);
       
       
      put 'Investment per generator'//;
       
      loop((i,k,r),put i.tl,@12,k.tl,@24,inv.l(i,k,r):6:1//);
       
       
      put 'Generation per generator'//;
       
      loop((i,k,r,l,s),put i.tl,@12,k.tl,@24,l.tl,@32,s.tl,@44,q.l(i,k,r,l,s):6:1//);
       
       
      put 'Equilibrium Prices '//;
       
      loop((r,s,l),put s.tl,@12,l.tl,@24,price(r,l,s)//);
       
      put 'Total Profit per generator'//;
       
      loop(i,put i.tl,@12,profit(i):8:2//);
       
      put 'Generator, Return on Investment, Capacity usage, Return on production, Return on Capacity'//;
       
      loop(i,put i.tl,@12,roi(i),@30,cus(i),@50,rop(i),@70,roc(i):10:2//);
       
       

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME CDF_hi OF TYPE PARAM
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/06/16 11:39:50 Page 2
Dynamic Programming Investment
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\run_model.gms
     2        7 INCLUDE        1       7  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Macros.gms
     3       45 FUNCLIBIN      1       9  stodclib
     4       50 INCLUDE        1      14  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\SetsAndVariables.gms
     5      113 INCLUDE        1      15  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\Demand.gms
     6      122 GDXIN          5       9  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\db\load.gdx
     7      216 INCLUDE        1      16  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\parameters.gms
     8      396 INCLUDE        1      17  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\equations.gms
     9      545 INCLUDE        1      18  .D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\demand_calib.gms
    10      560 INCLUDE        9      15  ..D:\Dropbox (KAPSARC)\ES- KEM\KEM_power_market\model\solar.gms


COMPILATION TIME     =        0.031 SECONDS      5 MB  24.1.3 r41464 WEX-WEI
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/06/16 11:39:50 Page 3
Dynamic Programming Investment
Equation Listing    SOLVE CMO Using MCP From line 699


---- Eq1  =E=  Equation (1)

Eq1(COA,winter,l1,s1)..  0.0405142048921555*sales(fringe,COA,winter,l1,s1) + 0.0405142048921555*sales(g1,COA,winter,l1,s1) + 0.0405142048921555*sales(g2,COA,winter,l1,s1)
     
      + 0.0405142048921555*sales(g3,COA,winter,l1,s1) + 0.0405142048921555*sales(g4,COA,winter,l1,s1) + price(COA,winter,l1,s1) - 0.0405142048921555*arbitrage(East,COA,EOA,winter,l1,s1)
     
      + 0.0405142048921555*arbitrage(East,EOA,COA,winter,l1,s1) - 0.0405142048921555*arbitrage(west,COA,WOA,winter,l1,s1) + 0.0405142048921555*arbitrage(west,WOA,COA,winter,l1,s1) =E= 463.509420358676
      ; (LHS = 0, INFES = 463.509420358676 ****)
     
Eq1(COA,winter,l2,s1)..  0.0305236056330215*sales(fringe,COA,winter,l2,s1) + 0.0305236056330215*sales(g1,COA,winter,l2,s1) + 0.0305236056330215*sales(g2,COA,winter,l2,s1)
     
      + 0.0305236056330215*sales(g3,COA,winter,l2,s1) + 0.0305236056330215*sales(g4,COA,winter,l2,s1) + price(COA,winter,l2,s1) - 0.0305236056330215*arbitrage(East,COA,EOA,winter,l2,s1)
     
      + 0.0305236056330215*arbitrage(East,EOA,COA,winter,l2,s1) - 0.0305236056330215*arbitrage(west,COA,WOA,winter,l2,s1) + 0.0305236056330215*arbitrage(west,WOA,COA,winter,l2,s1) =E= 298.188140682154
      ; (LHS = 0, INFES = 298.188140682154 ****)
     
Eq1(COA,winter,l3,s1)..  0.0263685125062269*sales(fringe,COA,winter,l3,s1) + 0.0263685125062269*sales(g1,COA,winter,l3,s1) + 0.0263685125062269*sales(g2,COA,winter,l3,s1)
     
      + 0.0263685125062269*sales(g3,COA,winter,l3,s1) + 0.0263685125062269*sales(g4,COA,winter,l3,s1) + price(COA,winter,l3,s1) - 0.0263685125062269*arbitrage(East,COA,EOA,winter,l3,s1)
     
      + 0.0263685125062269*arbitrage(East,EOA,COA,winter,l3,s1) - 0.0263685125062269*arbitrage(west,COA,WOA,winter,l3,s1) + 0.0263685125062269*arbitrage(west,WOA,COA,winter,l3,s1) =E= 233.240495094949
      ; (LHS = 0, INFES = 233.240495094949 ****)
     
REMAINING 93 ENTRIES SKIPPED


---- Eq2  =E=  Equation (1)

Eq2(COA,winter,l5)..  delta(COA,winter,l5) =E= 40.478970938365 ; (LHS = 0, INFES = 40.478970938365 ****)
     
Eq2(COA,winter,l6)..  delta(COA,winter,l6) =E= 40.478970938365 ; (LHS = 0, INFES = 40.478970938365 ****)
     
Eq2(COA,winter,l7)..  delta(COA,winter,l7) =E= 40.478970938365 ; (LHS = 0, INFES = 40.478970938365 ****)
     
REMAINING 33 ENTRIES SKIPPED


---- Eq9_1  =E=  Equation (8.1)

Eq9_1(fringe,CCGT,COA,winter,l1,s1)..  - 0.0405142048921555*sales(fringe,COA,winter,l1,s1) - lambda_high(fringe,CCGT,COA,winter,l1,s1) + lambda_low(fringe,CCGT,COA,winter,l1,s1)
     
      + price(COA,winter,l1,s1) =E= 8.860975 ; (LHS = 0, INFES = 8.860975 ****)
     
Eq9_1(fringe,CCGT,COA,winter,l2,s1)..  - 0.0305236056330215*sales(fringe,COA,winter,l2,s1) - lambda_high(fringe,CCGT,COA,winter,l2,s1) + lambda_low(fringe,CCGT,COA,winter,l2,s1)
     
      + price(COA,winter,l2,s1) =E= 8.860975 ; (LHS = 0, INFES = 8.860975 ****)
     
Eq9_1(fringe,CCGT,COA,winter,l3,s1)..  - 0.0263685125062269*sales(fringe,COA,winter,l3,s1) - lambda_high(fringe,CCGT,COA,winter,l3,s1) + lambda_low(fringe,CCGT,COA,winter,l3,s1)
     
      + price(COA,winter,l3,s1) =E= 8.860975 ; (LHS = 0, INFES = 8.860975 ****)
     
REMAINING 1917 ENTRIES SKIPPED


---- Eq9_2  =E=  Equation (8.2)

Eq9_2(fringe,CCGT,COA)..  488*lambda_high(fringe,CCGT,COA,winter,l1,s1) + 488*lambda_high(fringe,CCGT,COA,winter,l2,s1) + 488*lambda_high(fringe,CCGT,COA,winter,l3,s1)
     
      + 244*lambda_high(fringe,CCGT,COA,winter,l4,s1) + 366*lambda_high(fringe,CCGT,COA,winter,l5,s1) + 244*lambda_high(fringe,CCGT,COA,winter,l6,s1) + 244*lambda_high(fringe,CCGT,COA,winter,l7,s1)
     
      + 366*lambda_high(fringe,CCGT,COA,winter,l8,s1) + 484*lambda_high(fringe,CCGT,COA,summer,l1,s1) + 484*lambda_high(fringe,CCGT,COA,summer,l2,s1) + 484*lambda_high(fringe,CCGT,COA,summer,l3,s1)
     
      + 242*lambda_high(fringe,CCGT,COA,summer,l4,s1) + 363*lambda_high(fringe,CCGT,COA,summer,l5,s1) + 242*lambda_high(fringe,CCGT,COA,summer,l6,s1) + 242*lambda_high(fringe,CCGT,COA,summer,l7,s1)
     
      + 363*lambda_high(fringe,CCGT,COA,summer,l8,s1) + 488*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1) + 488*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1)
     
      + 488*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1) + 244*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1) + 366*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1)
     
      + 244*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1) + 244*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1) + 366*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1) + 366*delta(COA,winter,l5)
     
      + 244*delta(COA,winter,l6) + 244*delta(COA,winter,l7) + 363*delta(COA,summer,l5) + 242*delta(COA,summer,l6) + 242*delta(COA,summer,l7) + 366*delta(COA,spring-fall,l5)
     
      + 244*delta(COA,spring-fall,l6) + 244*delta(COA,spring-fall,l7) + alpha(fringe,CCGT,COA) =E= 131653.873578002 ; (LHS = 0, INFES = 131653.873578002 ****)
     
Eq9_2(fringe,CCGT,EOA)..  488*lambda_high(fringe,CCGT,EOA,winter,l1,s1) + 488*lambda_high(fringe,CCGT,EOA,winter,l2,s1) + 488*lambda_high(fringe,CCGT,EOA,winter,l3,s1)
     
      + 244*lambda_high(fringe,CCGT,EOA,winter,l4,s1) + 366*lambda_high(fringe,CCGT,EOA,winter,l5,s1) + 244*lambda_high(fringe,CCGT,EOA,winter,l6,s1) + 244*lambda_high(fringe,CCGT,EOA,winter,l7,s1)
     
      + 366*lambda_high(fringe,CCGT,EOA,winter,l8,s1) + 484*lambda_high(fringe,CCGT,EOA,summer,l1,s1) + 484*lambda_high(fringe,CCGT,EOA,summer,l2,s1) + 484*lambda_high(fringe,CCGT,EOA,summer,l3,s1)
     
      + 242*lambda_high(fringe,CCGT,EOA,summer,l4,s1) + 363*lambda_high(fringe,CCGT,EOA,summer,l5,s1) + 242*lambda_high(fringe,CCGT,EOA,summer,l6,s1) + 242*lambda_high(fringe,CCGT,EOA,summer,l7,s1)
     
      + 363*lambda_high(fringe,CCGT,EOA,summer,l8,s1) + 488*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1) + 488*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1)
     
      + 488*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1) + 244*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1) + 366*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1)
     
      + 244*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1) + 244*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1) + 366*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1) + 366*delta(EOA,winter,l5)
     
      + 244*delta(EOA,winter,l6) + 244*delta(EOA,winter,l7) + 363*delta(EOA,summer,l5) + 242*delta(EOA,summer,l6) + 242*delta(EOA,summer,l7) + 366*delta(EOA,spring-fall,l5)
     
      + 244*delta(EOA,spring-fall,l6) + 244*delta(EOA,spring-fall,l7) + alpha(fringe,CCGT,EOA) =E= 131653.873578002 ; (LHS = 0, INFES = 131653.873578002 ****)
     
Eq9_2(fringe,CCGT,SOA)..  488*lambda_high(fringe,CCGT,SOA,winter,l1,s1) + 488*lambda_high(fringe,CCGT,SOA,winter,l2,s1) + 488*lambda_high(fringe,CCGT,SOA,winter,l3,s1)
     
      + 244*lambda_high(fringe,CCGT,SOA,winter,l4,s1) + 366*lambda_high(fringe,CCGT,SOA,winter,l5,s1) + 244*lambda_high(fringe,CCGT,SOA,winter,l6,s1) + 244*lambda_high(fringe,CCGT,SOA,winter,l7,s1)
     
      + 366*lambda_high(fringe,CCGT,SOA,winter,l8,s1) + 484*lambda_high(fringe,CCGT,SOA,summer,l1,s1) + 484*lambda_high(fringe,CCGT,SOA,summer,l2,s1) + 484*lambda_high(fringe,CCGT,SOA,summer,l3,s1)
     
      + 242*lambda_high(fringe,CCGT,SOA,summer,l4,s1) + 363*lambda_high(fringe,CCGT,SOA,summer,l5,s1) + 242*lambda_high(fringe,CCGT,SOA,summer,l6,s1) + 242*lambda_high(fringe,CCGT,SOA,summer,l7,s1)
     
      + 363*lambda_high(fringe,CCGT,SOA,summer,l8,s1) + 488*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1) + 488*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1)
     
      + 488*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1) + 244*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1) + 366*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1)
     
      + 244*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1) + 244*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1) + 366*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1) + 366*delta(SOA,winter,l5)
     
      + 244*delta(SOA,winter,l6) + 244*delta(SOA,winter,l7) + 363*delta(SOA,summer,l5) + 242*delta(SOA,summer,l6) + 242*delta(SOA,summer,l7) + 366*delta(SOA,spring-fall,l5)
     
      + 244*delta(SOA,spring-fall,l6) + 244*delta(SOA,spring-fall,l7) + alpha(fringe,CCGT,SOA) =E= 131653.873578002 ; (LHS = 0, INFES = 131653.873578002 ****)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_3  =E=  Equation (8.3)

Eq9_3(fringe,CCGT,COA)..  - 488*lambda_high(fringe,CCGT,COA,winter,l1,s1) - 488*lambda_high(fringe,CCGT,COA,winter,l2,s1) - 488*lambda_high(fringe,CCGT,COA,winter,l3,s1)
     
      - 244*lambda_high(fringe,CCGT,COA,winter,l4,s1) - 366*lambda_high(fringe,CCGT,COA,winter,l5,s1) - 244*lambda_high(fringe,CCGT,COA,winter,l6,s1) - 244*lambda_high(fringe,CCGT,COA,winter,l7,s1)
     
      - 366*lambda_high(fringe,CCGT,COA,winter,l8,s1) - 484*lambda_high(fringe,CCGT,COA,summer,l1,s1) - 484*lambda_high(fringe,CCGT,COA,summer,l2,s1) - 484*lambda_high(fringe,CCGT,COA,summer,l3,s1)
     
      - 242*lambda_high(fringe,CCGT,COA,summer,l4,s1) - 363*lambda_high(fringe,CCGT,COA,summer,l5,s1) - 242*lambda_high(fringe,CCGT,COA,summer,l6,s1) - 242*lambda_high(fringe,CCGT,COA,summer,l7,s1)
     
      - 363*lambda_high(fringe,CCGT,COA,summer,l8,s1) - 488*lambda_high(fringe,CCGT,COA,spring-fall,l1,s1) - 488*lambda_high(fringe,CCGT,COA,spring-fall,l2,s1)
     
      - 488*lambda_high(fringe,CCGT,COA,spring-fall,l3,s1) - 244*lambda_high(fringe,CCGT,COA,spring-fall,l4,s1) - 366*lambda_high(fringe,CCGT,COA,spring-fall,l5,s1)
     
      - 244*lambda_high(fringe,CCGT,COA,spring-fall,l6,s1) - 244*lambda_high(fringe,CCGT,COA,spring-fall,l7,s1) - 366*lambda_high(fringe,CCGT,COA,spring-fall,l8,s1) - 366*delta(COA,winter,l5)
     
      - 244*delta(COA,winter,l6) - 244*delta(COA,winter,l7) - 363*delta(COA,summer,l5) - 242*delta(COA,summer,l6) - 242*delta(COA,summer,l7) - 366*delta(COA,spring-fall,l5)
     
      - 244*delta(COA,spring-fall,l6) - 244*delta(COA,spring-fall,l7) - eta_high(fringe,CCGT,COA) + eta_low(fringe,CCGT,COA) =E= -474.612642199787 ; (LHS = 0, INFES = 474.612642199787 ****)
     
Eq9_3(fringe,CCGT,EOA)..  - 488*lambda_high(fringe,CCGT,EOA,winter,l1,s1) - 488*lambda_high(fringe,CCGT,EOA,winter,l2,s1) - 488*lambda_high(fringe,CCGT,EOA,winter,l3,s1)
     
      - 244*lambda_high(fringe,CCGT,EOA,winter,l4,s1) - 366*lambda_high(fringe,CCGT,EOA,winter,l5,s1) - 244*lambda_high(fringe,CCGT,EOA,winter,l6,s1) - 244*lambda_high(fringe,CCGT,EOA,winter,l7,s1)
     
      - 366*lambda_high(fringe,CCGT,EOA,winter,l8,s1) - 484*lambda_high(fringe,CCGT,EOA,summer,l1,s1) - 484*lambda_high(fringe,CCGT,EOA,summer,l2,s1) - 484*lambda_high(fringe,CCGT,EOA,summer,l3,s1)
     
      - 242*lambda_high(fringe,CCGT,EOA,summer,l4,s1) - 363*lambda_high(fringe,CCGT,EOA,summer,l5,s1) - 242*lambda_high(fringe,CCGT,EOA,summer,l6,s1) - 242*lambda_high(fringe,CCGT,EOA,summer,l7,s1)
     
      - 363*lambda_high(fringe,CCGT,EOA,summer,l8,s1) - 488*lambda_high(fringe,CCGT,EOA,spring-fall,l1,s1) - 488*lambda_high(fringe,CCGT,EOA,spring-fall,l2,s1)
     
      - 488*lambda_high(fringe,CCGT,EOA,spring-fall,l3,s1) - 244*lambda_high(fringe,CCGT,EOA,spring-fall,l4,s1) - 366*lambda_high(fringe,CCGT,EOA,spring-fall,l5,s1)
     
      - 244*lambda_high(fringe,CCGT,EOA,spring-fall,l6,s1) - 244*lambda_high(fringe,CCGT,EOA,spring-fall,l7,s1) - 366*lambda_high(fringe,CCGT,EOA,spring-fall,l8,s1) - 366*delta(EOA,winter,l5)
     
      - 244*delta(EOA,winter,l6) - 244*delta(EOA,winter,l7) - 363*delta(EOA,summer,l5) - 242*delta(EOA,summer,l6) - 242*delta(EOA,summer,l7) - 366*delta(EOA,spring-fall,l5)
     
      - 244*delta(EOA,spring-fall,l6) - 244*delta(EOA,spring-fall,l7) - eta_high(fringe,CCGT,EOA) + eta_low(fringe,CCGT,EOA) =E= -474.612642199787 ; (LHS = 0, INFES = 474.612642199787 ****)
     
Eq9_3(fringe,CCGT,SOA)..  - 488*lambda_high(fringe,CCGT,SOA,winter,l1,s1) - 488*lambda_high(fringe,CCGT,SOA,winter,l2,s1) - 488*lambda_high(fringe,CCGT,SOA,winter,l3,s1)
     
      - 244*lambda_high(fringe,CCGT,SOA,winter,l4,s1) - 366*lambda_high(fringe,CCGT,SOA,winter,l5,s1) - 244*lambda_high(fringe,CCGT,SOA,winter,l6,s1) - 244*lambda_high(fringe,CCGT,SOA,winter,l7,s1)
     
      - 366*lambda_high(fringe,CCGT,SOA,winter,l8,s1) - 484*lambda_high(fringe,CCGT,SOA,summer,l1,s1) - 484*lambda_high(fringe,CCGT,SOA,summer,l2,s1) - 484*lambda_high(fringe,CCGT,SOA,summer,l3,s1)
     
      - 242*lambda_high(fringe,CCGT,SOA,summer,l4,s1) - 363*lambda_high(fringe,CCGT,SOA,summer,l5,s1) - 242*lambda_high(fringe,CCGT,SOA,summer,l6,s1) - 242*lambda_high(fringe,CCGT,SOA,summer,l7,s1)
     
      - 363*lambda_high(fringe,CCGT,SOA,summer,l8,s1) - 488*lambda_high(fringe,CCGT,SOA,spring-fall,l1,s1) - 488*lambda_high(fringe,CCGT,SOA,spring-fall,l2,s1)
     
      - 488*lambda_high(fringe,CCGT,SOA,spring-fall,l3,s1) - 244*lambda_high(fringe,CCGT,SOA,spring-fall,l4,s1) - 366*lambda_high(fringe,CCGT,SOA,spring-fall,l5,s1)
     
      - 244*lambda_high(fringe,CCGT,SOA,spring-fall,l6,s1) - 244*lambda_high(fringe,CCGT,SOA,spring-fall,l7,s1) - 366*lambda_high(fringe,CCGT,SOA,spring-fall,l8,s1) - 366*delta(SOA,winter,l5)
     
      - 244*delta(SOA,winter,l6) - 244*delta(SOA,winter,l7) - 363*delta(SOA,summer,l5) - 242*delta(SOA,summer,l6) - 242*delta(SOA,summer,l7) - 366*delta(SOA,spring-fall,l5)
     
      - 244*delta(SOA,spring-fall,l6) - 244*delta(SOA,spring-fall,l7) - eta_high(fringe,CCGT,SOA) + eta_low(fringe,CCGT,SOA) =E= -474.612642199787 ; (LHS = 0, INFES = 474.612642199787 ****)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_4  =E=  Equation (8.4)

Eq9_4(fringe,East,COA,EOA,winter,l1,s1)..  0.0405142048921555*sales(fringe,COA,winter,l1,s1) - 0.0245167167204496*sales(fringe,EOA,winter,l1,s1) - price(COA,winter,l1,s1) + price(EOA,winter,l1,s1)
     
      - price_trans(East,winter,l1,s1) + zeta(fringe,East,COA,EOA,winter,l1,s1) =E= 0 ; (LHS = 0)
     
Eq9_4(fringe,East,COA,EOA,winter,l2,s1)..  0.0305236056330215*sales(fringe,COA,winter,l2,s1) - 0.0165540090678953*sales(fringe,EOA,winter,l2,s1) - price(COA,winter,l2,s1) + price(EOA,winter,l2,s1)
     
      - price_trans(East,winter,l2,s1) + zeta(fringe,East,COA,EOA,winter,l2,s1) =E= 0 ; (LHS = 0)
     
Eq9_4(fringe,East,COA,EOA,winter,l3,s1)..  0.0263685125062269*sales(fringe,COA,winter,l3,s1) - 0.0132887445476815*sales(fringe,EOA,winter,l3,s1) - price(COA,winter,l3,s1) + price(EOA,winter,l3,s1)
     
      - price_trans(East,winter,l3,s1) + zeta(fringe,East,COA,EOA,winter,l3,s1) =E= 0 ; (LHS = 0)
     
REMAINING 717 ENTRIES SKIPPED


---- Eq9_5  =G=  

Eq9_5(fringe,CCGT,COA,winter,l1,s1)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l1,s1) =G= 0 ; (LHS = 0)
     
Eq9_5(fringe,CCGT,COA,winter,l2,s1)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l2,s1) =G= 0 ; (LHS = 0)
     
Eq9_5(fringe,CCGT,COA,winter,l3,s1)..  Cap_avail(fringe,CCGT,COA) - Q(fringe,CCGT,COA,winter,l3,s1) =G= 0 ; (LHS = 0)
     
REMAINING 1917 ENTRIES SKIPPED


---- Eq9_6  =G=  

Eq9_6(fringe,CCGT,COA)..  - ret(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq9_6(fringe,CCGT,EOA)..  - ret(fringe,CCGT,EOA) =G= -2567.37 ; (LHS = 0)
     
Eq9_6(fringe,CCGT,SOA)..  - ret(fringe,CCGT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_7  =E=  

Eq9_7(fringe,CCGT,COA)..  - inv(fringe,CCGT,COA) + ret(fringe,CCGT,COA) + Cap_avail(fringe,CCGT,COA) =E= 0 ; (LHS = 0)
     
Eq9_7(fringe,CCGT,EOA)..  - inv(fringe,CCGT,EOA) + ret(fringe,CCGT,EOA) + Cap_avail(fringe,CCGT,EOA) =E= 2567.37 ; (LHS = 0, INFES = 2567.37 ****)
     
Eq9_7(fringe,CCGT,SOA)..  - inv(fringe,CCGT,SOA) + ret(fringe,CCGT,SOA) + Cap_avail(fringe,CCGT,SOA) =E= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq9_8  =E=  

Eq9_8(fringe,COA,winter,l1,s1)..  - Q(fringe,CCGT,COA,winter,l1,s1) - Q(fringe,GT,COA,winter,l1,s1) - Q(fringe,ST,COA,winter,l1,s1) - Q(fringe,Nuclear,COA,winter,l1,s1)
     
      + sales(fringe,COA,winter,l1,s1) + trade(fringe,East,COA,EOA,winter,l1,s1) - trade(fringe,East,EOA,COA,winter,l1,s1) + trade(fringe,west,COA,WOA,winter,l1,s1)
     
      - trade(fringe,west,WOA,COA,winter,l1,s1) =E= 0 ; (LHS = 0)
     
Eq9_8(fringe,COA,winter,l2,s1)..  - Q(fringe,CCGT,COA,winter,l2,s1) - Q(fringe,GT,COA,winter,l2,s1) - Q(fringe,ST,COA,winter,l2,s1) - Q(fringe,Nuclear,COA,winter,l2,s1)
     
      + sales(fringe,COA,winter,l2,s1) + trade(fringe,East,COA,EOA,winter,l2,s1) - trade(fringe,East,EOA,COA,winter,l2,s1) + trade(fringe,west,COA,WOA,winter,l2,s1)
     
      - trade(fringe,west,WOA,COA,winter,l2,s1) =E= 0 ; (LHS = 0)
     
Eq9_8(fringe,COA,winter,l3,s1)..  - Q(fringe,CCGT,COA,winter,l3,s1) - Q(fringe,GT,COA,winter,l3,s1) - Q(fringe,ST,COA,winter,l3,s1) - Q(fringe,Nuclear,COA,winter,l3,s1)
     
      + sales(fringe,COA,winter,l3,s1) + trade(fringe,East,COA,EOA,winter,l3,s1) - trade(fringe,East,EOA,COA,winter,l3,s1) + trade(fringe,west,COA,WOA,winter,l3,s1)
     
      - trade(fringe,west,WOA,COA,winter,l3,s1) =E= 0 ; (LHS = 0)
     
REMAINING 477 ENTRIES SKIPPED


---- Eq10_1  =E=  

Eq10_1(East,COA,EOA,winter,l1,s1)..  - price(COA,winter,l1,s1) + price(EOA,winter,l1,s1) - price_trans(East,winter,l1,s1) + shadows_arbitrage(East,COA,EOA,winter,l1,s1) =E= 0 ; (LHS = 0)
     
Eq10_1(East,COA,EOA,winter,l2,s1)..  - price(COA,winter,l2,s1) + price(EOA,winter,l2,s1) - price_trans(East,winter,l2,s1) + shadows_arbitrage(East,COA,EOA,winter,l2,s1) =E= 0 ; (LHS = 0)
     
Eq10_1(East,COA,EOA,winter,l3,s1)..  - price(COA,winter,l3,s1) + price(EOA,winter,l3,s1) - price_trans(East,winter,l3,s1) + shadows_arbitrage(East,COA,EOA,winter,l3,s1) =E= 0 ; (LHS = 0)
     
REMAINING 141 ENTRIES SKIPPED


---- Eq11_1  =E=  

Eq11_1(East,winter,l1,s1)..  price_trans(East,winter,l1,s1) - 20.4918032786885*tau(East,winter,l1,s1) =E= 3.78 ; (LHS = 0, INFES = 3.78 ****)
     
Eq11_1(East,winter,l2,s1)..  price_trans(East,winter,l2,s1) - 20.4918032786885*tau(East,winter,l2,s1) =E= 3.78 ; (LHS = 0, INFES = 3.78 ****)
     
Eq11_1(East,winter,l3,s1)..  price_trans(East,winter,l3,s1) - 20.4918032786885*tau(East,winter,l3,s1) =E= 3.78 ; (LHS = 0, INFES = 3.78 ****)
     
REMAINING 69 ENTRIES SKIPPED


---- Eq11_2  =G=  

Eq11_2(East,winter,l1,s1)..  - trans(East,winter,l1,s1) =G= -5220 ; (LHS = 0)
     
Eq11_2(East,winter,l2,s1)..  - trans(East,winter,l2,s1) =G= -5220 ; (LHS = 0)
     
Eq11_2(East,winter,l3,s1)..  - trans(East,winter,l3,s1) =G= -5220 ; (LHS = 0)
     
REMAINING 69 ENTRIES SKIPPED


---- Eq11_3  =G=  

Eq11_3(East,winter,l1,s1)..  trans(East,winter,l1,s1) =G= 0 ; (LHS = 0)
     
Eq11_3(East,winter,l2,s1)..  trans(East,winter,l2,s1) =G= 0 ; (LHS = 0)
     
Eq11_3(East,winter,l3,s1)..  trans(East,winter,l3,s1) =G= 0 ; (LHS = 0)
     
REMAINING 69 ENTRIES SKIPPED


---- Eq_q  =G=  

Eq_q(fringe,CCGT,COA,winter,l1,s1)..  Q(fringe,CCGT,COA,winter,l1,s1) =G= 0 ; (LHS = 0)
     
Eq_q(fringe,CCGT,COA,winter,l2,s1)..  Q(fringe,CCGT,COA,winter,l2,s1) =G= 0 ; (LHS = 0)
     
Eq_q(fringe,CCGT,COA,winter,l3,s1)..  Q(fringe,CCGT,COA,winter,l3,s1) =G= 0 ; (LHS = 0)
     
REMAINING 1917 ENTRIES SKIPPED


---- Eq_trade  =G=  

Eq_trade(fringe,East,COA,EOA,winter,l1,s1)..  trade(fringe,East,COA,EOA,winter,l1,s1) =G= 0 ; (LHS = 0)
     
Eq_trade(fringe,East,COA,EOA,winter,l2,s1)..  trade(fringe,East,COA,EOA,winter,l2,s1) =G= 0 ; (LHS = 0)
     
Eq_trade(fringe,East,COA,EOA,winter,l3,s1)..  trade(fringe,East,COA,EOA,winter,l3,s1) =G= 0 ; (LHS = 0)
     
REMAINING 717 ENTRIES SKIPPED


---- Eq_inv  =G=  

Eq_inv(fringe,CCGT,COA)..  inv(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq_inv(fringe,CCGT,EOA)..  inv(fringe,CCGT,EOA) =G= 0 ; (LHS = 0)
     
Eq_inv(fringe,CCGT,SOA)..  inv(fringe,CCGT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq_ret  =G=  

Eq_ret(fringe,CCGT,COA)..  ret(fringe,CCGT,COA) =G= 0 ; (LHS = 0)
     
Eq_ret(fringe,CCGT,EOA)..  ret(fringe,CCGT,EOA) =G= 0 ; (LHS = 0)
     
Eq_ret(fringe,CCGT,SOA)..  ret(fringe,CCGT,SOA) =G= 0 ; (LHS = 0)
     
REMAINING 77 ENTRIES SKIPPED


---- Eq_arb  =G=  

Eq_arb(East,COA,EOA,winter,l1,s1)..  arbitrage(East,COA,EOA,winter,l1,s1) =G= 0 ; (LHS = 0)
     
Eq_arb(East,COA,EOA,winter,l2,s1)..  arbitrage(East,COA,EOA,winter,l2,s1) =G= 0 ; (LHS = 0)
     
Eq_arb(East,COA,EOA,winter,l3,s1)..  arbitrage(East,COA,EOA,winter,l3,s1) =G= 0 ; (LHS = 0)
     
REMAINING 141 ENTRIES SKIPPED

GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/06/16 11:39:50 Page 4
Dynamic Programming Investment
Column Listing      SOLVE CMO Using MCP From line 699


---- inv  investment by player i in technology h

inv(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_7(fringe,CCGT,COA)
        1       Eq_inv(fringe,CCGT,COA)

inv(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_7(fringe,CCGT,EOA)
        1       Eq_inv(fringe,CCGT,EOA)

inv(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_7(fringe,CCGT,SOA)
        1       Eq_inv(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- ret  retirement of technology h in region r by player i

ret(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,COA)
        1       Eq9_7(fringe,CCGT,COA)
        1       Eq_ret(fringe,CCGT,COA)

ret(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,EOA)
        1       Eq9_7(fringe,CCGT,EOA)
        1       Eq_ret(fringe,CCGT,EOA)

ret(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_6(fringe,CCGT,SOA)
        1       Eq9_7(fringe,CCGT,SOA)
        1       Eq_ret(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- Cap_avail  available capacity of player i of technolgy h in region r in MW

Cap_avail(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_5(fringe,CCGT,COA,winter,l1,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l2,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l3,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l4,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l5,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l6,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l7,s1)
        1       Eq9_5(fringe,CCGT,COA,winter,l8,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l1,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l2,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l3,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l4,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l5,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l6,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l7,s1)
        1       Eq9_5(fringe,CCGT,COA,summer,l8,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l1,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l2,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l3,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l4,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l5,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l6,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l7,s1)
        1       Eq9_5(fringe,CCGT,COA,spring-fall,l8,s1)
        1       Eq9_7(fringe,CCGT,COA)

Cap_avail(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_5(fringe,CCGT,EOA,winter,l1,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l2,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l3,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l4,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l5,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l6,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l7,s1)
        1       Eq9_5(fringe,CCGT,EOA,winter,l8,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l1,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l2,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l3,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l4,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l5,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l6,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l7,s1)
        1       Eq9_5(fringe,CCGT,EOA,summer,l8,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l1,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l2,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l3,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l4,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l5,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l6,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l7,s1)
        1       Eq9_5(fringe,CCGT,EOA,spring-fall,l8,s1)
        1       Eq9_7(fringe,CCGT,EOA)

Cap_avail(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_5(fringe,CCGT,SOA,winter,l1,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l2,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l3,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l4,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l5,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l6,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l7,s1)
        1       Eq9_5(fringe,CCGT,SOA,winter,l8,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l1,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l2,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l3,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l4,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l5,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l6,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l7,s1)
        1       Eq9_5(fringe,CCGT,SOA,summer,l8,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l1,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l2,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l3,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l4,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l5,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l6,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l7,s1)
        1       Eq9_5(fringe,CCGT,SOA,spring-fall,l8,s1)
        1       Eq9_7(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- Q  generation quantity from a player i at market l in scenario in MW

Q(fringe,CCGT,COA,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l1,s1)
       -1       Eq9_8(fringe,COA,winter,l1,s1)
        1       Eq_q(fringe,CCGT,COA,winter,l1,s1)

Q(fringe,CCGT,COA,winter,l2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l2,s1)
       -1       Eq9_8(fringe,COA,winter,l2,s1)
        1       Eq_q(fringe,CCGT,COA,winter,l2,s1)

Q(fringe,CCGT,COA,winter,l3,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_5(fringe,CCGT,COA,winter,l3,s1)
       -1       Eq9_8(fringe,COA,winter,l3,s1)
        1       Eq_q(fringe,CCGT,COA,winter,l3,s1)

REMAINING 1917 ENTRIES SKIPPED

---- sales  sales of firm in region r market l scenario s in MW

sales(fringe,COA,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        0.0405  Eq1(COA,winter,l1,s1)
       -0.0405  Eq9_1(fringe,CCGT,COA,winter,l1,s1)
       -0.0405  Eq9_1(fringe,GT,COA,winter,l1,s1)
       -0.0405  Eq9_1(fringe,ST,COA,winter,l1,s1)
       -0.0405  Eq9_1(fringe,Nuclear,COA,winter,l1,s1)
        0.0405  Eq9_4(fringe,East,COA,EOA,winter,l1,s1)
       -0.0405  Eq9_4(fringe,East,EOA,COA,winter,l1,s1)
        0.0405  Eq9_4(fringe,west,COA,WOA,winter,l1,s1)
       -0.0405  Eq9_4(fringe,west,WOA,COA,winter,l1,s1)
        1       Eq9_8(fringe,COA,winter,l1,s1)

sales(fringe,COA,winter,l2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        0.0305  Eq1(COA,winter,l2,s1)
       -0.0305  Eq9_1(fringe,CCGT,COA,winter,l2,s1)
       -0.0305  Eq9_1(fringe,GT,COA,winter,l2,s1)
       -0.0305  Eq9_1(fringe,ST,COA,winter,l2,s1)
       -0.0305  Eq9_1(fringe,Nuclear,COA,winter,l2,s1)
        0.0305  Eq9_4(fringe,East,COA,EOA,winter,l2,s1)
       -0.0305  Eq9_4(fringe,East,EOA,COA,winter,l2,s1)
        0.0305  Eq9_4(fringe,west,COA,WOA,winter,l2,s1)
       -0.0305  Eq9_4(fringe,west,WOA,COA,winter,l2,s1)
        1       Eq9_8(fringe,COA,winter,l2,s1)

sales(fringe,COA,winter,l3,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        0.0264  Eq1(COA,winter,l3,s1)
       -0.0264  Eq9_1(fringe,CCGT,COA,winter,l3,s1)
       -0.0264  Eq9_1(fringe,GT,COA,winter,l3,s1)
       -0.0264  Eq9_1(fringe,ST,COA,winter,l3,s1)
       -0.0264  Eq9_1(fringe,Nuclear,COA,winter,l3,s1)
        0.0264  Eq9_4(fringe,East,COA,EOA,winter,l3,s1)
       -0.0264  Eq9_4(fringe,East,EOA,COA,winter,l3,s1)
        0.0264  Eq9_4(fringe,west,COA,WOA,winter,l3,s1)
       -0.0264  Eq9_4(fringe,west,WOA,COA,winter,l3,s1)
        1       Eq9_8(fringe,COA,winter,l3,s1)

REMAINING 477 ENTRIES SKIPPED

---- lambda_high  shadow prices for the high capacity constraint in USD per  MWh

lambda_high(fringe,CCGT,COA,winter,l1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_1(fringe,CCGT,COA,winter,l1,s1)
      488       Eq9_2(fringe,CCGT,COA)
     -488       Eq9_3(fringe,CCGT,COA)

lambda_high(fringe,CCGT,COA,winter,l2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_1(fringe,CCGT,COA,winter,l2,s1)
      488       Eq9_2(fringe,CCGT,COA)
     -488       Eq9_3(fringe,CCGT,COA)

lambda_high(fringe,CCGT,COA,winter,l3,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_1(fringe,CCGT,COA,winter,l3,s1)
      488       Eq9_2(fringe,CCGT,COA)
     -488       Eq9_3(fringe,CCGT,COA)

REMAINING 1917 ENTRIES SKIPPED

---- lambda_low  shadows prices for low constraint in USD per  MWh

lambda_low(fringe,CCGT,COA,winter,l1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1)

lambda_low(fringe,CCGT,COA,winter,l2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_1(fringe,CCGT,COA,winter,l2,s1)

lambda_low(fringe,CCGT,COA,winter,l3,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_1(fringe,CCGT,COA,winter,l3,s1)

REMAINING 1917 ENTRIES SKIPPED

---- delta  shadow prices for the capacity market in USD per  MW per hour

delta(COA,winter,l5)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq2(COA,winter,l5)
      366       Eq9_2(fringe,CCGT,COA)
      366       Eq9_2(fringe,GT,COA)
      366       Eq9_2(fringe,ST,COA)
      366       Eq9_2(fringe,Nuclear,COA)
      366       Eq9_2(g1,CCGT,COA)
      366       Eq9_2(g1,GT,COA)
      366       Eq9_2(g1,ST,COA)
      366       Eq9_2(g1,Nuclear,COA)
      366       Eq9_2(g2,CCGT,COA)
      366       Eq9_2(g2,GT,COA)
      366       Eq9_2(g2,ST,COA)
      366       Eq9_2(g2,Nuclear,COA)
      366       Eq9_2(g3,CCGT,COA)
      366       Eq9_2(g3,GT,COA)
      366       Eq9_2(g3,ST,COA)
      366       Eq9_2(g3,Nuclear,COA)
      366       Eq9_2(g4,CCGT,COA)
      366       Eq9_2(g4,GT,COA)
      366       Eq9_2(g4,ST,COA)
      366       Eq9_2(g4,Nuclear,COA)
     -366       Eq9_3(fringe,CCGT,COA)
     -366       Eq9_3(fringe,GT,COA)
     -366       Eq9_3(fringe,ST,COA)
     -366       Eq9_3(fringe,Nuclear,COA)
     -366       Eq9_3(g1,CCGT,COA)
     -366       Eq9_3(g1,GT,COA)
     -366       Eq9_3(g1,ST,COA)
     -366       Eq9_3(g1,Nuclear,COA)
     -366       Eq9_3(g2,CCGT,COA)
     -366       Eq9_3(g2,GT,COA)
     -366       Eq9_3(g2,ST,COA)
     -366       Eq9_3(g2,Nuclear,COA)
     -366       Eq9_3(g3,CCGT,COA)
     -366       Eq9_3(g3,GT,COA)
     -366       Eq9_3(g3,ST,COA)
     -366       Eq9_3(g3,Nuclear,COA)
     -366       Eq9_3(g4,CCGT,COA)
     -366       Eq9_3(g4,GT,COA)
     -366       Eq9_3(g4,ST,COA)
     -366       Eq9_3(g4,Nuclear,COA)

delta(COA,winter,l6)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq2(COA,winter,l6)
      244       Eq9_2(fringe,CCGT,COA)
      244       Eq9_2(fringe,GT,COA)
      244       Eq9_2(fringe,ST,COA)
      244       Eq9_2(fringe,Nuclear,COA)
      244       Eq9_2(g1,CCGT,COA)
      244       Eq9_2(g1,GT,COA)
      244       Eq9_2(g1,ST,COA)
      244       Eq9_2(g1,Nuclear,COA)
      244       Eq9_2(g2,CCGT,COA)
      244       Eq9_2(g2,GT,COA)
      244       Eq9_2(g2,ST,COA)
      244       Eq9_2(g2,Nuclear,COA)
      244       Eq9_2(g3,CCGT,COA)
      244       Eq9_2(g3,GT,COA)
      244       Eq9_2(g3,ST,COA)
      244       Eq9_2(g3,Nuclear,COA)
      244       Eq9_2(g4,CCGT,COA)
      244       Eq9_2(g4,GT,COA)
      244       Eq9_2(g4,ST,COA)
      244       Eq9_2(g4,Nuclear,COA)
     -244       Eq9_3(fringe,CCGT,COA)
     -244       Eq9_3(fringe,GT,COA)
     -244       Eq9_3(fringe,ST,COA)
     -244       Eq9_3(fringe,Nuclear,COA)
     -244       Eq9_3(g1,CCGT,COA)
     -244       Eq9_3(g1,GT,COA)
     -244       Eq9_3(g1,ST,COA)
     -244       Eq9_3(g1,Nuclear,COA)
     -244       Eq9_3(g2,CCGT,COA)
     -244       Eq9_3(g2,GT,COA)
     -244       Eq9_3(g2,ST,COA)
     -244       Eq9_3(g2,Nuclear,COA)
     -244       Eq9_3(g3,CCGT,COA)
     -244       Eq9_3(g3,GT,COA)
     -244       Eq9_3(g3,ST,COA)
     -244       Eq9_3(g3,Nuclear,COA)
     -244       Eq9_3(g4,CCGT,COA)
     -244       Eq9_3(g4,GT,COA)
     -244       Eq9_3(g4,ST,COA)
     -244       Eq9_3(g4,Nuclear,COA)

delta(COA,winter,l7)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq2(COA,winter,l7)
      244       Eq9_2(fringe,CCGT,COA)
      244       Eq9_2(fringe,GT,COA)
      244       Eq9_2(fringe,ST,COA)
      244       Eq9_2(fringe,Nuclear,COA)
      244       Eq9_2(g1,CCGT,COA)
      244       Eq9_2(g1,GT,COA)
      244       Eq9_2(g1,ST,COA)
      244       Eq9_2(g1,Nuclear,COA)
      244       Eq9_2(g2,CCGT,COA)
      244       Eq9_2(g2,GT,COA)
      244       Eq9_2(g2,ST,COA)
      244       Eq9_2(g2,Nuclear,COA)
      244       Eq9_2(g3,CCGT,COA)
      244       Eq9_2(g3,GT,COA)
      244       Eq9_2(g3,ST,COA)
      244       Eq9_2(g3,Nuclear,COA)
      244       Eq9_2(g4,CCGT,COA)
      244       Eq9_2(g4,GT,COA)
      244       Eq9_2(g4,ST,COA)
      244       Eq9_2(g4,Nuclear,COA)
     -244       Eq9_3(fringe,CCGT,COA)
     -244       Eq9_3(fringe,GT,COA)
     -244       Eq9_3(fringe,ST,COA)
     -244       Eq9_3(fringe,Nuclear,COA)
     -244       Eq9_3(g1,CCGT,COA)
     -244       Eq9_3(g1,GT,COA)
     -244       Eq9_3(g1,ST,COA)
     -244       Eq9_3(g1,Nuclear,COA)
     -244       Eq9_3(g2,CCGT,COA)
     -244       Eq9_3(g2,GT,COA)
     -244       Eq9_3(g2,ST,COA)
     -244       Eq9_3(g2,Nuclear,COA)
     -244       Eq9_3(g3,CCGT,COA)
     -244       Eq9_3(g3,GT,COA)
     -244       Eq9_3(g3,ST,COA)
     -244       Eq9_3(g3,Nuclear,COA)
     -244       Eq9_3(g4,CCGT,COA)
     -244       Eq9_3(g4,GT,COA)
     -244       Eq9_3(g4,ST,COA)
     -244       Eq9_3(g4,Nuclear,COA)

REMAINING 33 ENTRIES SKIPPED

---- price  energy price in USD per MWh

price(COA,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq1(COA,winter,l1,s1)
        1       Eq9_1(fringe,CCGT,COA,winter,l1,s1)
        1       Eq9_1(fringe,GT,COA,winter,l1,s1)
        1       Eq9_1(fringe,ST,COA,winter,l1,s1)
        1       Eq9_1(fringe,Nuclear,COA,winter,l1,s1)
        1       Eq9_1(g1,CCGT,COA,winter,l1,s1)
        1       Eq9_1(g1,GT,COA,winter,l1,s1)
        1       Eq9_1(g1,ST,COA,winter,l1,s1)
        1       Eq9_1(g1,Nuclear,COA,winter,l1,s1)
        1       Eq9_1(g2,CCGT,COA,winter,l1,s1)
        1       Eq9_1(g2,GT,COA,winter,l1,s1)
        1       Eq9_1(g2,ST,COA,winter,l1,s1)
        1       Eq9_1(g2,Nuclear,COA,winter,l1,s1)
        1       Eq9_1(g3,CCGT,COA,winter,l1,s1)
        1       Eq9_1(g3,GT,COA,winter,l1,s1)
        1       Eq9_1(g3,ST,COA,winter,l1,s1)
        1       Eq9_1(g3,Nuclear,COA,winter,l1,s1)
        1       Eq9_1(g4,CCGT,COA,winter,l1,s1)
        1       Eq9_1(g4,GT,COA,winter,l1,s1)
        1       Eq9_1(g4,ST,COA,winter,l1,s1)
        1       Eq9_1(g4,Nuclear,COA,winter,l1,s1)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1)
        1       Eq9_4(fringe,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(fringe,west,COA,WOA,winter,l1,s1)
        1       Eq9_4(fringe,west,WOA,COA,winter,l1,s1)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s1)
        1       Eq9_4(g1,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g1,west,COA,WOA,winter,l1,s1)
        1       Eq9_4(g1,west,WOA,COA,winter,l1,s1)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s1)
        1       Eq9_4(g2,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g2,west,COA,WOA,winter,l1,s1)
        1       Eq9_4(g2,west,WOA,COA,winter,l1,s1)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s1)
        1       Eq9_4(g3,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g3,west,COA,WOA,winter,l1,s1)
        1       Eq9_4(g3,west,WOA,COA,winter,l1,s1)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s1)
        1       Eq9_4(g4,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g4,west,COA,WOA,winter,l1,s1)
        1       Eq9_4(g4,west,WOA,COA,winter,l1,s1)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1)
        1       Eq10_1(East,EOA,COA,winter,l1,s1)
       -1       Eq10_1(west,COA,WOA,winter,l1,s1)
        1       Eq10_1(west,WOA,COA,winter,l1,s1)

price(COA,winter,l2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq1(COA,winter,l2,s1)
        1       Eq9_1(fringe,CCGT,COA,winter,l2,s1)
        1       Eq9_1(fringe,GT,COA,winter,l2,s1)
        1       Eq9_1(fringe,ST,COA,winter,l2,s1)
        1       Eq9_1(fringe,Nuclear,COA,winter,l2,s1)
        1       Eq9_1(g1,CCGT,COA,winter,l2,s1)
        1       Eq9_1(g1,GT,COA,winter,l2,s1)
        1       Eq9_1(g1,ST,COA,winter,l2,s1)
        1       Eq9_1(g1,Nuclear,COA,winter,l2,s1)
        1       Eq9_1(g2,CCGT,COA,winter,l2,s1)
        1       Eq9_1(g2,GT,COA,winter,l2,s1)
        1       Eq9_1(g2,ST,COA,winter,l2,s1)
        1       Eq9_1(g2,Nuclear,COA,winter,l2,s1)
        1       Eq9_1(g3,CCGT,COA,winter,l2,s1)
        1       Eq9_1(g3,GT,COA,winter,l2,s1)
        1       Eq9_1(g3,ST,COA,winter,l2,s1)
        1       Eq9_1(g3,Nuclear,COA,winter,l2,s1)
        1       Eq9_1(g4,CCGT,COA,winter,l2,s1)
        1       Eq9_1(g4,GT,COA,winter,l2,s1)
        1       Eq9_1(g4,ST,COA,winter,l2,s1)
        1       Eq9_1(g4,Nuclear,COA,winter,l2,s1)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l2,s1)
        1       Eq9_4(fringe,East,EOA,COA,winter,l2,s1)
       -1       Eq9_4(fringe,west,COA,WOA,winter,l2,s1)
        1       Eq9_4(fringe,west,WOA,COA,winter,l2,s1)
       -1       Eq9_4(g1,East,COA,EOA,winter,l2,s1)
        1       Eq9_4(g1,East,EOA,COA,winter,l2,s1)
       -1       Eq9_4(g1,west,COA,WOA,winter,l2,s1)
        1       Eq9_4(g1,west,WOA,COA,winter,l2,s1)
       -1       Eq9_4(g2,East,COA,EOA,winter,l2,s1)
        1       Eq9_4(g2,East,EOA,COA,winter,l2,s1)
       -1       Eq9_4(g2,west,COA,WOA,winter,l2,s1)
        1       Eq9_4(g2,west,WOA,COA,winter,l2,s1)
       -1       Eq9_4(g3,East,COA,EOA,winter,l2,s1)
        1       Eq9_4(g3,East,EOA,COA,winter,l2,s1)
       -1       Eq9_4(g3,west,COA,WOA,winter,l2,s1)
        1       Eq9_4(g3,west,WOA,COA,winter,l2,s1)
       -1       Eq9_4(g4,East,COA,EOA,winter,l2,s1)
        1       Eq9_4(g4,East,EOA,COA,winter,l2,s1)
       -1       Eq9_4(g4,west,COA,WOA,winter,l2,s1)
        1       Eq9_4(g4,west,WOA,COA,winter,l2,s1)
       -1       Eq10_1(East,COA,EOA,winter,l2,s1)
        1       Eq10_1(East,EOA,COA,winter,l2,s1)
       -1       Eq10_1(west,COA,WOA,winter,l2,s1)
        1       Eq10_1(west,WOA,COA,winter,l2,s1)

price(COA,winter,l3,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq1(COA,winter,l3,s1)
        1       Eq9_1(fringe,CCGT,COA,winter,l3,s1)
        1       Eq9_1(fringe,GT,COA,winter,l3,s1)
        1       Eq9_1(fringe,ST,COA,winter,l3,s1)
        1       Eq9_1(fringe,Nuclear,COA,winter,l3,s1)
        1       Eq9_1(g1,CCGT,COA,winter,l3,s1)
        1       Eq9_1(g1,GT,COA,winter,l3,s1)
        1       Eq9_1(g1,ST,COA,winter,l3,s1)
        1       Eq9_1(g1,Nuclear,COA,winter,l3,s1)
        1       Eq9_1(g2,CCGT,COA,winter,l3,s1)
        1       Eq9_1(g2,GT,COA,winter,l3,s1)
        1       Eq9_1(g2,ST,COA,winter,l3,s1)
        1       Eq9_1(g2,Nuclear,COA,winter,l3,s1)
        1       Eq9_1(g3,CCGT,COA,winter,l3,s1)
        1       Eq9_1(g3,GT,COA,winter,l3,s1)
        1       Eq9_1(g3,ST,COA,winter,l3,s1)
        1       Eq9_1(g3,Nuclear,COA,winter,l3,s1)
        1       Eq9_1(g4,CCGT,COA,winter,l3,s1)
        1       Eq9_1(g4,GT,COA,winter,l3,s1)
        1       Eq9_1(g4,ST,COA,winter,l3,s1)
        1       Eq9_1(g4,Nuclear,COA,winter,l3,s1)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l3,s1)
        1       Eq9_4(fringe,East,EOA,COA,winter,l3,s1)
       -1       Eq9_4(fringe,west,COA,WOA,winter,l3,s1)
        1       Eq9_4(fringe,west,WOA,COA,winter,l3,s1)
       -1       Eq9_4(g1,East,COA,EOA,winter,l3,s1)
        1       Eq9_4(g1,East,EOA,COA,winter,l3,s1)
       -1       Eq9_4(g1,west,COA,WOA,winter,l3,s1)
        1       Eq9_4(g1,west,WOA,COA,winter,l3,s1)
       -1       Eq9_4(g2,East,COA,EOA,winter,l3,s1)
        1       Eq9_4(g2,East,EOA,COA,winter,l3,s1)
       -1       Eq9_4(g2,west,COA,WOA,winter,l3,s1)
        1       Eq9_4(g2,west,WOA,COA,winter,l3,s1)
       -1       Eq9_4(g3,East,COA,EOA,winter,l3,s1)
        1       Eq9_4(g3,East,EOA,COA,winter,l3,s1)
       -1       Eq9_4(g3,west,COA,WOA,winter,l3,s1)
        1       Eq9_4(g3,west,WOA,COA,winter,l3,s1)
       -1       Eq9_4(g4,East,COA,EOA,winter,l3,s1)
        1       Eq9_4(g4,East,EOA,COA,winter,l3,s1)
       -1       Eq9_4(g4,west,COA,WOA,winter,l3,s1)
        1       Eq9_4(g4,west,WOA,COA,winter,l3,s1)
       -1       Eq10_1(East,COA,EOA,winter,l3,s1)
        1       Eq10_1(East,EOA,COA,winter,l3,s1)
       -1       Eq10_1(west,COA,WOA,winter,l3,s1)
        1       Eq10_1(west,WOA,COA,winter,l3,s1)

REMAINING 93 ENTRIES SKIPPED

---- price_trans  tranmission price in USD per MWh

price_trans(East,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1)
       -1       Eq9_4(fringe,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g1,East,COA,EOA,winter,l1,s1)
       -1       Eq9_4(g1,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g2,East,COA,EOA,winter,l1,s1)
       -1       Eq9_4(g2,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g3,East,COA,EOA,winter,l1,s1)
       -1       Eq9_4(g3,East,EOA,COA,winter,l1,s1)
       -1       Eq9_4(g4,East,COA,EOA,winter,l1,s1)
       -1       Eq9_4(g4,East,EOA,COA,winter,l1,s1)
       -1       Eq10_1(East,COA,EOA,winter,l1,s1)
       -1       Eq10_1(East,EOA,COA,winter,l1,s1)
        1       Eq11_1(East,winter,l1,s1)

price_trans(East,winter,l2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l2,s1)
       -1       Eq9_4(fringe,East,EOA,COA,winter,l2,s1)
       -1       Eq9_4(g1,East,COA,EOA,winter,l2,s1)
       -1       Eq9_4(g1,East,EOA,COA,winter,l2,s1)
       -1       Eq9_4(g2,East,COA,EOA,winter,l2,s1)
       -1       Eq9_4(g2,East,EOA,COA,winter,l2,s1)
       -1       Eq9_4(g3,East,COA,EOA,winter,l2,s1)
       -1       Eq9_4(g3,East,EOA,COA,winter,l2,s1)
       -1       Eq9_4(g4,East,COA,EOA,winter,l2,s1)
       -1       Eq9_4(g4,East,EOA,COA,winter,l2,s1)
       -1       Eq10_1(East,COA,EOA,winter,l2,s1)
       -1       Eq10_1(East,EOA,COA,winter,l2,s1)
        1       Eq11_1(East,winter,l2,s1)

price_trans(East,winter,l3,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq9_4(fringe,East,COA,EOA,winter,l3,s1)
       -1       Eq9_4(fringe,East,EOA,COA,winter,l3,s1)
       -1       Eq9_4(g1,East,COA,EOA,winter,l3,s1)
       -1       Eq9_4(g1,East,EOA,COA,winter,l3,s1)
       -1       Eq9_4(g2,East,COA,EOA,winter,l3,s1)
       -1       Eq9_4(g2,East,EOA,COA,winter,l3,s1)
       -1       Eq9_4(g3,East,COA,EOA,winter,l3,s1)
       -1       Eq9_4(g3,East,EOA,COA,winter,l3,s1)
       -1       Eq9_4(g4,East,COA,EOA,winter,l3,s1)
       -1       Eq9_4(g4,East,EOA,COA,winter,l3,s1)
       -1       Eq10_1(East,COA,EOA,winter,l3,s1)
       -1       Eq10_1(East,EOA,COA,winter,l3,s1)
        1       Eq11_1(East,winter,l3,s1)

REMAINING 69 ENTRIES SKIPPED

---- alpha  shadow prices for the non-negative investment constraints in USD per  MW

alpha(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_2(fringe,CCGT,COA)

alpha(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_2(fringe,CCGT,EOA)

alpha(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_2(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- eta_high  shadow prices for the capacity retirment constraint in USD per  MW

eta_high(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_3(fringe,CCGT,COA)

eta_high(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_3(fringe,CCGT,EOA)

eta_high(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -1       Eq9_3(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- eta_low  

eta_low(fringe,CCGT,COA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_3(fringe,CCGT,COA)

eta_low(fringe,CCGT,EOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_3(fringe,CCGT,EOA)

eta_low(fringe,CCGT,SOA)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_3(fringe,CCGT,SOA)

REMAINING 77 ENTRIES SKIPPED

---- arbitrage  TSO outgoing electricity arbitrage from node r on line n

arbitrage(East,COA,EOA,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -0.0405  Eq1(COA,winter,l1,s1)
        0.0245  Eq1(EOA,winter,l1,s1)
        1       Eq_arb(East,COA,EOA,winter,l1,s1)

arbitrage(East,COA,EOA,winter,l2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -0.0305  Eq1(COA,winter,l2,s1)
        0.0166  Eq1(EOA,winter,l2,s1)
        1       Eq_arb(East,COA,EOA,winter,l2,s1)

arbitrage(East,COA,EOA,winter,l3,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -0.0264  Eq1(COA,winter,l3,s1)
        0.0133  Eq1(EOA,winter,l3,s1)
        1       Eq_arb(East,COA,EOA,winter,l3,s1)

REMAINING 141 ENTRIES SKIPPED

---- trade  outgoing electricity trade by firm i from node r on line n

trade(fringe,East,COA,EOA,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_8(fringe,COA,winter,l1,s1)
       -1       Eq9_8(fringe,EOA,winter,l1,s1)
        1       Eq_trade(fringe,East,COA,EOA,winter,l1,s1)

trade(fringe,East,COA,EOA,winter,l2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_8(fringe,COA,winter,l2,s1)
       -1       Eq9_8(fringe,EOA,winter,l2,s1)
        1       Eq_trade(fringe,East,COA,EOA,winter,l2,s1)

trade(fringe,East,COA,EOA,winter,l3,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       Eq9_8(fringe,COA,winter,l3,s1)
       -1       Eq9_8(fringe,EOA,winter,l3,s1)
        1       Eq_trade(fringe,East,COA,EOA,winter,l3,s1)

REMAINING 717 ENTRIES SKIPPED

---- trans  electricity trans by on line n

trans(East,winter,l1,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq11_2(East,winter,l1,s1)
        1       Eq11_3(East,winter,l1,s1)

trans(East,winter,l2,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq11_2(East,winter,l2,s1)
        1       Eq11_3(East,winter,l2,s1)

trans(East,winter,l3,s1)
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
       -1       Eq11_2(East,winter,l3,s1)
        1       Eq11_3(East,winter,l3,s1)

REMAINING 69 ENTRIES SKIPPED

---- tau  shadow prices for the high capacity constraint in USD per MW

tau(East,winter,l1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
      -20.4918  Eq11_1(East,winter,l1,s1)

tau(East,winter,l2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
      -20.4918  Eq11_1(East,winter,l2,s1)

tau(East,winter,l3,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
      -20.4918  Eq11_1(East,winter,l3,s1)

REMAINING 69 ENTRIES SKIPPED

---- zeta  shadow prices for the outgoing no-negative trade constraint in USD per MW

zeta(fringe,East,COA,EOA,winter,l1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_4(fringe,East,COA,EOA,winter,l1,s1)

zeta(fringe,East,COA,EOA,winter,l2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_4(fringe,East,COA,EOA,winter,l2,s1)

zeta(fringe,East,COA,EOA,winter,l3,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq9_4(fringe,East,COA,EOA,winter,l3,s1)

REMAINING 717 ENTRIES SKIPPED

---- shadows_arbitrage  shadow prices for no-negative incoming arbitrage constriant in USD per MW

shadows_arbitrage(East,COA,EOA,winter,l1,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l1,s1)

shadows_arbitrage(East,COA,EOA,winter,l2,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l2,s1)

shadows_arbitrage(East,COA,EOA,winter,l3,s1)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        1       Eq10_1(East,COA,EOA,winter,l3,s1)

REMAINING 141 ENTRIES SKIPPED
GAMS 24.1.3  r41464 Released Jul 26, 2013 WEX-WEI x86_64/MS Windows                                                                                                             10/06/16 11:39:50 Page 5
Dynamic Programming Investment
Model Statistics    SOLVE CMO Using MCP From line 699


MODEL STATISTICS

BLOCKS OF EQUATIONS          19     SINGLE EQUATIONS        8,796
BLOCKS OF VARIABLES          19     SINGLE VARIABLES        8,796
NON ZERO ELEMENTS        30,228     NON LINEAR N-Z              0
DERIVATIVE POOL              10     CONSTANT POOL              16
CODE LENGTH                   0


GENERATION TIME      =        0.094 SECONDS      9 MB  24.1.3 r41464 WEX-WEI


EXECUTION TIME       =        0.688 SECONDS      9 MB  24.1.3 r41464 WEX-WEI
